
D:\Conestoga\Embedded programing\WithADC\ABordiuh_Temp_Sens\Debug\ABordiuh_Temp_Sens.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004864  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004b2c  08004b2c  00014b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000000  08004b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000144  20000068  08004ba4  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001ac  08004ba4  000201ac  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .debug_info   000107d5  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000023de  00000000  00000000  0003086d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008ae3  00000000  00000000  00032c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b68  00000000  00000000  0003b730  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e90  00000000  00000000  0003c298  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000059bf  00000000  00000000  0003d128  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000043a5  00000000  00000000  00042ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00046e8c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000029a8  00000000  00000000  00046f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         0000009c  00000000  00000000  000498b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000014d  00000000  00000000  00049950  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049dc 	.word	0x080049dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080049dc 	.word	0x080049dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f092 0f00 	teq	r2, #0
 800055a:	bf14      	ite	ne
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000570:	e720      	b.n	80003b4 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_ul2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	e00a      	b.n	800059a <__aeabi_l2d+0x16>

08000584 <__aeabi_l2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000592:	d502      	bpl.n	800059a <__aeabi_l2d+0x16>
 8000594:	4240      	negs	r0, r0
 8000596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800059a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a6:	f43f aedc 	beq.w	8000362 <__adddf3+0xe6>
 80005aa:	f04f 0203 	mov.w	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005c2:	f1c2 0320 	rsb	r3, r2, #32
 80005c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80005d2:	ea40 000e 	orr.w	r0, r0, lr
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	4414      	add	r4, r2
 80005dc:	e6c1      	b.n	8000362 <__adddf3+0xe6>
 80005de:	bf00      	nop

080005e0 <__aeabi_dmul>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ee:	bf1d      	ittte	ne
 80005f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f4:	ea94 0f0c 	teqne	r4, ip
 80005f8:	ea95 0f0c 	teqne	r5, ip
 80005fc:	f000 f8de 	bleq	80007bc <__aeabi_dmul+0x1dc>
 8000600:	442c      	add	r4, r5
 8000602:	ea81 0603 	eor.w	r6, r1, r3
 8000606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800060a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000612:	bf18      	it	ne
 8000614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000620:	d038      	beq.n	8000694 <__aeabi_dmul+0xb4>
 8000622:	fba0 ce02 	umull	ip, lr, r0, r2
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000632:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000636:	f04f 0600 	mov.w	r6, #0
 800063a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063e:	f09c 0f00 	teq	ip, #0
 8000642:	bf18      	it	ne
 8000644:	f04e 0e01 	orrne.w	lr, lr, #1
 8000648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800064c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000654:	d204      	bcs.n	8000660 <__aeabi_dmul+0x80>
 8000656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800065a:	416d      	adcs	r5, r5
 800065c:	eb46 0606 	adc.w	r6, r6, r6
 8000660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800066c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000678:	bf88      	it	hi
 800067a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067e:	d81e      	bhi.n	80006be <__aeabi_dmul+0xde>
 8000680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000684:	bf08      	it	eq
 8000686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800068a:	f150 0000 	adcs.w	r0, r0, #0
 800068e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000698:	ea46 0101 	orr.w	r1, r6, r1
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	ea81 0103 	eor.w	r1, r1, r3
 80006a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a8:	bfc2      	ittt	gt
 80006aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	popgt	{r4, r5, r6, pc}
 80006b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b8:	f04f 0e00 	mov.w	lr, #0
 80006bc:	3c01      	subs	r4, #1
 80006be:	f300 80ab 	bgt.w	8000818 <__aeabi_dmul+0x238>
 80006c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c6:	bfde      	ittt	le
 80006c8:	2000      	movle	r0, #0
 80006ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ce:	bd70      	pople	{r4, r5, r6, pc}
 80006d0:	f1c4 0400 	rsb	r4, r4, #0
 80006d4:	3c20      	subs	r4, #32
 80006d6:	da35      	bge.n	8000744 <__aeabi_dmul+0x164>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc1b      	bgt.n	8000714 <__aeabi_dmul+0x134>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f305 	lsl.w	r3, r0, r5
 80006e8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	fa21 f604 	lsr.w	r6, r1, r4
 8000704:	eb42 0106 	adc.w	r1, r2, r6
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 040c 	rsb	r4, r4, #12
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f304 	lsl.w	r3, r0, r4
 8000720:	fa20 f005 	lsr.w	r0, r0, r5
 8000724:	fa01 f204 	lsl.w	r2, r1, r4
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	f141 0100 	adc.w	r1, r1, #0
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f205 	lsl.w	r2, r0, r5
 800074c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000750:	fa20 f304 	lsr.w	r3, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea43 0302 	orr.w	r3, r3, r2
 800075c:	fa21 f004 	lsr.w	r0, r1, r4
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	fa21 f204 	lsr.w	r2, r1, r4
 8000768:	ea20 0002 	bic.w	r0, r0, r2
 800076c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f094 0f00 	teq	r4, #0
 8000780:	d10f      	bne.n	80007a2 <__aeabi_dmul+0x1c2>
 8000782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000786:	0040      	lsls	r0, r0, #1
 8000788:	eb41 0101 	adc.w	r1, r1, r1
 800078c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3c01      	subeq	r4, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1a6>
 8000796:	ea41 0106 	orr.w	r1, r1, r6
 800079a:	f095 0f00 	teq	r5, #0
 800079e:	bf18      	it	ne
 80007a0:	4770      	bxne	lr
 80007a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	eb43 0303 	adc.w	r3, r3, r3
 80007ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3d01      	subeq	r5, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1c6>
 80007b6:	ea43 0306 	orr.w	r3, r3, r6
 80007ba:	4770      	bx	lr
 80007bc:	ea94 0f0c 	teq	r4, ip
 80007c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c4:	bf18      	it	ne
 80007c6:	ea95 0f0c 	teqne	r5, ip
 80007ca:	d00c      	beq.n	80007e6 <__aeabi_dmul+0x206>
 80007cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d6:	d1d1      	bne.n	800077c <__aeabi_dmul+0x19c>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ea:	bf06      	itte	eq
 80007ec:	4610      	moveq	r0, r2
 80007ee:	4619      	moveq	r1, r3
 80007f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f4:	d019      	beq.n	800082a <__aeabi_dmul+0x24a>
 80007f6:	ea94 0f0c 	teq	r4, ip
 80007fa:	d102      	bne.n	8000802 <__aeabi_dmul+0x222>
 80007fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000800:	d113      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000802:	ea95 0f0c 	teq	r5, ip
 8000806:	d105      	bne.n	8000814 <__aeabi_dmul+0x234>
 8000808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800080c:	bf1c      	itt	ne
 800080e:	4610      	movne	r0, r2
 8000810:	4619      	movne	r1, r3
 8000812:	d10a      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000832:	bd70      	pop	{r4, r5, r6, pc}

08000834 <__aeabi_ddiv>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000842:	bf1d      	ittte	ne
 8000844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000848:	ea94 0f0c 	teqne	r4, ip
 800084c:	ea95 0f0c 	teqne	r5, ip
 8000850:	f000 f8a7 	bleq	80009a2 <__aeabi_ddiv+0x16e>
 8000854:	eba4 0405 	sub.w	r4, r4, r5
 8000858:	ea81 0e03 	eor.w	lr, r1, r3
 800085c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000864:	f000 8088 	beq.w	8000978 <__aeabi_ddiv+0x144>
 8000868:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800086c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000878:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800087c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000884:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800088c:	429d      	cmp	r5, r3
 800088e:	bf08      	it	eq
 8000890:	4296      	cmpeq	r6, r2
 8000892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000896:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800089a:	d202      	bcs.n	80008a2 <__aeabi_ddiv+0x6e>
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	1ab6      	subs	r6, r6, r2
 80008a4:	eb65 0503 	sbc.w	r5, r5, r3
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000910:	ea55 0e06 	orrs.w	lr, r5, r6
 8000914:	d018      	beq.n	8000948 <__aeabi_ddiv+0x114>
 8000916:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800091a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800092a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000932:	d1c0      	bne.n	80008b6 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	d10b      	bne.n	8000952 <__aeabi_ddiv+0x11e>
 800093a:	ea41 0100 	orr.w	r1, r1, r0
 800093e:	f04f 0000 	mov.w	r0, #0
 8000942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000946:	e7b6      	b.n	80008b6 <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	bf04      	itt	eq
 800094e:	4301      	orreq	r1, r0
 8000950:	2000      	moveq	r0, #0
 8000952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000956:	bf88      	it	hi
 8000958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800095c:	f63f aeaf 	bhi.w	80006be <__aeabi_dmul+0xde>
 8000960:	ebb5 0c03 	subs.w	ip, r5, r3
 8000964:	bf04      	itt	eq
 8000966:	ebb6 0c02 	subseq.w	ip, r6, r2
 800096a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096e:	f150 0000 	adcs.w	r0, r0, #0
 8000972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800097c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000984:	bfc2      	ittt	gt
 8000986:	ebd4 050c 	rsbsgt	r5, r4, ip
 800098a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098e:	bd70      	popgt	{r4, r5, r6, pc}
 8000990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000994:	f04f 0e00 	mov.w	lr, #0
 8000998:	3c01      	subs	r4, #1
 800099a:	e690      	b.n	80006be <__aeabi_dmul+0xde>
 800099c:	ea45 0e06 	orr.w	lr, r5, r6
 80009a0:	e68d      	b.n	80006be <__aeabi_dmul+0xde>
 80009a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a6:	ea94 0f0c 	teq	r4, ip
 80009aa:	bf08      	it	eq
 80009ac:	ea95 0f0c 	teqeq	r5, ip
 80009b0:	f43f af3b 	beq.w	800082a <__aeabi_dmul+0x24a>
 80009b4:	ea94 0f0c 	teq	r4, ip
 80009b8:	d10a      	bne.n	80009d0 <__aeabi_ddiv+0x19c>
 80009ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009be:	f47f af34 	bne.w	800082a <__aeabi_dmul+0x24a>
 80009c2:	ea95 0f0c 	teq	r5, ip
 80009c6:	f47f af25 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e72c      	b.n	800082a <__aeabi_dmul+0x24a>
 80009d0:	ea95 0f0c 	teq	r5, ip
 80009d4:	d106      	bne.n	80009e4 <__aeabi_ddiv+0x1b0>
 80009d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009da:	f43f aefd 	beq.w	80007d8 <__aeabi_dmul+0x1f8>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e722      	b.n	800082a <__aeabi_dmul+0x24a>
 80009e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ee:	f47f aec5 	bne.w	800077c <__aeabi_dmul+0x19c>
 80009f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f6:	f47f af0d 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fe:	f47f aeeb 	bne.w	80007d8 <__aeabi_dmul+0x1f8>
 8000a02:	e712      	b.n	800082a <__aeabi_dmul+0x24a>

08000a04 <__aeabi_d2iz>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a0c:	d215      	bcs.n	8000a3a <__aeabi_d2iz+0x36>
 8000a0e:	d511      	bpl.n	8000a34 <__aeabi_d2iz+0x30>
 8000a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d912      	bls.n	8000a40 <__aeabi_d2iz+0x3c>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2e:	bf18      	it	ne
 8000a30:	4240      	negne	r0, r0
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d105      	bne.n	8000a4c <__aeabi_d2iz+0x48>
 8000a40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a44:	bf08      	it	eq
 8000a46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b97e 	b.w	8000d68 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	468c      	mov	ip, r1
 8000a8a:	460e      	mov	r6, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	9d08      	ldr	r5, [sp, #32]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d150      	bne.n	8000b36 <__udivmoddi4+0xb2>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4617      	mov	r7, r2
 8000a98:	d96c      	bls.n	8000b74 <__udivmoddi4+0xf0>
 8000a9a:	fab2 fe82 	clz	lr, r2
 8000a9e:	f1be 0f00 	cmp.w	lr, #0
 8000aa2:	d00b      	beq.n	8000abc <__udivmoddi4+0x38>
 8000aa4:	f1ce 0420 	rsb	r4, lr, #32
 8000aa8:	fa20 f404 	lsr.w	r4, r0, r4
 8000aac:	fa01 f60e 	lsl.w	r6, r1, lr
 8000ab0:	ea44 0c06 	orr.w	ip, r4, r6
 8000ab4:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ab8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000abc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ac0:	0c22      	lsrs	r2, r4, #16
 8000ac2:	fbbc f0f9 	udiv	r0, ip, r9
 8000ac6:	fa1f f887 	uxth.w	r8, r7
 8000aca:	fb09 c610 	mls	r6, r9, r0, ip
 8000ace:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000ad2:	fb00 f308 	mul.w	r3, r0, r8
 8000ad6:	42b3      	cmp	r3, r6
 8000ad8:	d909      	bls.n	8000aee <__udivmoddi4+0x6a>
 8000ada:	19f6      	adds	r6, r6, r7
 8000adc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ae0:	f080 8122 	bcs.w	8000d28 <__udivmoddi4+0x2a4>
 8000ae4:	42b3      	cmp	r3, r6
 8000ae6:	f240 811f 	bls.w	8000d28 <__udivmoddi4+0x2a4>
 8000aea:	3802      	subs	r0, #2
 8000aec:	443e      	add	r6, r7
 8000aee:	1af6      	subs	r6, r6, r3
 8000af0:	b2a2      	uxth	r2, r4
 8000af2:	fbb6 f3f9 	udiv	r3, r6, r9
 8000af6:	fb09 6613 	mls	r6, r9, r3, r6
 8000afa:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000afe:	fb03 f808 	mul.w	r8, r3, r8
 8000b02:	45a0      	cmp	r8, r4
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0x96>
 8000b06:	19e4      	adds	r4, r4, r7
 8000b08:	f103 32ff 	add.w	r2, r3, #4294967295
 8000b0c:	f080 810a 	bcs.w	8000d24 <__udivmoddi4+0x2a0>
 8000b10:	45a0      	cmp	r8, r4
 8000b12:	f240 8107 	bls.w	8000d24 <__udivmoddi4+0x2a0>
 8000b16:	3b02      	subs	r3, #2
 8000b18:	443c      	add	r4, r7
 8000b1a:	ebc8 0404 	rsb	r4, r8, r4
 8000b1e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b22:	2100      	movs	r1, #0
 8000b24:	2d00      	cmp	r5, #0
 8000b26:	d062      	beq.n	8000bee <__udivmoddi4+0x16a>
 8000b28:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	602c      	str	r4, [r5, #0]
 8000b30:	606b      	str	r3, [r5, #4]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d907      	bls.n	8000b4a <__udivmoddi4+0xc6>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	d055      	beq.n	8000bea <__udivmoddi4+0x166>
 8000b3e:	2100      	movs	r1, #0
 8000b40:	e885 0041 	stmia.w	r5, {r0, r6}
 8000b44:	4608      	mov	r0, r1
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f183 	clz	r1, r3
 8000b4e:	2900      	cmp	r1, #0
 8000b50:	f040 8090 	bne.w	8000c74 <__udivmoddi4+0x1f0>
 8000b54:	42b3      	cmp	r3, r6
 8000b56:	d302      	bcc.n	8000b5e <__udivmoddi4+0xda>
 8000b58:	4282      	cmp	r2, r0
 8000b5a:	f200 80f8 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000b5e:	1a84      	subs	r4, r0, r2
 8000b60:	eb66 0603 	sbc.w	r6, r6, r3
 8000b64:	2001      	movs	r0, #1
 8000b66:	46b4      	mov	ip, r6
 8000b68:	2d00      	cmp	r5, #0
 8000b6a:	d040      	beq.n	8000bee <__udivmoddi4+0x16a>
 8000b6c:	e885 1010 	stmia.w	r5, {r4, ip}
 8000b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b74:	b912      	cbnz	r2, 8000b7c <__udivmoddi4+0xf8>
 8000b76:	2701      	movs	r7, #1
 8000b78:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b7c:	fab7 fe87 	clz	lr, r7
 8000b80:	f1be 0f00 	cmp.w	lr, #0
 8000b84:	d135      	bne.n	8000bf2 <__udivmoddi4+0x16e>
 8000b86:	1bf3      	subs	r3, r6, r7
 8000b88:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b8c:	fa1f fc87 	uxth.w	ip, r7
 8000b90:	2101      	movs	r1, #1
 8000b92:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b96:	0c22      	lsrs	r2, r4, #16
 8000b98:	fb08 3610 	mls	r6, r8, r0, r3
 8000b9c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000ba0:	fb0c f300 	mul.w	r3, ip, r0
 8000ba4:	42b3      	cmp	r3, r6
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x134>
 8000ba8:	19f6      	adds	r6, r6, r7
 8000baa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x132>
 8000bb0:	42b3      	cmp	r3, r6
 8000bb2:	f200 80ce 	bhi.w	8000d52 <__udivmoddi4+0x2ce>
 8000bb6:	4610      	mov	r0, r2
 8000bb8:	1af6      	subs	r6, r6, r3
 8000bba:	b2a2      	uxth	r2, r4
 8000bbc:	fbb6 f3f8 	udiv	r3, r6, r8
 8000bc0:	fb08 6613 	mls	r6, r8, r3, r6
 8000bc4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000bc8:	fb0c fc03 	mul.w	ip, ip, r3
 8000bcc:	45a4      	cmp	ip, r4
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x15c>
 8000bd0:	19e4      	adds	r4, r4, r7
 8000bd2:	f103 32ff 	add.w	r2, r3, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x15a>
 8000bd8:	45a4      	cmp	ip, r4
 8000bda:	f200 80b5 	bhi.w	8000d48 <__udivmoddi4+0x2c4>
 8000bde:	4613      	mov	r3, r2
 8000be0:	ebcc 0404 	rsb	r4, ip, r4
 8000be4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000be8:	e79c      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000bea:	4629      	mov	r1, r5
 8000bec:	4628      	mov	r0, r5
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	f1ce 0120 	rsb	r1, lr, #32
 8000bf6:	fa06 f30e 	lsl.w	r3, r6, lr
 8000bfa:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bfe:	fa20 f901 	lsr.w	r9, r0, r1
 8000c02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c06:	40ce      	lsrs	r6, r1
 8000c08:	ea49 0903 	orr.w	r9, r9, r3
 8000c0c:	fbb6 faf8 	udiv	sl, r6, r8
 8000c10:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000c14:	fb08 661a 	mls	r6, r8, sl, r6
 8000c18:	fa1f fc87 	uxth.w	ip, r7
 8000c1c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000c20:	fb0a f20c 	mul.w	r2, sl, ip
 8000c24:	429a      	cmp	r2, r3
 8000c26:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1be>
 8000c2c:	19db      	adds	r3, r3, r7
 8000c2e:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000c32:	f080 8087 	bcs.w	8000d44 <__udivmoddi4+0x2c0>
 8000c36:	429a      	cmp	r2, r3
 8000c38:	f240 8084 	bls.w	8000d44 <__udivmoddi4+0x2c0>
 8000c3c:	f1aa 0a02 	sub.w	sl, sl, #2
 8000c40:	443b      	add	r3, r7
 8000c42:	1a9b      	subs	r3, r3, r2
 8000c44:	fa1f f989 	uxth.w	r9, r9
 8000c48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000c50:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000c54:	fb01 f60c 	mul.w	r6, r1, ip
 8000c58:	429e      	cmp	r6, r3
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0x1e8>
 8000c5c:	19db      	adds	r3, r3, r7
 8000c5e:	f101 32ff 	add.w	r2, r1, #4294967295
 8000c62:	d26b      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000c64:	429e      	cmp	r6, r3
 8000c66:	d969      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000c68:	3902      	subs	r1, #2
 8000c6a:	443b      	add	r3, r7
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000c72:	e78e      	b.n	8000b92 <__udivmoddi4+0x10e>
 8000c74:	f1c1 0e20 	rsb	lr, r1, #32
 8000c78:	fa22 f40e 	lsr.w	r4, r2, lr
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	4323      	orrs	r3, r4
 8000c80:	fa20 f70e 	lsr.w	r7, r0, lr
 8000c84:	fa06 f401 	lsl.w	r4, r6, r1
 8000c88:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c8c:	fa26 f60e 	lsr.w	r6, r6, lr
 8000c90:	433c      	orrs	r4, r7
 8000c92:	fbb6 f9fc 	udiv	r9, r6, ip
 8000c96:	0c27      	lsrs	r7, r4, #16
 8000c98:	fb0c 6619 	mls	r6, ip, r9, r6
 8000c9c:	fa1f f883 	uxth.w	r8, r3
 8000ca0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000ca4:	fb09 f708 	mul.w	r7, r9, r8
 8000ca8:	42b7      	cmp	r7, r6
 8000caa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cae:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x242>
 8000cb4:	18f6      	adds	r6, r6, r3
 8000cb6:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cba:	d241      	bcs.n	8000d40 <__udivmoddi4+0x2bc>
 8000cbc:	42b7      	cmp	r7, r6
 8000cbe:	d93f      	bls.n	8000d40 <__udivmoddi4+0x2bc>
 8000cc0:	f1a9 0902 	sub.w	r9, r9, #2
 8000cc4:	441e      	add	r6, r3
 8000cc6:	1bf6      	subs	r6, r6, r7
 8000cc8:	b2a0      	uxth	r0, r4
 8000cca:	fbb6 f4fc 	udiv	r4, r6, ip
 8000cce:	fb0c 6614 	mls	r6, ip, r4, r6
 8000cd2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000cd6:	fb04 f808 	mul.w	r8, r4, r8
 8000cda:	45b8      	cmp	r8, r7
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x26a>
 8000cde:	18ff      	adds	r7, r7, r3
 8000ce0:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ce4:	d228      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000ce6:	45b8      	cmp	r8, r7
 8000ce8:	d926      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000cea:	3c02      	subs	r4, #2
 8000cec:	441f      	add	r7, r3
 8000cee:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000cf2:	ebc8 0707 	rsb	r7, r8, r7
 8000cf6:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfa:	454f      	cmp	r7, r9
 8000cfc:	4644      	mov	r4, r8
 8000cfe:	464e      	mov	r6, r9
 8000d00:	d314      	bcc.n	8000d2c <__udivmoddi4+0x2a8>
 8000d02:	d029      	beq.n	8000d58 <__udivmoddi4+0x2d4>
 8000d04:	b365      	cbz	r5, 8000d60 <__udivmoddi4+0x2dc>
 8000d06:	ebba 0304 	subs.w	r3, sl, r4
 8000d0a:	eb67 0706 	sbc.w	r7, r7, r6
 8000d0e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000d12:	40cb      	lsrs	r3, r1
 8000d14:	40cf      	lsrs	r7, r1
 8000d16:	ea4e 0303 	orr.w	r3, lr, r3
 8000d1a:	e885 0088 	stmia.w	r5, {r3, r7}
 8000d1e:	2100      	movs	r1, #0
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	4613      	mov	r3, r2
 8000d26:	e6f8      	b.n	8000b1a <__udivmoddi4+0x96>
 8000d28:	4610      	mov	r0, r2
 8000d2a:	e6e0      	b.n	8000aee <__udivmoddi4+0x6a>
 8000d2c:	ebb8 0402 	subs.w	r4, r8, r2
 8000d30:	eb69 0603 	sbc.w	r6, r9, r3
 8000d34:	3801      	subs	r0, #1
 8000d36:	e7e5      	b.n	8000d04 <__udivmoddi4+0x280>
 8000d38:	4604      	mov	r4, r0
 8000d3a:	e7d8      	b.n	8000cee <__udivmoddi4+0x26a>
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	e795      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d40:	4681      	mov	r9, r0
 8000d42:	e7c0      	b.n	8000cc6 <__udivmoddi4+0x242>
 8000d44:	468a      	mov	sl, r1
 8000d46:	e77c      	b.n	8000c42 <__udivmoddi4+0x1be>
 8000d48:	3b02      	subs	r3, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e748      	b.n	8000be0 <__udivmoddi4+0x15c>
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e70a      	b.n	8000b68 <__udivmoddi4+0xe4>
 8000d52:	3802      	subs	r0, #2
 8000d54:	443e      	add	r6, r7
 8000d56:	e72f      	b.n	8000bb8 <__udivmoddi4+0x134>
 8000d58:	45c2      	cmp	sl, r8
 8000d5a:	d3e7      	bcc.n	8000d2c <__udivmoddi4+0x2a8>
 8000d5c:	463e      	mov	r6, r7
 8000d5e:	e7d1      	b.n	8000d04 <__udivmoddi4+0x280>
 8000d60:	4629      	mov	r1, r5
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	bf00      	nop

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000d72:	6818      	ldr	r0, [r3, #0]
 8000d74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d78:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d7c:	f000 fc20 	bl	80015c0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	4621      	mov	r1, r4
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f000 fbda 	bl	8001540 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	bd10      	pop	{r4, pc}
 8000d90:	20000000 	.word	0x20000000

08000d94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d94:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d96:	2003      	movs	r0, #3
 8000d98:	f000 fbc0 	bl	800151c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff ffe5 	bl	8000d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da2:	f002 fca7 	bl	80036f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000da6:	2000      	movs	r0, #0
 8000da8:	bd08      	pop	{r3, pc}
	...

08000dac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000dac:	4a02      	ldr	r2, [pc, #8]	; (8000db8 <HAL_IncTick+0xc>)
 8000dae:	6813      	ldr	r3, [r2, #0]
 8000db0:	3301      	adds	r3, #1
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000090 	.word	0x20000090

08000dbc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000dbc:	4b01      	ldr	r3, [pc, #4]	; (8000dc4 <HAL_GetTick+0x8>)
 8000dbe:	6818      	ldr	r0, [r3, #0]
}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000090 	.word	0x20000090

08000dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc8:	b538      	push	{r3, r4, r5, lr}
 8000dca:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000dcc:	f7ff fff6 	bl	8000dbc <HAL_GetTick>
 8000dd0:	4605      	mov	r5, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000dd2:	f7ff fff3 	bl	8000dbc <HAL_GetTick>
 8000dd6:	1b40      	subs	r0, r0, r5
 8000dd8:	42a0      	cmp	r0, r4
 8000dda:	d3fa      	bcc.n	8000dd2 <HAL_Delay+0xa>
  {
  }
}
 8000ddc:	bd38      	pop	{r3, r4, r5, pc}
	...

08000de0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpCFGR = 0;
  __IO uint32_t wait_loop_index = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000de6:	4604      	mov	r4, r0
 8000de8:	2800      	cmp	r0, #0
 8000dea:	f000 80c4 	beq.w	8000f76 <HAL_ADC_Init+0x196>
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dee:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000df0:	b925      	cbnz	r5, 8000dfc <HAL_ADC_Init+0x1c>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000df2:	f002 fcc5 	bl	8003780 <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000df6:	65e5      	str	r5, [r4, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000df8:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
  }
  
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  /*  Exit deep power down mode if still in that state */
  if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_DEEPPWD))
 8000dfc:	6823      	ldr	r3, [r4, #0]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	0092      	lsls	r2, r2, #2
  {
    /* Exit deep power down mode */ 
    CLEAR_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8000e02:	bf42      	ittt	mi
 8000e04:	689a      	ldrmi	r2, [r3, #8]
 8000e06:	f022 5200 	bicmi.w	r2, r2, #536870912	; 0x20000000
 8000e0a:	609a      	strmi	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if  (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	00d7      	lsls	r7, r2, #3
 8000e10:	d504      	bpl.n	8000e1c <HAL_ADC_Init+0x3c>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))  
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	00d6      	lsls	r6, r2, #3
 8000e16:	d513      	bpl.n	8000e40 <HAL_ADC_Init+0x60>
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e18:	2000      	movs	r0, #0
 8000e1a:	e01a      	b.n	8000e52 <HAL_ADC_Init+0x72>
  }
  
  if  (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
  {  
    /* Enable ADC internal voltage regulator */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 8000e1c:	689a      	ldr	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8000e1e:	495c      	ldr	r1, [pc, #368]	; (8000f90 <HAL_ADC_Init+0x1b0>)
  }
  
  if  (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
  {  
    /* Enable ADC internal voltage regulator */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 8000e20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e24:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8000e26:	4a5b      	ldr	r2, [pc, #364]	; (8000f94 <HAL_ADC_Init+0x1b4>)
 8000e28:	6812      	ldr	r2, [r2, #0]
 8000e2a:	fbb2 f1f1 	udiv	r1, r2, r1
 8000e2e:	220a      	movs	r2, #10
 8000e30:	434a      	muls	r2, r1
    while(wait_loop_index != 0)
    {
      wait_loop_index--;
 8000e32:	9201      	str	r2, [sp, #4]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
    while(wait_loop_index != 0)
 8000e34:	9a01      	ldr	r2, [sp, #4]
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	d0eb      	beq.n	8000e12 <HAL_ADC_Init+0x32>
    {
      wait_loop_index--;
 8000e3a:	9a01      	ldr	r2, [sp, #4]
 8000e3c:	3a01      	subs	r2, #1
 8000e3e:	e7f8      	b.n	8000e32 <HAL_ADC_Init+0x52>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))  
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e40:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000e42:	f042 0210 	orr.w	r2, r2, #16
 8000e46:	65a2      	str	r2, [r4, #88]	; 0x58
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e48:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000e4a:	f042 0201 	orr.w	r2, r2, #1
 8000e4e:	65e2      	str	r2, [r4, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 8000e50:	2001      	movs	r0, #1
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e52:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000e54:	06d5      	lsls	r5, r2, #27
 8000e56:	f100 808a 	bmi.w	8000f6e <HAL_ADC_Init+0x18e>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  )
 8000e5a:	689a      	ldr	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e5c:	0751      	lsls	r1, r2, #29
 8000e5e:	f100 8086 	bmi.w	8000f6e <HAL_ADC_Init+0x18e>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  )
  {
    
    /* Initialize the ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8000e62:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000e64:	f042 0202 	orr.w	r2, r2, #2
 8000e68:	65a2      	str	r2, [r4, #88]	; 0x58
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	f002 0203 	and.w	r2, r2, #3
 8000e70:	2a01      	cmp	r2, #1
 8000e72:	f040 8082 	bne.w	8000f7a <HAL_ADC_Init+0x19a>
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	07d2      	lsls	r2, r2, #31
 8000e7a:	d57e      	bpl.n	8000f7a <HAL_ADC_Init+0x19a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e80:	fa91 f1a1 	rbit	r1, r1
 8000e84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8000e88:	fab1 f581 	clz	r5, r1
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 8000e8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8000e8e:	fa92 f2a2 	rbit	r2, r2
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8000e92:	68e1      	ldr	r1, [r4, #12]
 8000e94:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8000e96:	430f      	orrs	r7, r1
 8000e98:	68a1      	ldr	r1, [r4, #8]
 8000e9a:	430f      	orrs	r7, r1
 8000e9c:	69e1      	ldr	r1, [r4, #28]
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 8000e9e:	fab2 f282 	clz	r2, r2
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8000ea2:	40a9      	lsls	r1, r5
 8000ea4:	4339      	orrs	r1, r7
 8000ea6:	fa06 f202 	lsl.w	r2, r6, r2
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000eaa:	2e01      	cmp	r6, #1
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8000eac:	ea42 0201 	orr.w	r2, r2, r1
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000eb0:	d109      	bne.n	8000ec6 <HAL_ADC_Init+0xe6>
 8000eb2:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8000eb6:	fa91 f1a1 	rbit	r1, r1
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000eba:	fab1 f581 	clz	r5, r1
 8000ebe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000ec0:	3901      	subs	r1, #1
 8000ec2:	40a9      	lsls	r1, r5
 8000ec4:	430a      	orrs	r2, r1
    /* start.                                                                 */
    /*  - external trigger to start conversion     Init.ExternalTrigConv      */
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /* Note:  parameter ExternalTrigConvEdge set to "trigger edge none" is    */
    /*        equivalent to software start.                                   */
    if ((hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ec6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8000ec8:	2d01      	cmp	r5, #1
 8000eca:	d003      	beq.n	8000ed4 <HAL_ADC_Init+0xf4>
    &&  (hadc->Init.ExternalTrigConvEdge != ADC_EXTERNALTRIGCONVEDGE_NONE))
 8000ecc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000ece:	b109      	cbz	r1, 8000ed4 <HAL_ADC_Init+0xf4>
    {
      tmpCFGR |= ( hadc->Init.ExternalTrigConv |  hadc->Init.ExternalTrigConvEdge);
 8000ed0:	4329      	orrs	r1, r5
 8000ed2:	430a      	orrs	r2, r1
    }
    
     /* Update Configuration Register CFGR */
     MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8000ed4:	68dd      	ldr	r5, [r3, #12]
 8000ed6:	4930      	ldr	r1, [pc, #192]	; (8000f98 <HAL_ADC_Init+0x1b8>)
 8000ed8:	4029      	ands	r1, r5
 8000eda:	430a      	orrs	r2, r1
 8000edc:	60da      	str	r2, [r3, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	f012 0f0c 	tst.w	r2, #12
 8000ee4:	d12e      	bne.n	8000f44 <HAL_ADC_Init+0x164>
 8000ee6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eea:	fa92 f2a2 	rbit	r2, r2
 8000eee:	2502      	movs	r5, #2
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000ef0:	fab2 f282 	clz	r2, r2
 8000ef4:	fa95 f5a5 	rbit	r5, r5
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8000ef8:	fab5 f685 	clz	r6, r5
               
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8000efc:	69a5      	ldr	r5, [r4, #24]
 8000efe:	68d9      	ldr	r1, [r3, #12]
 8000f00:	fa05 f202 	lsl.w	r2, r5, r2
 8000f04:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8000f06:	40b5      	lsls	r5, r6
 8000f08:	4315      	orrs	r5, r2
 8000f0a:	f421 4280 	bic.w	r2, r1, #16384	; 0x4000
 8000f0e:	f022 0202 	bic.w	r2, r2, #2
 8000f12:	432a      	orrs	r2, r5
 8000f14:	60da      	str	r2, [r3, #12]
    
 
      if (hadc->Init.OversamplingMode == ENABLE)
 8000f16:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000f18:	2a01      	cmp	r2, #1
 8000f1a:	d10f      	bne.n	8000f3c <HAL_ADC_Init+0x15c>
       /* Configuration of Oversampler:                                       */
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS, 
 8000f1c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8000f1e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f20:	6919      	ldr	r1, [r3, #16]
 8000f22:	432a      	orrs	r2, r5
 8000f24:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000f26:	f042 0201 	orr.w	r2, r2, #1
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8000f2e:	4315      	orrs	r5, r2
 8000f30:	f421 62ff 	bic.w	r2, r1, #2040	; 0x7f8
 8000f34:	f022 0205 	bic.w	r2, r2, #5
 8000f38:	432a      	orrs	r2, r5
 8000f3a:	e002      	b.n	8000f42 <HAL_ADC_Init+0x162>
                               hadc->Init.Oversampling.OversamplingStopReset);
      }
      else
      {
        /* Disable Regular OverSampling */
        CLEAR_BIT( hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000f3c:	691a      	ldr	r2, [r3, #16]
 8000f3e:	f022 0201 	bic.w	r2, r2, #1
 8000f42:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f44:	6922      	ldr	r2, [r4, #16]
 8000f46:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));  
 8000f48:	bf08      	it	eq
 8000f4a:	6a21      	ldreq	r1, [r4, #32]
 8000f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f4e:	bf03      	ittte	eq
 8000f50:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8000f54:	f022 020f 	biceq.w	r2, r2, #15
 8000f58:	430a      	orreq	r2, r1
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f5a:	f022 020f 	bicne.w	r2, r2, #15
 8000f5e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000f60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000f62:	f023 0303 	bic.w	r3, r3, #3
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	65a3      	str	r3, [r4, #88]	; 0x58
 8000f6c:	e00d      	b.n	8000f8a <HAL_ADC_Init+0x1aa>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000f70:	f043 0310 	orr.w	r3, r3, #16
 8000f74:	65a3      	str	r3, [r4, #88]	; 0x58
  __IO uint32_t wait_loop_index = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8000f76:	2001      	movs	r0, #1
 8000f78:	e007      	b.n	8000f8a <HAL_ADC_Init+0x1aa>
      /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
           
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_PRESC|ADC_CCR_CKMODE, hadc->Init.ClockPrescaler);
 8000f7a:	4d08      	ldr	r5, [pc, #32]	; (8000f9c <HAL_ADC_Init+0x1bc>)
 8000f7c:	68aa      	ldr	r2, [r5, #8]
 8000f7e:	f422 117c 	bic.w	r1, r2, #4128768	; 0x3f0000
 8000f82:	6862      	ldr	r2, [r4, #4]
 8000f84:	430a      	orrs	r2, r1
 8000f86:	60aa      	str	r2, [r5, #8]
 8000f88:	e778      	b.n	8000e7c <HAL_ADC_Init+0x9c>
    tmp_hal_status = HAL_ERROR;
  }  /*  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)  && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  ) */
  
  /* Return function status */
  return tmp_hal_status;
}
 8000f8a:	b003      	add	sp, #12
 8000f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	001e8480 	.word	0x001e8480
 8000f94:	20000000 	.word	0x20000000
 8000f98:	fff0c007 	.word	0xfff0c007
 8000f9c:	50040300 	.word	0x50040300

08000fa0 <HAL_ADC_PollForConversion>:
  *         available. Therefore, EOC is set for a too short period to be 
  *         reliably polled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000fa2:	6945      	ldr	r5, [r0, #20]
 8000fa4:	2d08      	cmp	r5, #8
  *         available. Therefore, EOC is set for a too short period to be 
  *         reliably polled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	460e      	mov	r6, r1
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000faa:	d00a      	beq.n	8000fc2 <HAL_ADC_PollForConversion+0x22>
       
    /* Check whether dual regular conversions are disabled or unavailable. */
    if (ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET)  
    {
      /* Check DMAEN bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != RESET)
 8000fac:	6803      	ldr	r3, [r0, #0]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	07dd      	lsls	r5, r3, #31
 8000fb2:	d505      	bpl.n	8000fc0 <HAL_ADC_PollForConversion+0x20>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fb4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000fb6:	f043 0320 	orr.w	r3, r3, #32
 8000fba:	6583      	str	r3, [r0, #88]	; 0x58
        return HAL_ERROR;
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
      }
    }
    
    /* no DMA transfer detected, polling ADC_FLAG_EOC is possible */
    tmp_Flag_EOC = ADC_FLAG_EOC;
 8000fc0:	2504      	movs	r5, #4
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000fc2:	f7ff fefb 	bl	8000dbc <HAL_GetTick>
 8000fc6:	4607      	mov	r7, r0
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4215      	tst	r5, r2
 8000fce:	d111      	bne.n	8000ff4 <HAL_ADC_PollForConversion+0x54>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000fd0:	1c70      	adds	r0, r6, #1
 8000fd2:	d0fa      	beq.n	8000fca <HAL_ADC_PollForConversion+0x2a>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000fd4:	b946      	cbnz	r6, 8000fe8 <HAL_ADC_PollForConversion+0x48>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	65a3      	str	r3, [r4, #88]	; 0x58
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        
        return HAL_TIMEOUT;
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000fe8:	f7ff fee8 	bl	8000dbc <HAL_GetTick>
 8000fec:	1bc0      	subs	r0, r0, r7
 8000fee:	4286      	cmp	r6, r0
 8000ff0:	d2ea      	bcs.n	8000fc8 <HAL_ADC_PollForConversion+0x28>
 8000ff2:	e7f0      	b.n	8000fd6 <HAL_ADC_PollForConversion+0x36>
  }
  
  /* Next, to clear the polled flag as well as to update the handle State,
     EOS is checked and the relevant configuration register is retrieved. */
  /*   1. Check whether or not EOS is set */
  if (HAL_IS_BIT_CLR(hadc->Instance->ISR, ADC_FLAG_EOS))
 8000ff4:	681a      	ldr	r2, [r3, #0]
  /*  2. Check whether or not hadc is the handle of a Slave ADC with dual
   regular conversions enabled. */
   if (ADC_INDEPENDENT_OR_NONMULTIMODEREGULAR_SLAVE(hadc)) 
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);  
 8000ff6:	68d8      	ldr	r0, [r3, #12]
    tmpADC_Master = ADC_MASTER_REGISTER(hadc);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }

  /* Clear polled flag */
  if (tmp_Flag_EOC == ADC_FLAG_EOS)
 8000ff8:	2d08      	cmp	r5, #8
  }
  
  /* Next, to clear the polled flag as well as to update the handle State,
     EOS is checked and the relevant configuration register is retrieved. */
  /*   1. Check whether or not EOS is set */
  if (HAL_IS_BIT_CLR(hadc->Instance->ISR, ADC_FLAG_EOS))
 8000ffa:	f002 0208 	and.w	r2, r2, #8
    tmpADC_Master = ADC_MASTER_REGISTER(hadc);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }

  /* Clear polled flag */
  if (tmp_Flag_EOC == ADC_FLAG_EOS)
 8000ffe:	d101      	bne.n	8001004 <HAL_ADC_PollForConversion+0x64>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 8001000:	601d      	str	r5, [r3, #0]
 8001002:	e003      	b.n	800100c <HAL_ADC_PollForConversion+0x6c>
    /* For regular groups, no new conversion will start before EOC is cleared.*/
    /* Note that 1. reading DR clears EOC.                                    */ 
    /*           2. in multimode with dual regular conversions enabled (when  */
    /*              multimode feature is available), Master AUTDLY bit is     */
    /*              checked.                                                  */
    if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001004:	0441      	lsls	r1, r0, #17
    {
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001006:	bf5c      	itt	pl
 8001008:	2104      	movpl	r1, #4
 800100a:	6019      	strpl	r1, [r3, #0]
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800100c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800100e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001012:	65a1      	str	r1, [r4, #88]	; 0x58
        2. conversions are software-triggered
        3. CONT bit is reset (that of handle ADC or Master ADC if applicable)          
     Then regular conversions are over and HAL_ADC_STATE_REG_BUSY can be reset.
        4. additionally, if no injected conversions are on-going, HAL_ADC_STATE_READY
          can be set */
  if ((tmp_eos_raised)
 8001014:	b90a      	cbnz	r2, 800101a <HAL_ADC_PollForConversion+0x7a>
       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
     }
   }
  
  /* Return function status */
  return HAL_OK;
 8001016:	2000      	movs	r0, #0
 8001018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        3. CONT bit is reset (that of handle ADC or Master ADC if applicable)          
     Then regular conversions are over and HAL_ADC_STATE_REG_BUSY can be reset.
        4. additionally, if no injected conversions are on-going, HAL_ADC_STATE_READY
          can be set */
  if ((tmp_eos_raised)
   && (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8001020:	d1f9      	bne.n	8001016 <HAL_ADC_PollForConversion+0x76>
   && (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET))
 8001022:	0483      	lsls	r3, r0, #18
 8001024:	d4f7      	bmi.n	8001016 <HAL_ADC_PollForConversion+0x76>
   {
     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001026:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800102c:	65a3      	str	r3, [r4, #88]	; 0x58
     /* If no injected conversion on-going, set HAL_ADC_STATE_READY bit */
     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800102e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001030:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8001034:	d1ef      	bne.n	8001016 <HAL_ADC_PollForConversion+0x76>
     { 
       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001036:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	65a3      	str	r3, [r4, #88]	; 0x58
     }
   }
  
  /* Return function status */
  return HAL_OK;
}
 800103e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001040 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001040:	6803      	ldr	r3, [r0, #0]
 8001042:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001044:	4770      	bx	lr
	...

08001048 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800104e:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8001052:	2b01      	cmp	r3, #1
 8001054:	f000 815a 	beq.w	800130c <HAL_ADC_ConfigChannel+0x2c4>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001058:	6803      	ldr	r3, [r0, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800105c:	2401      	movs	r4, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800105e:	0756      	lsls	r6, r2, #29
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001060:	f880 4054 	strb.w	r4, [r0, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001064:	f100 8149 	bmi.w	80012fa <HAL_ADC_ConfigChannel+0x2b2>
  {
    
      /* Regular sequence configuration */
      /* Clear the old SQx bits then set the new ones for the selected rank */
      /* For Rank 1 to 4 */
      if (sConfig->Rank < 5)
 8001068:	684a      	ldr	r2, [r1, #4]
 800106a:	680c      	ldr	r4, [r1, #0]
 800106c:	2a04      	cmp	r2, #4
 800106e:	f44f 65f8 	mov.w	r5, #1984	; 0x7c0
 8001072:	d815      	bhi.n	80010a0 <HAL_ADC_ConfigChannel+0x58>
      {      
        MODIFY_REG(hadc->Instance->SQR1, 
 8001074:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8001076:	fa95 f6a5 	rbit	r6, r5
 800107a:	fab6 f686 	clz	r6, r6
 800107e:	fa95 f5a5 	rbit	r5, r5
 8001082:	f04f 0e1f 	mov.w	lr, #31
 8001086:	4356      	muls	r6, r2
 8001088:	fab5 f585 	clz	r5, r5
 800108c:	fa0e f606 	lsl.w	r6, lr, r6
 8001090:	436a      	muls	r2, r5
 8001092:	ea27 0606 	bic.w	r6, r7, r6
 8001096:	fa04 f202 	lsl.w	r2, r4, r2
 800109a:	4332      	orrs	r2, r6
 800109c:	631a      	str	r2, [r3, #48]	; 0x30
 800109e:	e048      	b.n	8001132 <HAL_ADC_ConfigChannel+0xea>
                  ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank), 
                  ADC_SQR1_RK(sConfig->Channel, sConfig->Rank));
      }
      /* For Rank 5 to 9 */
      else if (sConfig->Rank < 10)
 80010a0:	2a09      	cmp	r2, #9
 80010a2:	d816      	bhi.n	80010d2 <HAL_ADC_ConfigChannel+0x8a>
      {
        MODIFY_REG(hadc->Instance->SQR2, 
 80010a4:	f8d3 e034 	ldr.w	lr, [r3, #52]	; 0x34
 80010a8:	fa95 f6a5 	rbit	r6, r5
 80010ac:	fab6 f686 	clz	r6, r6
 80010b0:	1f57      	subs	r7, r2, #5
 80010b2:	fa95 f5a5 	rbit	r5, r5
 80010b6:	fab5 f285 	clz	r2, r5
 80010ba:	437e      	muls	r6, r7
 80010bc:	251f      	movs	r5, #31
 80010be:	fa05 f606 	lsl.w	r6, r5, r6
 80010c2:	437a      	muls	r2, r7
 80010c4:	ea2e 0606 	bic.w	r6, lr, r6
 80010c8:	fa04 f202 	lsl.w	r2, r4, r2
 80010cc:	4332      	orrs	r2, r6
 80010ce:	635a      	str	r2, [r3, #52]	; 0x34
 80010d0:	e02f      	b.n	8001132 <HAL_ADC_ConfigChannel+0xea>
                  ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank), 
                  ADC_SQR2_RK(sConfig->Channel, sConfig->Rank));
      }
      /* For Rank 10 to 14 */
      else if (sConfig->Rank < 15)
 80010d2:	2a0e      	cmp	r2, #14
 80010d4:	d817      	bhi.n	8001106 <HAL_ADC_ConfigChannel+0xbe>
      {
        MODIFY_REG(hadc->Instance->SQR3, 
 80010d6:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
 80010da:	fa95 f7a5 	rbit	r7, r5
 80010de:	fab7 f787 	clz	r7, r7
 80010e2:	f1a2 060a 	sub.w	r6, r2, #10
 80010e6:	fa95 f5a5 	rbit	r5, r5
 80010ea:	fab5 f285 	clz	r2, r5
 80010ee:	4377      	muls	r7, r6
 80010f0:	251f      	movs	r5, #31
 80010f2:	fa05 f707 	lsl.w	r7, r5, r7
 80010f6:	4372      	muls	r2, r6
 80010f8:	ea2e 0707 	bic.w	r7, lr, r7
 80010fc:	fa04 f202 	lsl.w	r2, r4, r2
 8001100:	433a      	orrs	r2, r7
 8001102:	639a      	str	r2, [r3, #56]	; 0x38
 8001104:	e015      	b.n	8001132 <HAL_ADC_ConfigChannel+0xea>
                  ADC_SQR3_RK(sConfig->Channel, sConfig->Rank));
      }
      /* For Rank 15 to 16 */
      else
      {   
        MODIFY_REG(hadc->Instance->SQR4, 
 8001106:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8001108:	fa95 f6a5 	rbit	r6, r5
 800110c:	fab6 f686 	clz	r6, r6
 8001110:	3a0f      	subs	r2, #15
 8001112:	fa95 f5a5 	rbit	r5, r5
 8001116:	f04f 0e1f 	mov.w	lr, #31
 800111a:	4356      	muls	r6, r2
 800111c:	fab5 f585 	clz	r5, r5
 8001120:	fa0e f606 	lsl.w	r6, lr, r6
 8001124:	436a      	muls	r2, r5
 8001126:	ea27 0606 	bic.w	r6, r7, r6
 800112a:	fa04 f202 	lsl.w	r2, r4, r2
 800112e:	4332      	orrs	r2, r6
 8001130:	63da      	str	r2, [r3, #60]	; 0x3c
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	f012 0f0c 	tst.w	r2, #12
 8001138:	f040 80c1 	bne.w	80012be <HAL_ADC_ConfigChannel+0x276>
      {
       
        /* Channel sampling time configuration */
        /* Clear the old sample time then set the new one for the selected channel */
        /* For channels 10 to 18 */
        if (sConfig->Channel >= ADC_CHANNEL_10)
 800113c:	2c09      	cmp	r4, #9
 800113e:	f04f 0238 	mov.w	r2, #56	; 0x38
 8001142:	688f      	ldr	r7, [r1, #8]
 8001144:	d919      	bls.n	800117a <HAL_ADC_ConfigChannel+0x132>
        {
          ADC_SMPR2_SETTING(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001146:	f8d3 c018 	ldr.w	ip, [r3, #24]
 800114a:	fa92 fea2 	rbit	lr, r2
 800114e:	fabe fe8e 	clz	lr, lr
 8001152:	f1a4 060a 	sub.w	r6, r4, #10
 8001156:	fa92 f2a2 	rbit	r2, r2
 800115a:	fab2 f582 	clz	r5, r2
 800115e:	fb06 f20e 	mul.w	r2, r6, lr
 8001162:	f04f 0e07 	mov.w	lr, #7
 8001166:	fa0e f202 	lsl.w	r2, lr, r2
 800116a:	436e      	muls	r6, r5
 800116c:	ea2c 0202 	bic.w	r2, ip, r2
 8001170:	fa07 f506 	lsl.w	r5, r7, r6
 8001174:	4315      	orrs	r5, r2
 8001176:	619d      	str	r5, [r3, #24]
 8001178:	e014      	b.n	80011a4 <HAL_ADC_ConfigChannel+0x15c>
        }
        else /* For channels 0 to 9 */
        {
          ADC_SMPR1_SETTING(hadc, sConfig->SamplingTime, sConfig->Channel);
 800117a:	695d      	ldr	r5, [r3, #20]
 800117c:	fa92 f6a2 	rbit	r6, r2
 8001180:	fab6 f686 	clz	r6, r6
 8001184:	fa92 f2a2 	rbit	r2, r2
 8001188:	f04f 0e07 	mov.w	lr, #7
 800118c:	fab2 f282 	clz	r2, r2
 8001190:	4366      	muls	r6, r4
 8001192:	fa0e f606 	lsl.w	r6, lr, r6
 8001196:	4362      	muls	r2, r4
 8001198:	ea25 0606 	bic.w	r6, r5, r6
 800119c:	fa07 f502 	lsl.w	r5, r7, r2
 80011a0:	4335      	orrs	r5, r6
 80011a2:	615d      	str	r5, [r3, #20]
  
       /* Configure the offset: offset enable/disable, channel, offset value */
  
       /* Shift the offset with respect to the selected ADC resolution. */
       /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
       tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80011a4:	68da      	ldr	r2, [r3, #12]
      
       switch (sConfig->OffsetNumber)
 80011a6:	690d      	ldr	r5, [r1, #16]
  
       /* Configure the offset: offset enable/disable, channel, offset value */
  
       /* Shift the offset with respect to the selected ADC resolution. */
       /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
       tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80011a8:	694e      	ldr	r6, [r1, #20]
 80011aa:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80011ae:	0052      	lsls	r2, r2, #1
      
       switch (sConfig->OffsetNumber)
 80011b0:	3d01      	subs	r5, #1
  
       /* Configure the offset: offset enable/disable, channel, offset value */
  
       /* Shift the offset with respect to the selected ADC resolution. */
       /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
       tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80011b2:	4096      	lsls	r6, r2
 80011b4:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
      
       switch (sConfig->OffsetNumber)
 80011b8:	2d03      	cmp	r5, #3
 80011ba:	d83e      	bhi.n	800123a <HAL_ADC_ConfigChannel+0x1f2>
 80011bc:	e8df f005 	tbb	[pc, r5]
 80011c0:	2f201102 	.word	0x2f201102
        /* Configure offset register i when applicable:                         */
        /* - Enable offset                                                      */
        /* - Set channel number                                                 */
        /* - Set offset value                                                   */
       case ADC_OFFSET_1:
          MODIFY_REG(hadc->Instance->OFR1,
 80011c4:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 80011c6:	fa92 f5a2 	rbit	r5, r2
 80011ca:	4a97      	ldr	r2, [pc, #604]	; (8001428 <HAL_ADC_ConfigChannel+0x3e0>)
 80011cc:	403a      	ands	r2, r7
 80011ce:	fab5 f585 	clz	r5, r5
 80011d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011d6:	4332      	orrs	r2, r6
 80011d8:	fa04 f505 	lsl.w	r5, r4, r5
 80011dc:	432a      	orrs	r2, r5
 80011de:	661a      	str	r2, [r3, #96]	; 0x60
                  ADC_OFR_FIELDS,
                  ADC_OFR1_OFFSET1_EN | ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);                                   
         break;
 80011e0:	e06d      	b.n	80012be <HAL_ADC_ConfigChannel+0x276>
      
       case ADC_OFFSET_2:
         MODIFY_REG(hadc->Instance->OFR2,
 80011e2:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 80011e4:	fa92 f5a2 	rbit	r5, r2
 80011e8:	4a8f      	ldr	r2, [pc, #572]	; (8001428 <HAL_ADC_ConfigChannel+0x3e0>)
 80011ea:	403a      	ands	r2, r7
 80011ec:	fab5 f585 	clz	r5, r5
 80011f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011f4:	4332      	orrs	r2, r6
 80011f6:	fa04 f505 	lsl.w	r5, r4, r5
 80011fa:	432a      	orrs	r2, r5
 80011fc:	665a      	str	r2, [r3, #100]	; 0x64
                  ADC_OFR_FIELDS, 
                  ADC_OFR2_OFFSET2_EN | ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);                                  
         break;
 80011fe:	e05e      	b.n	80012be <HAL_ADC_ConfigChannel+0x276>
          
       case ADC_OFFSET_3:
         MODIFY_REG(hadc->Instance->OFR3,
 8001200:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8001202:	fa92 f2a2 	rbit	r2, r2
 8001206:	4d88      	ldr	r5, [pc, #544]	; (8001428 <HAL_ADC_ConfigChannel+0x3e0>)
 8001208:	403d      	ands	r5, r7
 800120a:	fab2 f282 	clz	r2, r2
 800120e:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001212:	432e      	orrs	r6, r5
 8001214:	fa04 f202 	lsl.w	r2, r4, r2
 8001218:	4332      	orrs	r2, r6
 800121a:	669a      	str	r2, [r3, #104]	; 0x68
                  ADC_OFR_FIELDS,
                  ADC_OFR3_OFFSET3_EN | ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);                                  
         break;
 800121c:	e04f      	b.n	80012be <HAL_ADC_ConfigChannel+0x276>
      
       case ADC_OFFSET_4:
         MODIFY_REG(hadc->Instance->OFR4,
 800121e:	6edf      	ldr	r7, [r3, #108]	; 0x6c
 8001220:	fa92 f2a2 	rbit	r2, r2
 8001224:	4d80      	ldr	r5, [pc, #512]	; (8001428 <HAL_ADC_ConfigChannel+0x3e0>)
 8001226:	403d      	ands	r5, r7
 8001228:	fab2 f282 	clz	r2, r2
 800122c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001230:	432e      	orrs	r6, r5
 8001232:	fa04 f202 	lsl.w	r2, r4, r2
 8001236:	4332      	orrs	r2, r6
 8001238:	e040      	b.n	80012bc <HAL_ADC_ConfigChannel+0x274>
       /* Case ADC_OFFSET_NONE */
       default :
       /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
         if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800123a:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800123c:	fa92 f2a2 	rbit	r2, r2
 8001240:	fab2 f282 	clz	r2, r2
 8001244:	fa04 f202 	lsl.w	r2, r4, r2
 8001248:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800124c:	4295      	cmp	r5, r2
         {
           CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800124e:	bf02      	ittt	eq
 8001250:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8001252:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001256:	661a      	streq	r2, [r3, #96]	; 0x60
         }
         if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001258:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800125a:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 800125e:	fa92 f2a2 	rbit	r2, r2
 8001262:	fab2 f282 	clz	r2, r2
 8001266:	fa04 f202 	lsl.w	r2, r4, r2
 800126a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800126e:	4295      	cmp	r5, r2
         {
           CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN);
 8001270:	bf02      	ittt	eq
 8001272:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 8001274:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001278:	665a      	streq	r2, [r3, #100]	; 0x64
         }
         if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800127a:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800127c:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8001280:	fa92 f2a2 	rbit	r2, r2
 8001284:	fab2 f282 	clz	r2, r2
 8001288:	fa04 f202 	lsl.w	r2, r4, r2
 800128c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8001290:	4295      	cmp	r5, r2
         {
           CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001292:	bf02      	ittt	eq
 8001294:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 8001296:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800129a:	669a      	streq	r2, [r3, #104]	; 0x68
         }
         if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800129c:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800129e:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 80012a2:	fa92 f2a2 	rbit	r2, r2
 80012a6:	fab2 f282 	clz	r2, r2
 80012aa:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80012ae:	fa04 f202 	lsl.w	r2, r4, r2
 80012b2:	4295      	cmp	r5, r2
 80012b4:	d103      	bne.n	80012be <HAL_ADC_ConfigChannel+0x276>
         {
           CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80012b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80012b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012bc:	66da      	str	r2, [r3, #108]	; 0x6c
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	f002 0203 	and.w	r2, r2, #3
 80012c4:	2a01      	cmp	r2, #1
 80012c6:	d102      	bne.n	80012ce <HAL_ADC_ConfigChannel+0x286>
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	07d5      	lsls	r5, r2, #31
 80012cc:	d413      	bmi.n	80012f6 <HAL_ADC_ConfigChannel+0x2ae>
    {
      /* Configuration of differential mode */
      if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80012ce:	68ca      	ldr	r2, [r1, #12]
 80012d0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80012d4:	f04f 0201 	mov.w	r2, #1
 80012d8:	d01a      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x2c8>
      {
        /* Disable differential mode (default mode: single-ended) */
        CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80012da:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80012de:	40a2      	lsls	r2, r4
 80012e0:	ea21 0202 	bic.w	r2, r1, r2
 80012e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
    
  
      /* If the requested internal measurement path has already been enabled,   */
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012e8:	2c11      	cmp	r4, #17
 80012ea:	d14b      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x33c>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80012ec:	4a4f      	ldr	r2, [pc, #316]	; (800142c <HAL_ADC_ConfigChannel+0x3e4>)
 80012ee:	6892      	ldr	r2, [r2, #8]
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
    
  
      /* If the requested internal measurement path has already been enabled,   */
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012f0:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80012f4:	d054      	beq.n	80013a0 <HAL_ADC_ConfigChannel+0x358>
  * @param  sConfig: Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f6:	2400      	movs	r4, #0
 80012f8:	e003      	b.n	8001302 <HAL_ADC_ConfigChannel+0x2ba>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012fa:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80012fc:	f043 0320 	orr.w	r3, r3, #32
 8001300:	6583      	str	r3, [r0, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001302:	2300      	movs	r3, #0
 8001304:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  
  /* Return function status */
  return tmp_hal_status;
 8001308:	4620      	mov	r0, r4
 800130a:	e08a      	b.n	8001422 <HAL_ADC_ConfigChannel+0x3da>
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800130c:	2002      	movs	r0, #2
 800130e:	e088      	b.n	8001422 <HAL_ADC_ConfigChannel+0x3da>
        CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
      }
      else
      {
        /* Enable differential mode */
        SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001310:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8001314:	40a2      	lsls	r2, r4
 8001316:	432a      	orrs	r2, r5
        
        /* Sampling time configuration of channel ADC_IN+1 (negative input)     */
        /* Clear the old sample time then set the new one for the selected      */
        /* channel.                                                             */
        /* Starting from channel 9, SMPR2 register must be configured           */
        if (sConfig->Channel >= ADC_CHANNEL_9)
 8001318:	2c08      	cmp	r4, #8
        CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
      }
      else
      {
        /* Enable differential mode */
        SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800131a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800131e:	688d      	ldr	r5, [r1, #8]
 8001320:	f04f 0238 	mov.w	r2, #56	; 0x38
        
        /* Sampling time configuration of channel ADC_IN+1 (negative input)     */
        /* Clear the old sample time then set the new one for the selected      */
        /* channel.                                                             */
        /* Starting from channel 9, SMPR2 register must be configured           */
        if (sConfig->Channel >= ADC_CHANNEL_9)
 8001324:	d917      	bls.n	8001356 <HAL_ADC_ConfigChannel+0x30e>
        {
          ADC_SMPR2_SETTING(hadc, sConfig->SamplingTime, sConfig->Channel+1);
 8001326:	699f      	ldr	r7, [r3, #24]
 8001328:	fa92 f6a2 	rbit	r6, r2
 800132c:	fab6 f686 	clz	r6, r6
 8001330:	f1a4 0109 	sub.w	r1, r4, #9
 8001334:	fa92 f2a2 	rbit	r2, r2
 8001338:	f04f 0e07 	mov.w	lr, #7
 800133c:	fab2 f282 	clz	r2, r2
 8001340:	434e      	muls	r6, r1
 8001342:	fa0e f606 	lsl.w	r6, lr, r6
 8001346:	4351      	muls	r1, r2
 8001348:	ea27 0606 	bic.w	r6, r7, r6
 800134c:	fa05 f201 	lsl.w	r2, r5, r1
 8001350:	4332      	orrs	r2, r6
 8001352:	619a      	str	r2, [r3, #24]
 8001354:	e7c8      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x2a0>
        }
        else /* For channels 0 to 8, SMPR1 must be configured */
        {
          ADC_SMPR1_SETTING(hadc, sConfig->SamplingTime, sConfig->Channel+1);
 8001356:	695f      	ldr	r7, [r3, #20]
 8001358:	fa92 f6a2 	rbit	r6, r2
 800135c:	fab6 f686 	clz	r6, r6
 8001360:	1c61      	adds	r1, r4, #1
 8001362:	fa92 f2a2 	rbit	r2, r2
 8001366:	f04f 0e07 	mov.w	lr, #7
 800136a:	fab2 f282 	clz	r2, r2
 800136e:	434e      	muls	r6, r1
 8001370:	fa0e f606 	lsl.w	r6, lr, r6
 8001374:	434a      	muls	r2, r1
 8001376:	ea27 0606 	bic.w	r6, r7, r6
 800137a:	fa05 f202 	lsl.w	r2, r5, r2
 800137e:	4332      	orrs	r2, r6
 8001380:	615a      	str	r2, [r3, #20]
 8001382:	e7b1      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x2a0>
    
  
      /* If the requested internal measurement path has already been enabled,   */
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001384:	2c12      	cmp	r4, #18
 8001386:	d104      	bne.n	8001392 <HAL_ADC_ConfigChannel+0x34a>
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001388:	4a28      	ldr	r2, [pc, #160]	; (800142c <HAL_ADC_ConfigChannel+0x3e4>)
 800138a:	6892      	ldr	r2, [r2, #8]
  
      /* If the requested internal measurement path has already been enabled,   */
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800138c:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001390:	e7b0      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x2ac>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001392:	2c00      	cmp	r4, #0
 8001394:	d1af      	bne.n	80012f6 <HAL_ADC_ConfigChannel+0x2ae>
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001396:	4a25      	ldr	r2, [pc, #148]	; (800142c <HAL_ADC_ConfigChannel+0x3e4>)
 8001398:	6892      	ldr	r2, [r2, #8]
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800139a:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 800139e:	e7a9      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x2ac>
      {
        /* Configuration of common ADC parameters (continuation)                */
  
        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	f002 0203 	and.w	r2, r2, #3
 80013a6:	2a01      	cmp	r2, #1
 80013a8:	d108      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x374>
 80013aa:	6819      	ldr	r1, [r3, #0]
 80013ac:	07c9      	lsls	r1, r1, #31
 80013ae:	d505      	bpl.n	80013bc <HAL_ADC_ConfigChannel+0x374>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else  
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013b0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80013b2:	f043 0320 	orr.w	r3, r3, #32
 80013b6:	6583      	str	r3, [r0, #88]	; 0x58
          
          tmp_hal_status = HAL_ERROR;
 80013b8:	4614      	mov	r4, r2
 80013ba:	e7a2      	b.n	8001302 <HAL_ADC_ConfigChannel+0x2ba>
        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
        {
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013bc:	2c11      	cmp	r4, #17
 80013be:	d116      	bne.n	80013ee <HAL_ADC_ConfigChannel+0x3a6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 80013c0:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <HAL_ADC_ConfigChannel+0x3e8>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d197      	bne.n	80012f6 <HAL_ADC_ConfigChannel+0x2ae>
            {
              SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80013c6:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
 80013ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013ce:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially          */
              /*       CPU processing cycles.                                 */
              wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <HAL_ADC_ConfigChannel+0x3ec>)
 80013d4:	4a18      	ldr	r2, [pc, #96]	; (8001438 <HAL_ADC_ConfigChannel+0x3f0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80013dc:	2378      	movs	r3, #120	; 0x78
 80013de:	4353      	muls	r3, r2
              while(wait_loop_index != 0)
              {
                wait_loop_index--;
 80013e0:	9301      	str	r3, [sp, #4]
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially          */
              /*       CPU processing cycles.                                 */
              wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / (1000000 * 2)));
              while(wait_loop_index != 0)
 80013e2:	9b01      	ldr	r3, [sp, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d086      	beq.n	80012f6 <HAL_ADC_ConfigChannel+0x2ae>
              {
                wait_loop_index--;
 80013e8:	9b01      	ldr	r3, [sp, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	e7f8      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x398>
              }
            }
          }
          else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80013ee:	2c12      	cmp	r4, #18
 80013f0:	d109      	bne.n	8001406 <HAL_ADC_ConfigChannel+0x3be>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80013f2:	4a0f      	ldr	r2, [pc, #60]	; (8001430 <HAL_ADC_ConfigChannel+0x3e8>)
 80013f4:	4293      	cmp	r3, r2
            {
              SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80013f6:	bf02      	ittt	eq
 80013f8:	f8d2 3308 	ldreq.w	r3, [r2, #776]	; 0x308
 80013fc:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 8001400:	f8c2 3308 	streq.w	r3, [r2, #776]	; 0x308
 8001404:	e777      	b.n	80012f6 <HAL_ADC_ConfigChannel+0x2ae>
            }
          }
          else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001406:	2c00      	cmp	r4, #0
 8001408:	f47f af75 	bne.w	80012f6 <HAL_ADC_ConfigChannel+0x2ae>
          { 
            if (ADC_VREFINT_INSTANCE(hadc))
 800140c:	4a08      	ldr	r2, [pc, #32]	; (8001430 <HAL_ADC_ConfigChannel+0x3e8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	f47f af71 	bne.w	80012f6 <HAL_ADC_ConfigChannel+0x2ae>
            {
              SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001414:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
 8001418:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800141c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
 8001420:	e76f      	b.n	8001302 <HAL_ADC_ConfigChannel+0x2ba>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 8001422:	b003      	add	sp, #12
 8001424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001426:	bf00      	nop
 8001428:	03fff000 	.word	0x03fff000
 800142c:	50040300 	.word	0x50040300
 8001430:	50040000 	.word	0x50040000
 8001434:	20000000 	.word	0x20000000
 8001438:	001e8480 	.word	0x001e8480

0800143c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800143c:	b538      	push	{r3, r4, r5, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800143e:	6803      	ldr	r3, [r0, #0]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	f002 0203 	and.w	r2, r2, #3
 8001446:	2a01      	cmp	r2, #1
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001448:	4604      	mov	r4, r0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800144a:	d104      	bne.n	8001456 <ADC_Enable+0x1a>
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	07d1      	lsls	r1, r2, #31
 8001450:	d501      	bpl.n	8001456 <ADC_Enable+0x1a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001452:	2000      	movs	r0, #0
 8001454:	bd38      	pop	{r3, r4, r5, pc}
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001456:	6899      	ldr	r1, [r3, #8]
 8001458:	4a10      	ldr	r2, [pc, #64]	; (800149c <ADC_Enable+0x60>)
 800145a:	400a      	ands	r2, r1
 800145c:	b99a      	cbnz	r2, 8001486 <ADC_Enable+0x4a>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    ADC_ENABLE(hadc);
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	f042 0201 	orr.w	r2, r2, #1
 8001464:	609a      	str	r2, [r3, #8]
    
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001466:	f7ff fca9 	bl	8000dbc <HAL_GetTick>
 800146a:	4605      	mov	r5, r0
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800146c:	6823      	ldr	r3, [r4, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	07d2      	lsls	r2, r2, #31
 8001472:	d4ee      	bmi.n	8001452 <ADC_Enable+0x16>
          has been cleared (after a calibration), ADEN bit is reset by the 
          calibration logic.
			    The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      ADC_ENABLE(hadc);
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	f042 0201 	orr.w	r2, r2, #1
 800147a:	609a      	str	r2, [r3, #8]

      if((HAL_GetTick()-tickstart) > ADC_ENABLE_TIMEOUT)
 800147c:	f7ff fc9e 	bl	8000dbc <HAL_GetTick>
 8001480:	1b40      	subs	r0, r0, r5
 8001482:	2802      	cmp	r0, #2
 8001484:	d9f2      	bls.n	800146c <ADC_Enable+0x30>
      {  
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001486:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001488:	f043 0310 	orr.w	r3, r3, #16
 800148c:	65a3      	str	r3, [r4, #88]	; 0x58
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800148e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	65e3      	str	r3, [r4, #92]	; 0x5c
      
        return HAL_ERROR;
 8001496:	2001      	movs	r0, #1
 8001498:	bd38      	pop	{r3, r4, r5, pc}
 800149a:	bf00      	nop
 800149c:	8000003f 	.word	0x8000003f

080014a0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014a0:	b538      	push	{r3, r4, r5, lr}
  ADC_TypeDef       *tmpADC_Master;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014a2:	6803      	ldr	r3, [r0, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f013 0504 	ands.w	r5, r3, #4
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014aa:	4604      	mov	r4, r0
  ADC_TypeDef       *tmpADC_Master;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014ac:	d134      	bne.n	8001518 <HAL_ADC_Start+0x78>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014ae:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d030      	beq.n	8001518 <HAL_ADC_Start+0x78>
 80014b6:	2301      	movs	r3, #1
 80014b8:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014bc:	f7ff ffbe 	bl	800143c <ADC_Enable>
  
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014c0:	bb38      	cbnz	r0, 8001512 <HAL_ADC_Start+0x72>
    {
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
      }
    
      /* Clear regular group conversion flag and overrun flag                   */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014c4:	6822      	ldr	r2, [r4, #0]
  
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
    {
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014c6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR|HAL_ADC_ERROR_DMA));         
 80014ca:	bf1c      	itt	ne
 80014cc:	6de3      	ldrne	r3, [r4, #92]	; 0x5c
 80014ce:	f023 0306 	bicne.w	r3, r3, #6
      }
      else
      {  
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc); 
 80014d2:	65e3      	str	r3, [r4, #92]	; 0x5c
      }
      /* Clear HAL_ADC_STATE_READY and regular conversion results bits, set HAL_ADC_STATE_REG_BUSY bit */
      ADC_STATE_CLR_SET(hadc->State, (HAL_ADC_STATE_READY|HAL_ADC_STATE_REG_EOC|HAL_ADC_STATE_REG_OVR|HAL_ADC_STATE_REG_EOSMP), HAL_ADC_STATE_REG_BUSY);
 80014d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014da:	f023 0301 	bic.w	r3, r3, #1
 80014de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e2:	65a3      	str	r3, [r4, #88]	; 0x58
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - by default if ADC is Master or Independent or if multimode feature is not available
        - if multimode setting is set to independent mode (no dual regular or injected conversions are configured) */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014ea:	65a3      	str	r3, [r4, #88]	; 0x58
      }
    
      /* Clear regular group conversion flag and overrun flag                   */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014ec:	231c      	movs	r3, #28
 80014ee:	6013      	str	r3, [r2, #0]
      if (ADC_INDEPENDENT_OR_NONMULTIMODEREGULAR_SLAVE(hadc))
      {
        /* Multimode feature is not available or ADC Instance is Independent or Master, 
           or is not Slave ADC with dual regular conversions enabled. 
           Then, set HAL_ADC_STATE_INJ_BUSY bit and reset HAL_ADC_STATE_INJ_EOC bit if JAUTO is set. */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80014f0:	68d3      	ldr	r3, [r2, #12]
 80014f2:	019b      	lsls	r3, r3, #6
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014f4:	bf41      	itttt	mi
 80014f6:	6da3      	ldrmi	r3, [r4, #88]	; 0x58
 80014f8:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 80014fc:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 8001500:	65a3      	strmi	r3, [r4, #88]	; 0x58
        }
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
        /* Start ADC */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001502:	6893      	ldr	r3, [r2, #8]
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
        }
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001504:	2000      	movs	r0, #0
        /* Start ADC */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001506:	f043 0304 	orr.w	r3, r3, #4
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
        }
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800150a:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
        /* Start ADC */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800150e:	6093      	str	r3, [r2, #8]
 8001510:	bd38      	pop	{r3, r4, r5, pc}
      } /* if (ADC_INDEPENDENT_OR_NONMULTIMODEREGULAR_SLAVE(hadc)) */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001512:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 8001516:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001518:	2002      	movs	r0, #2
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 800151a:	bd38      	pop	{r3, r4, r5, pc}

0800151c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800151c:	4a07      	ldr	r2, [pc, #28]	; (800153c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800151e:	68d3      	ldr	r3, [r2, #12]
 8001520:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001524:	041b      	lsls	r3, r3, #16
 8001526:	0c1b      	lsrs	r3, r3, #16
 8001528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800152c:	0200      	lsls	r0, r0, #8
 800152e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001532:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001536:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001538:	60d3      	str	r3, [r2, #12]
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_NVIC_SetPriority+0x60>)
 8001542:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001544:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001548:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154a:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154e:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001550:	2c04      	cmp	r4, #4
 8001552:	bf28      	it	cs
 8001554:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001556:	2d06      	cmp	r5, #6

  return (
 8001558:	f04f 0501 	mov.w	r5, #1
 800155c:	fa05 f404 	lsl.w	r4, r5, r4
 8001560:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001564:	bf8c      	ite	hi
 8001566:	3b03      	subhi	r3, #3
 8001568:	2300      	movls	r3, #0

  return (
 800156a:	400c      	ands	r4, r1
 800156c:	409c      	lsls	r4, r3
 800156e:	fa05 f303 	lsl.w	r3, r5, r3
 8001572:	3b01      	subs	r3, #1
 8001574:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001576:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001578:	ea42 0204 	orr.w	r2, r2, r4
 800157c:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001580:	bfaf      	iteee	ge
 8001582:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001586:	f000 000f 	andlt.w	r0, r0, #15
 800158a:	4b06      	ldrlt	r3, [pc, #24]	; (80015a4 <HAL_NVIC_SetPriority+0x64>)
 800158c:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	bfa5      	ittet	ge
 8001590:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001594:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800159c:	bd30      	pop	{r4, r5, pc}
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00
 80015a4:	e000ed14 	.word	0xe000ed14

080015a8 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80015a8:	0942      	lsrs	r2, r0, #5
 80015aa:	2301      	movs	r3, #1
 80015ac:	f000 001f 	and.w	r0, r0, #31
 80015b0:	fa03 f000 	lsl.w	r0, r3, r0
 80015b4:	4b01      	ldr	r3, [pc, #4]	; (80015bc <HAL_NVIC_EnableIRQ+0x14>)
 80015b6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80015ba:	4770      	bx	lr
 80015bc:	e000e100 	.word	0xe000e100

080015c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c0:	3801      	subs	r0, #1
 80015c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80015c6:	d20a      	bcs.n	80015de <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015cc:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ce:	21f0      	movs	r1, #240	; 0xf0
 80015d0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80015de:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000e010 	.word	0xe000e010
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80015ee:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80015f0:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80015f2:	bf0c      	ite	eq
 80015f4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80015f8:	f022 0204 	bicne.w	r2, r2, #4
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	4770      	bx	lr
 8001600:	e000e010 	.word	0xe000e010

08001604 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001604:	4770      	bx	lr

08001606 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001606:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001608:	f7ff fffc 	bl	8001604 <HAL_SYSTICK_Callback>
 800160c:	bd08      	pop	{r3, pc}
	...

08001610 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001614:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001616:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001618:	f8df c168 	ldr.w	ip, [pc, #360]	; 8001784 <HAL_GPIO_Init+0x174>
 800161c:	4c57      	ldr	r4, [pc, #348]	; (800177c <HAL_GPIO_Init+0x16c>)
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800161e:	9301      	str	r3, [sp, #4]
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001620:	f04f 080f 	mov.w	r8, #15
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 8001624:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001626:	9a01      	ldr	r2, [sp, #4]
 8001628:	40da      	lsrs	r2, r3
 800162a:	f000 80a4 	beq.w	8001776 <HAL_GPIO_Init+0x166>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800162e:	2201      	movs	r2, #1
 8001630:	fa02 f903 	lsl.w	r9, r2, r3

    if(iocurrent)
 8001634:	9a01      	ldr	r2, [sp, #4]
 8001636:	ea12 0509 	ands.w	r5, r2, r9
 800163a:	f000 809a 	beq.w	8001772 <HAL_GPIO_Init+0x162>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800163e:	684a      	ldr	r2, [r1, #4]
 8001640:	f022 0a10 	bic.w	sl, r2, #16
 8001644:	f1ba 0f02 	cmp.w	sl, #2
 8001648:	d113      	bne.n	8001672 <HAL_GPIO_Init+0x62>
 800164a:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800164e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001652:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001656:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800165a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800165e:	fa08 f60b 	lsl.w	r6, r8, fp
 8001662:	ea27 0706 	bic.w	r7, r7, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001666:	690e      	ldr	r6, [r1, #16]
 8001668:	fa06 f60b 	lsl.w	r6, r6, fp
 800166c:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 800166e:	f8ce 6020 	str.w	r6, [lr, #32]
 8001672:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001676:	2603      	movs	r6, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001678:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800167a:	fa06 f60e 	lsl.w	r6, r6, lr
 800167e:	43f6      	mvns	r6, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001680:	f002 0b03 	and.w	fp, r2, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001684:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001686:	fa0b fb0e 	lsl.w	fp, fp, lr
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800168a:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800168e:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001692:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8001696:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001698:	d811      	bhi.n	80016be <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800169a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 800169c:	ea06 0a07 	and.w	sl, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80016a0:	68cf      	ldr	r7, [r1, #12]
 80016a2:	fa07 f70e 	lsl.w	r7, r7, lr
 80016a6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80016aa:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ac:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ae:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80016b2:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80016b6:	409f      	lsls	r7, r3
 80016b8:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80016bc:	6047      	str	r7, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016be:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80016c0:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80016c2:	688f      	ldr	r7, [r1, #8]
 80016c4:	fa07 f70e 	lsl.w	r7, r7, lr
 80016c8:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80016ca:	60c6      	str	r6, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016cc:	00d6      	lsls	r6, r2, #3
 80016ce:	d550      	bpl.n	8001772 <HAL_GPIO_Init+0x162>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d0:	f8dc 6060 	ldr.w	r6, [ip, #96]	; 0x60
 80016d4:	f046 0601 	orr.w	r6, r6, #1
 80016d8:	f8cc 6060 	str.w	r6, [ip, #96]	; 0x60
 80016dc:	f8dc 6060 	ldr.w	r6, [ip, #96]	; 0x60
 80016e0:	f006 0601 	and.w	r6, r6, #1
 80016e4:	9603      	str	r6, [sp, #12]
 80016e6:	9e03      	ldr	r6, [sp, #12]
 80016e8:	f023 0603 	bic.w	r6, r3, #3
 80016ec:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80016f0:	f506 3680 	add.w	r6, r6, #65536	; 0x10000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80016f4:	f003 0903 	and.w	r9, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 80016f8:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80016fa:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80016fe:	fa08 fe09 	lsl.w	lr, r8, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001702:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001706:	ea27 0a0e 	bic.w	sl, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800170a:	d00b      	beq.n	8001724 <HAL_GPIO_Init+0x114>
 800170c:	4f1c      	ldr	r7, [pc, #112]	; (8001780 <HAL_GPIO_Init+0x170>)
 800170e:	42b8      	cmp	r0, r7
 8001710:	d00b      	beq.n	800172a <HAL_GPIO_Init+0x11a>
 8001712:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001716:	42b8      	cmp	r0, r7
 8001718:	bf14      	ite	ne
 800171a:	f04f 0e07 	movne.w	lr, #7
 800171e:	f04f 0e02 	moveq.w	lr, #2
 8001722:	e004      	b.n	800172e <HAL_GPIO_Init+0x11e>
 8001724:	f04f 0e00 	mov.w	lr, #0
 8001728:	e001      	b.n	800172e <HAL_GPIO_Init+0x11e>
 800172a:	f04f 0e01 	mov.w	lr, #1
 800172e:	fa0e f909 	lsl.w	r9, lr, r9
 8001732:	ea49 070a 	orr.w	r7, r9, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8001736:	60b7      	str	r7, [r6, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001738:	4e10      	ldr	r6, [pc, #64]	; (800177c <HAL_GPIO_Init+0x16c>)
 800173a:	6836      	ldr	r6, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 800173c:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800173e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
        temp &= ~((uint32_t)iocurrent);
 8001742:	bf0c      	ite	eq
 8001744:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8001746:	432e      	orrne	r6, r5
        }
        EXTI->IMR1 = temp;
 8001748:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR1;
 800174a:	6866      	ldr	r6, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800174c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;

        temp = EXTI->EMR1;
        temp &= ~((uint32_t)iocurrent);
 8001750:	bf0c      	ite	eq
 8001752:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8001754:	432e      	orrne	r6, r5
        }
        EXTI->EMR1 = temp;
 8001756:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001758:	68a6      	ldr	r6, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800175a:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~((uint32_t)iocurrent);
 800175e:	bf0c      	ite	eq
 8001760:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8001762:	432e      	orrne	r6, r5
        }
        EXTI->RTSR1 = temp;
 8001764:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR1;
 8001766:	68e6      	ldr	r6, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001768:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
 800176a:	bf54      	ite	pl
 800176c:	403e      	andpl	r6, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 800176e:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR1 = temp;
 8001770:	60e6      	str	r6, [r4, #12]
      }
    }
    
    position++;
 8001772:	3301      	adds	r3, #1
 8001774:	e757      	b.n	8001626 <HAL_GPIO_Init+0x16>
  }
}
 8001776:	b005      	add	sp, #20
 8001778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800177c:	40010400 	.word	0x40010400
 8001780:	48000400 	.word	0x48000400
 8001784:	40021000 	.word	0x40021000

08001788 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001788:	b10a      	cbz	r2, 800178e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800178a:	6181      	str	r1, [r0, #24]
 800178c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800178e:	6281      	str	r1, [r0, #40]	; 0x28
 8001790:	4770      	bx	lr
	...

08001794 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001794:	4b02      	ldr	r3, [pc, #8]	; (80017a0 <HAL_PWREx_GetVoltageRange+0xc>)
 8001796:	6818      	ldr	r0, [r3, #0]
}
 8001798:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40007000 	.word	0x40007000

080017a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x60>)
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017a6:	681a      	ldr	r2, [r3, #0]
  uint32_t wait_loop_index = 0;  

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017a8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017ac:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  uint32_t wait_loop_index = 0;  

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017b0:	d11a      	bne.n	80017e8 <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017b2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80017b6:	d020      	beq.n	80017fa <HAL_PWREx_ControlVoltageScaling+0x56>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b8:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80017ba:	4913      	ldr	r1, [pc, #76]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x64>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017bc:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80017c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017c4:	601a      	str	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80017c6:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_PWREx_ControlVoltageScaling+0x68>)
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	fbb2 f1f1 	udiv	r1, r2, r1
 80017ce:	2232      	movs	r2, #50	; 0x32
 80017d0:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 80017d2:	b122      	cbz	r2, 80017de <HAL_PWREx_ControlVoltageScaling+0x3a>
 80017d4:	6959      	ldr	r1, [r3, #20]
 80017d6:	0549      	lsls	r1, r1, #21
 80017d8:	d501      	bpl.n	80017de <HAL_PWREx_ControlVoltageScaling+0x3a>
      {
        wait_loop_index--;
 80017da:	3a01      	subs	r2, #1
 80017dc:	e7f9      	b.n	80017d2 <HAL_PWREx_ControlVoltageScaling+0x2e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x60>)
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	055b      	lsls	r3, r3, #21
 80017e4:	d40b      	bmi.n	80017fe <HAL_PWREx_ControlVoltageScaling+0x5a>
 80017e6:	e008      	b.n	80017fa <HAL_PWREx_ControlVoltageScaling+0x56>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017e8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017ec:	bf1f      	itttt	ne
 80017ee:	681a      	ldrne	r2, [r3, #0]
 80017f0:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80017f4:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80017f8:	601a      	strne	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 80017fa:	2000      	movs	r0, #0
 80017fc:	4770      	bx	lr
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
      {
        return HAL_TIMEOUT;
 80017fe:	2003      	movs	r0, #3
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
}  
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40007000 	.word	0x40007000
 8001808:	000f4240 	.word	0x000f4240
 800180c:	20000000 	.word	0x20000000

08001810 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001810:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001812:	4d1e      	ldr	r5, [pc, #120]	; (800188c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001814:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001816:	00d9      	lsls	r1, r3, #3
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001818:	4604      	mov	r4, r0
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800181a:	d502      	bpl.n	8001822 <RCC_SetFlashLatencyFromMSIRange+0x12>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800181c:	f7ff ffba 	bl	8001794 <HAL_PWREx_GetVoltageRange>
 8001820:	e00e      	b.n	8001840 <RCC_SetFlashLatencyFromMSIRange+0x30>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001828:	65ab      	str	r3, [r5, #88]	; 0x58
 800182a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001834:	f7ff ffae 	bl	8001794 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001838:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800183a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800183e:	65ab      	str	r3, [r5, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001840:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001844:	d106      	bne.n	8001854 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001846:	2c80      	cmp	r4, #128	; 0x80
 8001848:	d90c      	bls.n	8001864 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800184a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800184c:	bf8c      	ite	hi
 800184e:	2302      	movhi	r3, #2
 8001850:	2301      	movls	r3, #1
 8001852:	e00c      	b.n	800186e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8001854:	2c80      	cmp	r4, #128	; 0x80
 8001856:	d807      	bhi.n	8001868 <RCC_SetFlashLatencyFromMSIRange+0x58>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001858:	d008      	beq.n	800186c <RCC_SetFlashLatencyFromMSIRange+0x5c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800185a:	f1a4 0270 	sub.w	r2, r4, #112	; 0x70
 800185e:	4253      	negs	r3, r2
 8001860:	4153      	adcs	r3, r2
 8001862:	e004      	b.n	800186e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001864:	2300      	movs	r3, #0
 8001866:	e002      	b.n	800186e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  else
  {
    if(msirange > RCC_MSIRANGE_8)
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001868:	2303      	movs	r3, #3
 800186a:	e000      	b.n	800186e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800186c:	2302      	movs	r3, #2
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001870:	680a      	ldr	r2, [r1, #0]
 8001872:	f022 0207 	bic.w	r2, r2, #7
 8001876:	431a      	orrs	r2, r3
 8001878:	600a      	str	r2, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800187a:	6808      	ldr	r0, [r1, #0]
 800187c:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8001880:	1ac0      	subs	r0, r0, r3
 8001882:	bf18      	it	ne
 8001884:	2001      	movne	r0, #1
 8001886:	b003      	add	sp, #12
 8001888:	bd30      	pop	{r4, r5, pc}
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	40022000 	.word	0x40022000

08001894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001894:	b570      	push	{r4, r5, r6, lr}
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001896:	4c4a      	ldr	r4, [pc, #296]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001898:	68a3      	ldr	r3, [r4, #8]
 800189a:	f013 0f0c 	tst.w	r3, #12
 800189e:	d009      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80018a0:	68a3      	ldr	r3, [r4, #8]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b0c      	cmp	r3, #12
 80018a8:	d126      	bne.n	80018f8 <HAL_RCC_GetSysClockFreq+0x64>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80018aa:	68e3      	ldr	r3, [r4, #12]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d121      	bne.n	80018f8 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80018b4:	6822      	ldr	r2, [r4, #0]
 80018b6:	4b42      	ldr	r3, [pc, #264]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80018b8:	0712      	lsls	r2, r2, #28
 80018ba:	d40a      	bmi.n	80018d2 <HAL_RCC_GetSysClockFreq+0x3e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 80018bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018c0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80018c4:	fa92 f2a2 	rbit	r2, r2
 80018c8:	fab2 f282 	clz	r2, r2
 80018cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80018d0:	e007      	b.n	80018e2 <HAL_RCC_GetSysClockFreq+0x4e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	22f0      	movs	r2, #240	; 0xf0
 80018d6:	fa92 f2a2 	rbit	r2, r2
 80018da:	fab2 f282 	clz	r2, r2
 80018de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018e2:	40d3      	lsrs	r3, r2
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018e4:	4a37      	ldr	r2, [pc, #220]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x130>)
 80018e6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80018ea:	68a3      	ldr	r3, [r4, #8]
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018ec:	f013 0f0c 	tst.w	r3, #12
 80018f0:	bf0c      	ite	eq
 80018f2:	4630      	moveq	r0, r6
 80018f4:	2000      	movne	r0, #0
 80018f6:	e011      	b.n	800191c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018f8:	68a3      	ldr	r3, [r4, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d007      	beq.n	8001912 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001902:	4b2f      	ldr	r3, [pc, #188]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b08      	cmp	r3, #8
 800190c:	d104      	bne.n	8001918 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800190e:	482e      	ldr	r0, [pc, #184]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x134>)
 8001910:	e000      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x80>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001912:	482e      	ldr	r0, [pc, #184]	; (80019cc <HAL_RCC_GetSysClockFreq+0x138>)
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001914:	2600      	movs	r6, #0
 8001916:	e001      	b.n	800191c <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001918:	2000      	movs	r0, #0
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800191a:	4606      	mov	r6, r0
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800191c:	68a3      	ldr	r3, [r4, #8]
 800191e:	4a28      	ldr	r2, [pc, #160]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b0c      	cmp	r3, #12
 8001926:	d149      	bne.n	80019bc <HAL_RCC_GetSysClockFreq+0x128>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001928:	68d1      	ldr	r1, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 800192a:	68d3      	ldr	r3, [r2, #12]
 800192c:	2070      	movs	r0, #112	; 0x70
 800192e:	fa90 f0a0 	rbit	r0, r0
 8001932:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001936:	fab0 f080 	clz	r0, r0
 800193a:	fa23 f000 	lsr.w	r0, r3, r0

    switch (pllsource)
 800193e:	f001 0303 	and.w	r3, r1, #3
 8001942:	2b02      	cmp	r3, #2

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8001944:	f100 0501 	add.w	r5, r0, #1
 8001948:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00

    switch (pllsource)
 800194c:	d00c      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0xd4>
 800194e:	2b03      	cmp	r3, #3
 8001950:	d119      	bne.n	8001986 <HAL_RCC_GetSysClockFreq+0xf2>
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001952:	68d3      	ldr	r3, [r2, #12]
 8001954:	fa91 f1a1 	rbit	r1, r1
 8001958:	fab1 f181 	clz	r1, r1
 800195c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001960:	fa23 f101 	lsr.w	r1, r3, r1
 8001964:	4a18      	ldr	r2, [pc, #96]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x134>)
 8001966:	e009      	b.n	800197c <HAL_RCC_GetSysClockFreq+0xe8>
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;

    switch (pllsource)
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001968:	68d3      	ldr	r3, [r2, #12]
 800196a:	fa91 f1a1 	rbit	r1, r1
 800196e:	4a17      	ldr	r2, [pc, #92]	; (80019cc <HAL_RCC_GetSysClockFreq+0x138>)
 8001970:	fab1 f181 	clz	r1, r1
 8001974:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001978:	fa23 f101 	lsr.w	r1, r3, r1
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 800197c:	fbb2 f0f5 	udiv	r0, r2, r5
 8001980:	fb00 f301 	mul.w	r3, r0, r1
      break;
 8001984:	e00b      	b.n	800199e <HAL_RCC_GetSysClockFreq+0x10a>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001986:	68d2      	ldr	r2, [r2, #12]
 8001988:	fa91 f1a1 	rbit	r1, r1
 800198c:	fab1 f181 	clz	r1, r1
 8001990:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
 8001994:	40ca      	lsrs	r2, r1
 8001996:	fbb6 f0f5 	udiv	r0, r6, r5
 800199a:	fb00 f302 	mul.w	r3, r0, r2
      break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 800199e:	68e2      	ldr	r2, [r4, #12]
 80019a0:	f04f 60c0 	mov.w	r0, #100663296	; 0x6000000
 80019a4:	fa90 f0a0 	rbit	r0, r0
 80019a8:	fab0 f080 	clz	r0, r0
    sysclockfreq = pllvco/pllr;
 80019ac:	f002 62c0 	and.w	r2, r2, #100663296	; 0x6000000
 80019b0:	fa22 f000 	lsr.w	r0, r2, r0
 80019b4:	3001      	adds	r0, #1
 80019b6:	0040      	lsls	r0, r0, #1
 80019b8:	fbb3 f0f0 	udiv	r0, r3, r0
  }

  return sysclockfreq;
}
 80019bc:	bd70      	pop	{r4, r5, r6, pc}
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	08004a64 	.word	0x08004a64
 80019c8:	007a1200 	.word	0x007a1200
 80019cc:	00f42400 	.word	0x00f42400

080019d0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019d0:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019d6:	06dd      	lsls	r5, r3, #27
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d8:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019da:	f140 808f 	bpl.w	8001afc <HAL_RCC_OscConfig+0x12c>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80019de:	4d9e      	ldr	r5, [pc, #632]	; (8001c58 <HAL_RCC_OscConfig+0x288>)
 80019e0:	68ab      	ldr	r3, [r5, #8]
 80019e2:	f013 0f0c 	tst.w	r3, #12
 80019e6:	d153      	bne.n	8001a90 <HAL_RCC_OscConfig+0xc0>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019e8:	682b      	ldr	r3, [r5, #0]
 80019ea:	0798      	lsls	r0, r3, #30
 80019ec:	d503      	bpl.n	80019f6 <HAL_RCC_OscConfig+0x26>
 80019ee:	69a3      	ldr	r3, [r4, #24]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 8256 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x4d2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019f6:	682a      	ldr	r2, [r5, #0]
 80019f8:	4b97      	ldr	r3, [pc, #604]	; (8001c58 <HAL_RCC_OscConfig+0x288>)
 80019fa:	6a20      	ldr	r0, [r4, #32]
 80019fc:	0711      	lsls	r1, r2, #28
 80019fe:	bf56      	itet	pl
 8001a00:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8001a04:	681b      	ldrmi	r3, [r3, #0]
 8001a06:	091b      	lsrpl	r3, r3, #4
 8001a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a0c:	4283      	cmp	r3, r0
 8001a0e:	d216      	bcs.n	8001a3e <HAL_RCC_OscConfig+0x6e>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a10:	f7ff fefe 	bl	8001810 <RCC_SetFlashLatencyFromMSIRange>
 8001a14:	2800      	cmp	r0, #0
 8001a16:	f040 8244 	bne.w	8001ea2 <HAL_RCC_OscConfig+0x4d2>
          {
            return HAL_ERROR;
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a1a:	682b      	ldr	r3, [r5, #0]
 8001a1c:	f043 0308 	orr.w	r3, r3, #8
 8001a20:	602b      	str	r3, [r5, #0]
 8001a22:	682b      	ldr	r3, [r5, #0]
 8001a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a28:	6a23      	ldr	r3, [r4, #32]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	602b      	str	r3, [r5, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a2e:	686b      	ldr	r3, [r5, #4]
 8001a30:	69e2      	ldr	r2, [r4, #28]
 8001a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a3a:	606b      	str	r3, [r5, #4]
 8001a3c:	e014      	b.n	8001a68 <HAL_RCC_OscConfig+0x98>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a3e:	682b      	ldr	r3, [r5, #0]
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	602b      	str	r3, [r5, #0]
 8001a46:	682b      	ldr	r3, [r5, #0]
 8001a48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a4c:	4303      	orrs	r3, r0
 8001a4e:	602b      	str	r3, [r5, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a50:	686b      	ldr	r3, [r5, #4]
 8001a52:	69e2      	ldr	r2, [r4, #28]
 8001a54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a5c:	606b      	str	r3, [r5, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a5e:	f7ff fed7 	bl	8001810 <RCC_SetFlashLatencyFromMSIRange>
 8001a62:	2800      	cmp	r0, #0
 8001a64:	f040 821d 	bne.w	8001ea2 <HAL_RCC_OscConfig+0x4d2>
            return HAL_ERROR;
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001a68:	f7ff ff14 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8001a6c:	68ab      	ldr	r3, [r5, #8]
 8001a6e:	22f0      	movs	r2, #240	; 0xf0
 8001a70:	fa92 f2a2 	rbit	r2, r2
 8001a74:	fab2 f282 	clz	r2, r2
 8001a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a7c:	40d3      	lsrs	r3, r2
 8001a7e:	4a77      	ldr	r2, [pc, #476]	; (8001c5c <HAL_RCC_OscConfig+0x28c>)
 8001a80:	5cd3      	ldrb	r3, [r2, r3]
 8001a82:	40d8      	lsrs	r0, r3
 8001a84:	4b76      	ldr	r3, [pc, #472]	; (8001c60 <HAL_RCC_OscConfig+0x290>)
 8001a86:	6018      	str	r0, [r3, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff f96f 	bl	8000d6c <HAL_InitTick>
 8001a8e:	e035      	b.n	8001afc <HAL_RCC_OscConfig+0x12c>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a90:	6983      	ldr	r3, [r0, #24]
 8001a92:	b31b      	cbz	r3, 8001adc <HAL_RCC_OscConfig+0x10c>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a94:	682b      	ldr	r3, [r5, #0]
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	602b      	str	r3, [r5, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f98e 	bl	8000dbc <HAL_GetTick>
 8001aa0:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001aa2:	682a      	ldr	r2, [r5, #0]
 8001aa4:	4b6c      	ldr	r3, [pc, #432]	; (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001aa6:	0792      	lsls	r2, r2, #30
 8001aa8:	d406      	bmi.n	8001ab8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aaa:	f7ff f987 	bl	8000dbc <HAL_GetTick>
 8001aae:	1b80      	subs	r0, r0, r6
 8001ab0:	2802      	cmp	r0, #2
 8001ab2:	d9f6      	bls.n	8001aa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ab4:	2003      	movs	r0, #3
 8001ab6:	e1f5      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4d4>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	f042 0208 	orr.w	r2, r2, #8
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8001ac6:	6a22      	ldr	r2, [r4, #32]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	69e1      	ldr	r1, [r4, #28]
 8001ad0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001ad4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	e00f      	b.n	8001afc <HAL_RCC_OscConfig+0x12c>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001adc:	682b      	ldr	r3, [r5, #0]
 8001ade:	f023 0301 	bic.w	r3, r3, #1
 8001ae2:	602b      	str	r3, [r5, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff f96a 	bl	8000dbc <HAL_GetTick>
 8001ae8:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001aea:	682b      	ldr	r3, [r5, #0]
 8001aec:	079f      	lsls	r7, r3, #30
 8001aee:	d505      	bpl.n	8001afc <HAL_RCC_OscConfig+0x12c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001af0:	f7ff f964 	bl	8000dbc <HAL_GetTick>
 8001af4:	1b80      	subs	r0, r0, r6
 8001af6:	2802      	cmp	r0, #2
 8001af8:	d9f7      	bls.n	8001aea <HAL_RCC_OscConfig+0x11a>
 8001afa:	e7db      	b.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	07de      	lsls	r6, r3, #31
 8001b00:	d403      	bmi.n	8001b0a <HAL_RCC_OscConfig+0x13a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	079d      	lsls	r5, r3, #30
 8001b06:	d448      	bmi.n	8001b9a <HAL_RCC_OscConfig+0x1ca>
 8001b08:	e09f      	b.n	8001c4a <HAL_RCC_OscConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8001b0a:	4d53      	ldr	r5, [pc, #332]	; (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001b0c:	68ab      	ldr	r3, [r5, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d009      	beq.n	8001b2a <HAL_RCC_OscConfig+0x15a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b16:	68ab      	ldr	r3, [r5, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b0c      	cmp	r3, #12
 8001b1e:	d10b      	bne.n	8001b38 <HAL_RCC_OscConfig+0x168>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b20:	68eb      	ldr	r3, [r5, #12]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d106      	bne.n	8001b38 <HAL_RCC_OscConfig+0x168>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2a:	682b      	ldr	r3, [r5, #0]
 8001b2c:	0398      	lsls	r0, r3, #14
 8001b2e:	d5e8      	bpl.n	8001b02 <HAL_RCC_OscConfig+0x132>
 8001b30:	6863      	ldr	r3, [r4, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1e5      	bne.n	8001b02 <HAL_RCC_OscConfig+0x132>
 8001b36:	e1b4      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b38:	6863      	ldr	r3, [r4, #4]
 8001b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3e:	d006      	beq.n	8001b4e <HAL_RCC_OscConfig+0x17e>
 8001b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b44:	d108      	bne.n	8001b58 <HAL_RCC_OscConfig+0x188>
 8001b46:	682b      	ldr	r3, [r5, #0]
 8001b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b4c:	602b      	str	r3, [r5, #0]
 8001b4e:	682b      	ldr	r3, [r5, #0]
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b54:	602b      	str	r3, [r5, #0]
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x19a>
 8001b58:	682a      	ldr	r2, [r5, #0]
 8001b5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b5e:	602a      	str	r2, [r5, #0]
 8001b60:	682a      	ldr	r2, [r5, #0]
 8001b62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b66:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b68:	b15b      	cbz	r3, 8001b82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6a:	f7ff f927 	bl	8000dbc <HAL_GetTick>
 8001b6e:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001b70:	682b      	ldr	r3, [r5, #0]
 8001b72:	0399      	lsls	r1, r3, #14
 8001b74:	d4c5      	bmi.n	8001b02 <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b76:	f7ff f921 	bl	8000dbc <HAL_GetTick>
 8001b7a:	1b80      	subs	r0, r0, r6
 8001b7c:	2864      	cmp	r0, #100	; 0x64
 8001b7e:	d9f7      	bls.n	8001b70 <HAL_RCC_OscConfig+0x1a0>
 8001b80:	e798      	b.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b82:	f7ff f91b 	bl	8000dbc <HAL_GetTick>
 8001b86:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001b88:	682b      	ldr	r3, [r5, #0]
 8001b8a:	039a      	lsls	r2, r3, #14
 8001b8c:	d5b9      	bpl.n	8001b02 <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b8e:	f7ff f915 	bl	8000dbc <HAL_GetTick>
 8001b92:	1b80      	subs	r0, r0, r6
 8001b94:	2864      	cmp	r0, #100	; 0x64
 8001b96:	d9f7      	bls.n	8001b88 <HAL_RCC_OscConfig+0x1b8>
 8001b98:	e78c      	b.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001b9a:	4d2f      	ldr	r5, [pc, #188]	; (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001b9c:	68ab      	ldr	r3, [r5, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d009      	beq.n	8001bba <HAL_RCC_OscConfig+0x1ea>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ba6:	68ab      	ldr	r3, [r5, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b0c      	cmp	r3, #12
 8001bae:	d11a      	bne.n	8001be6 <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bb0:	68eb      	ldr	r3, [r5, #12]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d115      	bne.n	8001be6 <HAL_RCC_OscConfig+0x216>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bba:	682b      	ldr	r3, [r5, #0]
 8001bbc:	055b      	lsls	r3, r3, #21
 8001bbe:	d503      	bpl.n	8001bc8 <HAL_RCC_OscConfig+0x1f8>
 8001bc0:	68e3      	ldr	r3, [r4, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 816d 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x4d2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc8:	686b      	ldr	r3, [r5, #4]
 8001bca:	f04f 52f8 	mov.w	r2, #520093696	; 0x1f000000
 8001bce:	fa92 f2a2 	rbit	r2, r2
 8001bd2:	6921      	ldr	r1, [r4, #16]
 8001bd4:	fab2 f282 	clz	r2, r2
 8001bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bdc:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001be0:	4313      	orrs	r3, r2
 8001be2:	606b      	str	r3, [r5, #4]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001be4:	e031      	b.n	8001c4a <HAL_RCC_OscConfig+0x27a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be6:	68e3      	ldr	r3, [r4, #12]
 8001be8:	b1fb      	cbz	r3, 8001c2a <HAL_RCC_OscConfig+0x25a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bea:	682b      	ldr	r3, [r5, #0]
 8001bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf0:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf2:	f7ff f8e3 	bl	8000dbc <HAL_GetTick>
 8001bf6:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001bf8:	682b      	ldr	r3, [r5, #0]
 8001bfa:	4817      	ldr	r0, [pc, #92]	; (8001c58 <HAL_RCC_OscConfig+0x288>)
 8001bfc:	055f      	lsls	r7, r3, #21
 8001bfe:	d405      	bmi.n	8001c0c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c00:	f7ff f8dc 	bl	8000dbc <HAL_GetTick>
 8001c04:	1b80      	subs	r0, r0, r6
 8001c06:	2802      	cmp	r0, #2
 8001c08:	d9f6      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x228>
 8001c0a:	e753      	b.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0c:	6843      	ldr	r3, [r0, #4]
 8001c0e:	f04f 52f8 	mov.w	r2, #520093696	; 0x1f000000
 8001c12:	fa92 f2a2 	rbit	r2, r2
 8001c16:	6921      	ldr	r1, [r4, #16]
 8001c18:	fab2 f282 	clz	r2, r2
 8001c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c20:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001c24:	4313      	orrs	r3, r2
 8001c26:	6043      	str	r3, [r0, #4]
 8001c28:	e00f      	b.n	8001c4a <HAL_RCC_OscConfig+0x27a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2a:	682b      	ldr	r3, [r5, #0]
 8001c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c30:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c32:	f7ff f8c3 	bl	8000dbc <HAL_GetTick>
 8001c36:	4606      	mov	r6, r0

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001c38:	682b      	ldr	r3, [r5, #0]
 8001c3a:	0558      	lsls	r0, r3, #21
 8001c3c:	d505      	bpl.n	8001c4a <HAL_RCC_OscConfig+0x27a>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3e:	f7ff f8bd 	bl	8000dbc <HAL_GetTick>
 8001c42:	1b80      	subs	r0, r0, r6
 8001c44:	2802      	cmp	r0, #2
 8001c46:	d9f7      	bls.n	8001c38 <HAL_RCC_OscConfig+0x268>
 8001c48:	e734      	b.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	0719      	lsls	r1, r3, #28
 8001c4e:	d409      	bmi.n	8001c64 <HAL_RCC_OscConfig+0x294>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	075a      	lsls	r2, r3, #29
 8001c54:	d42f      	bmi.n	8001cb6 <HAL_RCC_OscConfig+0x2e6>
 8001c56:	e097      	b.n	8001d88 <HAL_RCC_OscConfig+0x3b8>
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	08004a49 	.word	0x08004a49
 8001c60:	20000000 	.word	0x20000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c64:	6963      	ldr	r3, [r4, #20]
 8001c66:	4d91      	ldr	r5, [pc, #580]	; (8001eac <HAL_RCC_OscConfig+0x4dc>)
 8001c68:	b193      	cbz	r3, 8001c90 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c76:	f7ff f8a1 	bl	8000dbc <HAL_GetTick>
 8001c7a:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001c7c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001c80:	079b      	lsls	r3, r3, #30
 8001c82:	d4e5      	bmi.n	8001c50 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c84:	f7ff f89a 	bl	8000dbc <HAL_GetTick>
 8001c88:	1b80      	subs	r0, r0, r6
 8001c8a:	2802      	cmp	r0, #2
 8001c8c:	d9f6      	bls.n	8001c7c <HAL_RCC_OscConfig+0x2ac>
 8001c8e:	e711      	b.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c90:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001c94:	f023 0301 	bic.w	r3, r3, #1
 8001c98:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9c:	f7ff f88e 	bl	8000dbc <HAL_GetTick>
 8001ca0:	4606      	mov	r6, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001ca2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001ca6:	079f      	lsls	r7, r3, #30
 8001ca8:	d5d2      	bpl.n	8001c50 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001caa:	f7ff f887 	bl	8000dbc <HAL_GetTick>
 8001cae:	1b80      	subs	r0, r0, r6
 8001cb0:	2802      	cmp	r0, #2
 8001cb2:	d9f6      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x2d2>
 8001cb4:	e6fe      	b.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cb6:	4d7d      	ldr	r5, [pc, #500]	; (8001eac <HAL_RCC_OscConfig+0x4dc>)
 8001cb8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001cba:	00d8      	lsls	r0, r3, #3
 8001cbc:	d40a      	bmi.n	8001cd4 <HAL_RCC_OscConfig+0x304>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	65ab      	str	r3, [r5, #88]	; 0x58
 8001cc6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001cd0:	2701      	movs	r7, #1
 8001cd2:	e000      	b.n	8001cd6 <HAL_RCC_OscConfig+0x306>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd4:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd6:	4e76      	ldr	r6, [pc, #472]	; (8001eb0 <HAL_RCC_OscConfig+0x4e0>)
 8001cd8:	6833      	ldr	r3, [r6, #0]
 8001cda:	05d9      	lsls	r1, r3, #23
 8001cdc:	d503      	bpl.n	8001ce6 <HAL_RCC_OscConfig+0x316>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cde:	68a3      	ldr	r3, [r4, #8]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d111      	bne.n	8001d08 <HAL_RCC_OscConfig+0x338>
 8001ce4:	e018      	b.n	8001d18 <HAL_RCC_OscConfig+0x348>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ce6:	6833      	ldr	r3, [r6, #0]
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cec:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cee:	f7ff f865 	bl	8000dbc <HAL_GetTick>
 8001cf2:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cf4:	6833      	ldr	r3, [r6, #0]
 8001cf6:	05da      	lsls	r2, r3, #23
 8001cf8:	d4f1      	bmi.n	8001cde <HAL_RCC_OscConfig+0x30e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfa:	f7ff f85f 	bl	8000dbc <HAL_GetTick>
 8001cfe:	ebc8 0000 	rsb	r0, r8, r0
 8001d02:	2802      	cmp	r0, #2
 8001d04:	d9f6      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x324>
 8001d06:	e6d5      	b.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d08:	2b05      	cmp	r3, #5
 8001d0a:	d10c      	bne.n	8001d26 <HAL_RCC_OscConfig+0x356>
 8001d0c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001d10:	f043 0304 	orr.w	r3, r3, #4
 8001d14:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8001d18:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8001d24:	e00c      	b.n	8001d40 <HAL_RCC_OscConfig+0x370>
 8001d26:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 8001d32:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001d36:	f022 0204 	bic.w	r2, r2, #4
 8001d3a:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d3e:	b173      	cbz	r3, 8001d5e <HAL_RCC_OscConfig+0x38e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d40:	f7ff f83c 	bl	8000dbc <HAL_GetTick>

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d44:	f241 3888 	movw	r8, #5000	; 0x1388

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d48:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001d4a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001d4e:	079b      	lsls	r3, r3, #30
 8001d50:	d40e      	bmi.n	8001d70 <HAL_RCC_OscConfig+0x3a0>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7ff f833 	bl	8000dbc <HAL_GetTick>
 8001d56:	1b80      	subs	r0, r0, r6
 8001d58:	4540      	cmp	r0, r8
 8001d5a:	d9f6      	bls.n	8001d4a <HAL_RCC_OscConfig+0x37a>
 8001d5c:	e6aa      	b.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5e:	f7ff f82d 	bl	8000dbc <HAL_GetTick>

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d62:	f241 3888 	movw	r8, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d66:	4606      	mov	r6, r0

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8001d68:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001d6c:	0798      	lsls	r0, r3, #30
 8001d6e:	d405      	bmi.n	8001d7c <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d70:	b157      	cbz	r7, 8001d88 <HAL_RCC_OscConfig+0x3b8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d72:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d78:	65ab      	str	r3, [r5, #88]	; 0x58
 8001d7a:	e005      	b.n	8001d88 <HAL_RCC_OscConfig+0x3b8>
      tickstart = HAL_GetTick();

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7c:	f7ff f81e 	bl	8000dbc <HAL_GetTick>
 8001d80:	1b80      	subs	r0, r0, r6
 8001d82:	4540      	cmp	r0, r8
 8001d84:	d9f0      	bls.n	8001d68 <HAL_RCC_OscConfig+0x398>
 8001d86:	e695      	b.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d88:	6823      	ldr	r3, [r4, #0]
 8001d8a:	0699      	lsls	r1, r3, #26
 8001d8c:	d402      	bmi.n	8001d94 <HAL_RCC_OscConfig+0x3c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d8e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001d90:	bb4a      	cbnz	r2, 8001de6 <HAL_RCC_OscConfig+0x416>
 8001d92:	e05f      	b.n	8001e54 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d96:	4d45      	ldr	r5, [pc, #276]	; (8001eac <HAL_RCC_OscConfig+0x4dc>)
 8001d98:	b193      	cbz	r3, 8001dc0 <HAL_RCC_OscConfig+0x3f0>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d9a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da6:	f7ff f809 	bl	8000dbc <HAL_GetTick>
 8001daa:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8001dac:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001db0:	079a      	lsls	r2, r3, #30
 8001db2:	d4ec      	bmi.n	8001d8e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001db4:	f7ff f802 	bl	8000dbc <HAL_GetTick>
 8001db8:	1b80      	subs	r0, r0, r6
 8001dba:	2802      	cmp	r0, #2
 8001dbc:	d9f6      	bls.n	8001dac <HAL_RCC_OscConfig+0x3dc>
 8001dbe:	e679      	b.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dc0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dcc:	f7fe fff6 	bl	8000dbc <HAL_GetTick>
 8001dd0:	4606      	mov	r6, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8001dd2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001dd6:	079b      	lsls	r3, r3, #30
 8001dd8:	d5d9      	bpl.n	8001d8e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dda:	f7fe ffef 	bl	8000dbc <HAL_GetTick>
 8001dde:	1b80      	subs	r0, r0, r6
 8001de0:	2802      	cmp	r0, #2
 8001de2:	d9f6      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x402>
 8001de4:	e666      	b.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001de6:	4d31      	ldr	r5, [pc, #196]	; (8001eac <HAL_RCC_OscConfig+0x4dc>)
 8001de8:	68ab      	ldr	r3, [r5, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b0c      	cmp	r3, #12
 8001df0:	d057      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x4d2>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df2:	682b      	ldr	r3, [r5, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001df4:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dfa:	602b      	str	r3, [r5, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dfc:	d138      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4a0>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfe:	f7fe ffdd 	bl	8000dbc <HAL_GetTick>
 8001e02:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001e04:	682b      	ldr	r3, [r5, #0]
 8001e06:	4829      	ldr	r0, [pc, #164]	; (8001eac <HAL_RCC_OscConfig+0x4dc>)
 8001e08:	019f      	lsls	r7, r3, #6
 8001e0a:	d425      	bmi.n	8001e58 <HAL_RCC_OscConfig+0x488>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e0c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001e0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e10:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e12:	06f6      	lsls	r6, r6, #27
 8001e14:	ea46 2103 	orr.w	r1, r6, r3, lsl #8
 8001e18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e1a:	3a01      	subs	r2, #1
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	ea43 1102 	orr.w	r1, r3, r2, lsl #4
 8001e22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e24:	085b      	lsrs	r3, r3, #1
 8001e26:	3b01      	subs	r3, #1
 8001e28:	ea41 5243 	orr.w	r2, r1, r3, lsl #21
 8001e2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e2e:	085b      	lsrs	r3, r3, #1
 8001e30:	3b01      	subs	r3, #1
 8001e32:	ea42 6343 	orr.w	r3, r2, r3, lsl #25
 8001e36:	60c3      	str	r3, [r0, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e38:	6803      	ldr	r3, [r0, #0]
 8001e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e3e:	6003      	str	r3, [r0, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e40:	68c3      	ldr	r3, [r0, #12]
 8001e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e46:	60c3      	str	r3, [r0, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7fe ffb8 	bl	8000dbc <HAL_GetTick>
 8001e4c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001e4e:	682b      	ldr	r3, [r5, #0]
 8001e50:	0199      	lsls	r1, r3, #6
 8001e52:	d507      	bpl.n	8001e64 <HAL_RCC_OscConfig+0x494>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001e54:	2000      	movs	r0, #0
 8001e56:	e025      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4d4>
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e58:	f7fe ffb0 	bl	8000dbc <HAL_GetTick>
 8001e5c:	1b80      	subs	r0, r0, r6
 8001e5e:	2802      	cmp	r0, #2
 8001e60:	d9d0      	bls.n	8001e04 <HAL_RCC_OscConfig+0x434>
 8001e62:	e627      	b.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e64:	f7fe ffaa 	bl	8000dbc <HAL_GetTick>
 8001e68:	1b00      	subs	r0, r0, r4
 8001e6a:	2802      	cmp	r0, #2
 8001e6c:	d9ef      	bls.n	8001e4e <HAL_RCC_OscConfig+0x47e>
 8001e6e:	e621      	b.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001e70:	682b      	ldr	r3, [r5, #0]
 8001e72:	011a      	lsls	r2, r3, #4
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e74:	bf5e      	ittt	pl
 8001e76:	68eb      	ldrpl	r3, [r5, #12]
 8001e78:	f023 0303 	bicpl.w	r3, r3, #3
 8001e7c:	60eb      	strpl	r3, [r5, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001e7e:	68eb      	ldr	r3, [r5, #12]
 8001e80:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e88:	60eb      	str	r3, [r5, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7fe ff97 	bl	8000dbc <HAL_GetTick>
 8001e8e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001e90:	682b      	ldr	r3, [r5, #0]
 8001e92:	019b      	lsls	r3, r3, #6
 8001e94:	d5de      	bpl.n	8001e54 <HAL_RCC_OscConfig+0x484>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e96:	f7fe ff91 	bl	8000dbc <HAL_GetTick>
 8001e9a:	1b00      	subs	r0, r0, r4
 8001e9c:	2802      	cmp	r0, #2
 8001e9e:	d9f7      	bls.n	8001e90 <HAL_RCC_OscConfig+0x4c0>
 8001ea0:	e608      	b.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ea2:	2001      	movs	r0, #1
    }
  }
  return HAL_OK;
}
 8001ea4:	b002      	add	sp, #8
 8001ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40007000 	.word	0x40007000

08001eb4 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001eb4:	4a57      	ldr	r2, [pc, #348]	; (8002014 <HAL_RCC_ClockConfig+0x160>)
 8001eb6:	6813      	ldr	r3, [r2, #0]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ec2:	4605      	mov	r5, r0
 8001ec4:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001ec6:	d30a      	bcc.n	8001ede <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec8:	6829      	ldr	r1, [r5, #0]
 8001eca:	0788      	lsls	r0, r1, #30
 8001ecc:	d514      	bpl.n	8001ef8 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ece:	4852      	ldr	r0, [pc, #328]	; (8002018 <HAL_RCC_ClockConfig+0x164>)
 8001ed0:	6883      	ldr	r3, [r0, #8]
 8001ed2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed6:	68ab      	ldr	r3, [r5, #8]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	6083      	str	r3, [r0, #8]
 8001edc:	e00c      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ede:	6813      	ldr	r3, [r2, #0]
 8001ee0:	f023 0307 	bic.w	r3, r3, #7
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ee8:	6813      	ldr	r3, [r2, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	4299      	cmp	r1, r3
 8001ef0:	d0ea      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef8:	07ca      	lsls	r2, r1, #31
 8001efa:	d406      	bmi.n	8001f0a <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001efc:	4a45      	ldr	r2, [pc, #276]	; (8002014 <HAL_RCC_ClockConfig+0x160>)
 8001efe:	6813      	ldr	r3, [r2, #0]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	429e      	cmp	r6, r3
 8001f06:	d351      	bcc.n	8001fac <HAL_RCC_ClockConfig+0xf8>
 8001f08:	e05a      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x10c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0a:	686b      	ldr	r3, [r5, #4]
 8001f0c:	4c42      	ldr	r4, [pc, #264]	; (8002018 <HAL_RCC_ClockConfig+0x164>)
 8001f0e:	2b02      	cmp	r3, #2
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001f10:	6822      	ldr	r2, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f12:	d102      	bne.n	8001f1a <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001f14:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_ClockConfig+0x7c>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d102      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001f1e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001f22:	e005      	b.n	8001f30 <HAL_RCC_ClockConfig+0x7c>
      {
        return HAL_ERROR;
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f24:	b913      	cbnz	r3, 8001f2c <HAL_RCC_ClockConfig+0x78>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001f26:	f012 0f02 	tst.w	r2, #2
 8001f2a:	e001      	b.n	8001f30 <HAL_RCC_ClockConfig+0x7c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001f2c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001f30:	d0df      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f32:	68a2      	ldr	r2, [r4, #8]
 8001f34:	f022 0203 	bic.w	r2, r2, #3
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60a3      	str	r3, [r4, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f3c:	f7fe ff3e 	bl	8000dbc <HAL_GetTick>

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f40:	686b      	ldr	r3, [r5, #4]
 8001f42:	2b02      	cmp	r3, #2
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f44:	4607      	mov	r7, r0

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f46:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	d10c      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xb2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001f4c:	68a3      	ldr	r3, [r4, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d0d2      	beq.n	8001efc <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f56:	f7fe ff31 	bl	8000dbc <HAL_GetTick>
 8001f5a:	1bc0      	subs	r0, r0, r7
 8001f5c:	4540      	cmp	r0, r8
 8001f5e:	d9f5      	bls.n	8001f4c <HAL_RCC_ClockConfig+0x98>
        {
          return HAL_TIMEOUT;
 8001f60:	2003      	movs	r0, #3
 8001f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d10a      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xcc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f6a:	68a3      	ldr	r3, [r4, #8]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b0c      	cmp	r3, #12
 8001f72:	d0c3      	beq.n	8001efc <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f74:	f7fe ff22 	bl	8000dbc <HAL_GetTick>
 8001f78:	1bc0      	subs	r0, r0, r7
 8001f7a:	4540      	cmp	r0, r8
 8001f7c:	d9f5      	bls.n	8001f6a <HAL_RCC_ClockConfig+0xb6>
 8001f7e:	e7ef      	b.n	8001f60 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f80:	b973      	cbnz	r3, 8001fa0 <HAL_RCC_ClockConfig+0xec>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8001f82:	68a3      	ldr	r3, [r4, #8]
 8001f84:	f013 0f0c 	tst.w	r3, #12
 8001f88:	d0b8      	beq.n	8001efc <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8a:	f7fe ff17 	bl	8000dbc <HAL_GetTick>
 8001f8e:	1bc0      	subs	r0, r0, r7
 8001f90:	4540      	cmp	r0, r8
 8001f92:	d9f6      	bls.n	8001f82 <HAL_RCC_ClockConfig+0xce>
 8001f94:	e7e4      	b.n	8001f60 <HAL_RCC_ClockConfig+0xac>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f96:	f7fe ff11 	bl	8000dbc <HAL_GetTick>
 8001f9a:	1bc0      	subs	r0, r0, r7
 8001f9c:	4540      	cmp	r0, r8
 8001f9e:	d8df      	bhi.n	8001f60 <HAL_RCC_ClockConfig+0xac>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001fa0:	68a3      	ldr	r3, [r4, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d1f5      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xe2>
 8001faa:	e7a7      	b.n	8001efc <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fac:	6813      	ldr	r3, [r2, #0]
 8001fae:	f023 0307 	bic.w	r3, r3, #7
 8001fb2:	4333      	orrs	r3, r6
 8001fb4:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fb6:	6813      	ldr	r3, [r2, #0]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	429e      	cmp	r6, r3
 8001fbe:	d198      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	6829      	ldr	r1, [r5, #0]
 8001fc2:	4c15      	ldr	r4, [pc, #84]	; (8002018 <HAL_RCC_ClockConfig+0x164>)
 8001fc4:	f011 0f04 	tst.w	r1, #4
 8001fc8:	d005      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x122>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fca:	68a3      	ldr	r3, [r4, #8]
 8001fcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fd0:	68eb      	ldr	r3, [r5, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60a3      	str	r3, [r4, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd6:	070b      	lsls	r3, r1, #28
 8001fd8:	d506      	bpl.n	8001fe8 <HAL_RCC_ClockConfig+0x134>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fda:	68a3      	ldr	r3, [r4, #8]
 8001fdc:	692a      	ldr	r2, [r5, #16]
 8001fde:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001fe2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001fe6:	60a3      	str	r3, [r4, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001fe8:	f7ff fc54 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8001fec:	68a3      	ldr	r3, [r4, #8]
 8001fee:	22f0      	movs	r2, #240	; 0xf0
 8001ff0:	fa92 f2a2 	rbit	r2, r2
 8001ff4:	fab2 f282 	clz	r2, r2
 8001ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffc:	40d3      	lsrs	r3, r2
 8001ffe:	4a07      	ldr	r2, [pc, #28]	; (800201c <HAL_RCC_ClockConfig+0x168>)
 8002000:	5cd3      	ldrb	r3, [r2, r3]
 8002002:	40d8      	lsrs	r0, r3
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_RCC_ClockConfig+0x16c>)
 8002006:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002008:	2000      	movs	r0, #0
 800200a:	f7fe feaf 	bl	8000d6c <HAL_InitTick>

  return HAL_OK;
 800200e:	2000      	movs	r0, #0
}
 8002010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002014:	40022000 	.word	0x40022000
 8002018:	40021000 	.word	0x40021000
 800201c:	08004a49 	.word	0x08004a49
 8002020:	20000000 	.word	0x20000000

08002024 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002024:	4b01      	ldr	r3, [pc, #4]	; (800202c <HAL_RCC_GetHCLKFreq+0x8>)
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000000 	.word	0x20000000

08002030 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002032:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	fa92 f2a2 	rbit	r2, r2
 800203c:	fab2 f282 	clz	r2, r2
 8002040:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002044:	40d3      	lsrs	r3, r2
 8002046:	4a04      	ldr	r2, [pc, #16]	; (8002058 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002048:	5cd3      	ldrb	r3, [r2, r3]
 800204a:	4a04      	ldr	r2, [pc, #16]	; (800205c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800204c:	6810      	ldr	r0, [r2, #0]
}
 800204e:	40d8      	lsrs	r0, r3
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	08004a59 	.word	0x08004a59
 800205c:	20000000 	.word	0x20000000

08002060 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002062:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	fa92 f2a2 	rbit	r2, r2
 800206c:	fab2 f282 	clz	r2, r2
 8002070:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002074:	40d3      	lsrs	r3, r2
 8002076:	4a04      	ldr	r2, [pc, #16]	; (8002088 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002078:	5cd3      	ldrb	r3, [r2, r3]
 800207a:	4a04      	ldr	r2, [pc, #16]	; (800208c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800207c:	6810      	ldr	r0, [r2, #0]
}
 800207e:	40d8      	lsrs	r0, r3
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	08004a59 	.word	0x08004a59
 800208c:	20000000 	.word	0x20000000

08002090 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002092:	4b5a      	ldr	r3, [pc, #360]	; (80021fc <RCCEx_PLLSAI1_Config+0x16c>)
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	f012 0f03 	tst.w	r2, #3
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800209a:	4604      	mov	r4, r0
 800209c:	460e      	mov	r6, r1
 800209e:	461d      	mov	r5, r3
 80020a0:	6800      	ldr	r0, [r0, #0]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020a2:	d013      	beq.n	80020cc <RCCEx_PLLSAI1_Config+0x3c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	f002 0203 	and.w	r2, r2, #3
 80020aa:	4282      	cmp	r2, r0
 80020ac:	d124      	bne.n	80020f8 <RCCEx_PLLSAI1_Config+0x68>
       || 
 80020ae:	b31a      	cbz	r2, 80020f8 <RCCEx_PLLSAI1_Config+0x68>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	2370      	movs	r3, #112	; 0x70
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	fab3 f183 	clz	r1, r3
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
 80020bc:	f002 0370 	and.w	r3, r2, #112	; 0x70
 80020c0:	40cb      	lsrs	r3, r1
 80020c2:	6862      	ldr	r2, [r4, #4]
 80020c4:	3301      	adds	r3, #1
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d116      	bne.n	80020f8 <RCCEx_PLLSAI1_Config+0x68>
 80020ca:	e025      	b.n	8002118 <RCCEx_PLLSAI1_Config+0x88>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80020cc:	2802      	cmp	r0, #2
 80020ce:	d008      	beq.n	80020e2 <RCCEx_PLLSAI1_Config+0x52>
 80020d0:	2803      	cmp	r0, #3
 80020d2:	d00a      	beq.n	80020ea <RCCEx_PLLSAI1_Config+0x5a>
 80020d4:	2801      	cmp	r0, #1
 80020d6:	d10f      	bne.n	80020f8 <RCCEx_PLLSAI1_Config+0x68>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	079f      	lsls	r7, r3, #30
 80020dc:	f140 808d 	bpl.w	80021fa <RCCEx_PLLSAI1_Config+0x16a>
 80020e0:	e00c      	b.n	80020fc <RCCEx_PLLSAI1_Config+0x6c>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80020e8:	e005      	b.n	80020f6 <RCCEx_PLLSAI1_Config+0x66>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	0391      	lsls	r1, r2, #14
 80020ee:	d405      	bmi.n	80020fc <RCCEx_PLLSAI1_Config+0x6c>
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80020f6:	d101      	bne.n	80020fc <RCCEx_PLLSAI1_Config+0x6c>
 80020f8:	2001      	movs	r0, #1
 80020fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    if(status == HAL_OK)
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 80020fc:	68e9      	ldr	r1, [r5, #12]
 80020fe:	2370      	movs	r3, #112	; 0x70
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	fab3 f283 	clz	r2, r3
 8002108:	6863      	ldr	r3, [r4, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	4093      	lsls	r3, r2
 800210e:	f021 0273 	bic.w	r2, r1, #115	; 0x73
 8002112:	4310      	orrs	r0, r2
 8002114:	4318      	orrs	r0, r3
 8002116:	60e8      	str	r0, [r5, #12]
  }
  
  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002118:	682b      	ldr	r3, [r5, #0]
 800211a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800211e:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002120:	f7fe fe4c 	bl	8000dbc <HAL_GetTick>
 8002124:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8002126:	682b      	ldr	r3, [r5, #0]
 8002128:	4934      	ldr	r1, [pc, #208]	; (80021fc <RCCEx_PLLSAI1_Config+0x16c>)
 800212a:	011a      	lsls	r2, r3, #4
 800212c:	d506      	bpl.n	800213c <RCCEx_PLLSAI1_Config+0xac>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800212e:	f7fe fe45 	bl	8000dbc <HAL_GetTick>
 8002132:	1bc0      	subs	r0, r0, r7
 8002134:	2802      	cmp	r0, #2
 8002136:	d9f6      	bls.n	8002126 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_TIMEOUT;
 8002138:	2003      	movs	r0, #3
 800213a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800213c:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8002140:	68a7      	ldr	r7, [r4, #8]
      }
    }

    if(status == HAL_OK)    
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002142:	b9b6      	cbnz	r6, 8002172 <RCCEx_PLLSAI1_Config+0xe2>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8002144:	6908      	ldr	r0, [r1, #16]
 8002146:	fa93 f2a3 	rbit	r2, r3
 800214a:	f04f 4678 	mov.w	r6, #4160749568	; 0xf8000000
 800214e:	fab2 f282 	clz	r2, r2
 8002152:	fa96 f6a6 	rbit	r6, r6
 8002156:	fa07 f302 	lsl.w	r3, r7, r2
 800215a:	68e2      	ldr	r2, [r4, #12]
 800215c:	fab6 f686 	clz	r6, r6
 8002160:	40b2      	lsls	r2, r6
 8002162:	4313      	orrs	r3, r2
 8002164:	f020 4278 	bic.w	r2, r0, #4160749568	; 0xf8000000
 8002168:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800216c:	431a      	orrs	r2, r3
 800216e:	610a      	str	r2, [r1, #16]
 8002170:	e02d      	b.n	80021ce <RCCEx_PLLSAI1_Config+0x13e>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002172:	2e01      	cmp	r6, #1
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8002174:	6908      	ldr	r0, [r1, #16]
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002176:	d113      	bne.n	80021a0 <RCCEx_PLLSAI1_Config+0x110>
 8002178:	fa93 f2a3 	rbit	r2, r3
 800217c:	f44f 03c0 	mov.w	r3, #6291456	; 0x600000
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8002180:	fab2 f282 	clz	r2, r2
 8002184:	fa93 f3a3 	rbit	r3, r3
 8002188:	6926      	ldr	r6, [r4, #16]
 800218a:	0876      	lsrs	r6, r6, #1
 800218c:	fab3 f383 	clz	r3, r3
 8002190:	3e01      	subs	r6, #1
 8002192:	409e      	lsls	r6, r3
 8002194:	fa07 f302 	lsl.w	r3, r7, r2
 8002198:	4333      	orrs	r3, r6
 800219a:	f420 02c0 	bic.w	r2, r0, #6291456	; 0x600000
 800219e:	e012      	b.n	80021c6 <RCCEx_PLLSAI1_Config+0x136>
 80021a0:	fa93 f2a3 	rbit	r2, r3
 80021a4:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80021a8:	fab2 f282 	clz	r2, r2
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	6966      	ldr	r6, [r4, #20]
 80021b2:	0876      	lsrs	r6, r6, #1
 80021b4:	fab3 f383 	clz	r3, r3
 80021b8:	3e01      	subs	r6, #1
 80021ba:	409e      	lsls	r6, r3
 80021bc:	fa07 f302 	lsl.w	r3, r7, r2
 80021c0:	4333      	orrs	r3, r6
 80021c2:	f020 62c0 	bic.w	r2, r0, #100663296	; 0x6000000
 80021c6:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80021ca:	4313      	orrs	r3, r2
 80021cc:	610b      	str	r3, [r1, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80021ce:	682b      	ldr	r3, [r5, #0]
 80021d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021d4:	602b      	str	r3, [r5, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d6:	f7fe fdf1 	bl	8000dbc <HAL_GetTick>
 80021da:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80021dc:	682b      	ldr	r3, [r5, #0]
 80021de:	4a07      	ldr	r2, [pc, #28]	; (80021fc <RCCEx_PLLSAI1_Config+0x16c>)
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	d405      	bmi.n	80021f0 <RCCEx_PLLSAI1_Config+0x160>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80021e4:	f7fe fdea 	bl	8000dbc <HAL_GetTick>
 80021e8:	1b80      	subs	r0, r0, r6
 80021ea:	2802      	cmp	r0, #2
 80021ec:	d9f6      	bls.n	80021dc <RCCEx_PLLSAI1_Config+0x14c>
 80021ee:	e7a3      	b.n	8002138 <RCCEx_PLLSAI1_Config+0xa8>
      }

      if(status == HAL_OK)    
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80021f0:	6911      	ldr	r1, [r2, #16]
 80021f2:	69a3      	ldr	r3, [r4, #24]
 80021f4:	430b      	orrs	r3, r1
 80021f6:	6113      	str	r3, [r2, #16]
 80021f8:	2000      	movs	r0, #0
      }
    }
  }
  
  return status;
}
 80021fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021fc:	40021000 	.word	0x40021000

08002200 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002200:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002204:	6805      	ldr	r5, [r0, #0]
 8002206:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800220a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800220c:	d01f      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800220e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002210:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002214:	d004      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8002216:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800221a:	d00c      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800221c:	b9b1      	cbnz	r1, 800224c <HAL_RCCEx_PeriphCLKConfig+0x4c>
 800221e:	e005      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x2c>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002220:	4a96      	ldr	r2, [pc, #600]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002222:	68d3      	ldr	r3, [r2, #12]
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800222a:	e004      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x36>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800222c:	3004      	adds	r0, #4
 800222e:	f7ff ff2f 	bl	8002090 <RCCEx_PLLSAI1_Config>
    default:
      ret = HAL_ERROR;
      break;
    }

    if(ret == HAL_OK)
 8002232:	4605      	mov	r5, r0
 8002234:	b958      	cbnz	r0, 800224e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002236:	4991      	ldr	r1, [pc, #580]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002238:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800223c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002240:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002248:	2500      	movs	r5, #0
 800224a:	e000      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800224c:	2501      	movs	r5, #1
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800224e:	6823      	ldr	r3, [r4, #0]
 8002250:	039e      	lsls	r6, r3, #14
 8002252:	d55a      	bpl.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x10a>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002254:	4e89      	ldr	r6, [pc, #548]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002256:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002258:	00d8      	lsls	r0, r3, #3
 800225a:	d40a      	bmi.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800225e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002262:	65b3      	str	r3, [r6, #88]	; 0x58
 8002264:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800226e:	2701      	movs	r7, #1
 8002270:	e000      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x74>
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
  {
    FlagStatus       pwrclkchanged = RESET;
 8002272:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002274:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8002480 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8002278:	f8d8 3000 	ldr.w	r3, [r8]
 800227c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002280:	f8c8 3000 	str.w	r3, [r8]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002284:	f7fe fd9a 	bl	8000dbc <HAL_GetTick>
 8002288:	4681      	mov	r9, r0

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800228a:	f8d8 3000 	ldr.w	r3, [r8]
 800228e:	05d9      	lsls	r1, r3, #23
 8002290:	d406      	bmi.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002292:	f7fe fd93 	bl	8000dbc <HAL_GetTick>
 8002296:	ebc9 0000 	rsb	r0, r9, r0
 800229a:	2802      	cmp	r0, #2
 800229c:	d9f5      	bls.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800229e:	e02e      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = HAL_TIMEOUT;
        break;
      }
    }

    if(ret == HAL_OK)
 80022a0:	bb75      	cbnz	r5, 8002300 <HAL_RCCEx_PeriphCLKConfig+0x100>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022a2:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80022a6:	4a75      	ldr	r2, [pc, #468]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022a8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80022ac:	d014      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80022ae:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80022b0:	428b      	cmp	r3, r1
 80022b2:	d011      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022b4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022b8:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80022bc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80022c0:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022c4:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022cc:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80022d0:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022d8:	07da      	lsls	r2, r3, #31
 80022da:	f140 80c2 	bpl.w	8002462 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022de:	f7fe fd6d 	bl	8000dbc <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e2:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	4680      	mov	r8, r0

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80022e8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80022ec:	079b      	lsls	r3, r3, #30
 80022ee:	f100 80b8 	bmi.w	8002462 <HAL_RCCEx_PeriphCLKConfig+0x262>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7fe fd63 	bl	8000dbc <HAL_GetTick>
 80022f6:	ebc8 0000 	rsb	r0, r8, r0
 80022fa:	4548      	cmp	r0, r9
 80022fc:	d9f4      	bls.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
      {
        ret = HAL_TIMEOUT;
 80022fe:	2503      	movs	r5, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002300:	b11f      	cbz	r7, 800230a <HAL_RCCEx_PeriphCLKConfig+0x10a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002302:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002308:	65b3      	str	r3, [r6, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800230a:	6823      	ldr	r3, [r4, #0]
 800230c:	07df      	lsls	r7, r3, #31
 800230e:	d508      	bpl.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002310:	485a      	ldr	r0, [pc, #360]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002312:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002316:	f022 0103 	bic.w	r1, r2, #3
 800231a:	6a22      	ldr	r2, [r4, #32]
 800231c:	430a      	orrs	r2, r1
 800231e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002322:	079e      	lsls	r6, r3, #30
 8002324:	d508      	bpl.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002326:	4855      	ldr	r0, [pc, #340]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002328:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800232c:	f022 010c 	bic.w	r1, r2, #12
 8002330:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002332:	430a      	orrs	r2, r1
 8002334:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002338:	0698      	lsls	r0, r3, #26
 800233a:	d508      	bpl.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800233c:	484f      	ldr	r0, [pc, #316]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800233e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002342:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 8002346:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002348:	430a      	orrs	r2, r1
 800234a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800234e:	0599      	lsls	r1, r3, #22
 8002350:	d508      	bpl.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002352:	484a      	ldr	r0, [pc, #296]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002354:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002358:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 800235c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800235e:	430a      	orrs	r2, r1
 8002360:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002364:	055a      	lsls	r2, r3, #21
 8002366:	d508      	bpl.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002368:	4844      	ldr	r0, [pc, #272]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800236a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800236e:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 8002372:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002374:	430a      	orrs	r2, r1
 8002376:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800237a:	065f      	lsls	r7, r3, #25
 800237c:	d508      	bpl.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x190>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800237e:	483f      	ldr	r0, [pc, #252]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002380:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002384:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002388:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800238a:	430a      	orrs	r2, r1
 800238c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002390:	05de      	lsls	r6, r3, #23
 8002392:	d508      	bpl.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002394:	4839      	ldr	r0, [pc, #228]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002396:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800239a:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800239e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80023a0:	430a      	orrs	r2, r1
 80023a2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023a6:	0498      	lsls	r0, r3, #18
 80023a8:	d51a      	bpl.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023aa:	4a34      	ldr	r2, [pc, #208]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023ac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80023ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80023b2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80023b6:	430b      	orrs	r3, r1

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023b8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023c0:	d104      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c2:	68d3      	ldr	r3, [r2, #12]
 80023c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023c8:	60d3      	str	r3, [r2, #12]
 80023ca:	e009      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023cc:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80023d0:	d106      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023d2:	2101      	movs	r1, #1
 80023d4:	1d20      	adds	r0, r4, #4
 80023d6:	f7ff fe5b 	bl	8002090 <RCCEx_PLLSAI1_Config>
      
        if(ret != HAL_OK)
 80023da:	2800      	cmp	r0, #0
 80023dc:	bf18      	it	ne
 80023de:	4605      	movne	r5, r0
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	0359      	lsls	r1, r3, #13
 80023e4:	d51a      	bpl.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023e6:	4a25      	ldr	r2, [pc, #148]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023e8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80023ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80023ee:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80023f2:	430b      	orrs	r3, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023f4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023fc:	d104      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x208>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023fe:	68d3      	ldr	r3, [r2, #12]
 8002400:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002404:	60d3      	str	r3, [r2, #12]
 8002406:	e009      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002408:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800240c:	d106      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800240e:	2101      	movs	r1, #1
 8002410:	1d20      	adds	r0, r4, #4
 8002412:	f7ff fe3d 	bl	8002090 <RCCEx_PLLSAI1_Config>
      
      if(ret != HAL_OK)
 8002416:	2800      	cmp	r0, #0
 8002418:	bf18      	it	ne
 800241a:	4605      	movne	r5, r0
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800241c:	6823      	ldr	r3, [r4, #0]
 800241e:	045a      	lsls	r2, r3, #17
 8002420:	d512      	bpl.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002422:	4916      	ldr	r1, [pc, #88]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002424:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002426:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800242a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800242e:	4313      	orrs	r3, r2
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002430:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002438:	d106      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800243a:	2102      	movs	r1, #2
 800243c:	1d20      	adds	r0, r4, #4
 800243e:	f7ff fe27 	bl	8002090 <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 8002442:	2800      	cmp	r0, #0
 8002444:	bf18      	it	ne
 8002446:	4605      	movne	r5, r0
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002448:	6823      	ldr	r3, [r4, #0]
 800244a:	041b      	lsls	r3, r3, #16
 800244c:	d512      	bpl.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800244e:	490b      	ldr	r1, [pc, #44]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002450:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002454:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002458:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
  }

#endif /* DFSDM1_Filter0 */

  return status;
 8002460:	e008      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002462:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002466:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800246a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8002472:	e745      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x100>
  }

#endif /* DFSDM1_Filter0 */

  return status;
}
 8002474:	4628      	mov	r0, r5
 8002476:	b003      	add	sp, #12
 8002478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	40007000 	.word	0x40007000

08002484 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002484:	6a03      	ldr	r3, [r0, #32]
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800248c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800248e:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002490:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002492:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002494:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002496:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800249a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800249e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024a0:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024a2:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024a6:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024a8:	4d12      	ldr	r5, [pc, #72]	; (80024f4 <TIM_OC1_SetConfig+0x70>)
 80024aa:	42a8      	cmp	r0, r5
 80024ac:	d006      	beq.n	80024bc <TIM_OC1_SetConfig+0x38>
 80024ae:	4e12      	ldr	r6, [pc, #72]	; (80024f8 <TIM_OC1_SetConfig+0x74>)
 80024b0:	42b0      	cmp	r0, r6
 80024b2:	d003      	beq.n	80024bc <TIM_OC1_SetConfig+0x38>
 80024b4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80024b8:	42b0      	cmp	r0, r6
 80024ba:	d114      	bne.n	80024e6 <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024bc:	68ce      	ldr	r6, [r1, #12]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024be:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024c2:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80024c4:	42a8      	cmp	r0, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80024c6:	f023 0304 	bic.w	r3, r3, #4
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80024ca:	d006      	beq.n	80024da <TIM_OC1_SetConfig+0x56>
 80024cc:	4d0a      	ldr	r5, [pc, #40]	; (80024f8 <TIM_OC1_SetConfig+0x74>)
 80024ce:	42a8      	cmp	r0, r5
 80024d0:	d003      	beq.n	80024da <TIM_OC1_SetConfig+0x56>
 80024d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024d6:	42a8      	cmp	r0, r5
 80024d8:	d105      	bne.n	80024e6 <TIM_OC1_SetConfig+0x62>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024da:	694e      	ldr	r6, [r1, #20]
 80024dc:	698d      	ldr	r5, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024e2:	4335      	orrs	r5, r6
 80024e4:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024e6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024e8:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024ea:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024ec:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ee:	6203      	str	r3, [r0, #32]
 80024f0:	bd70      	pop	{r4, r5, r6, pc}
 80024f2:	bf00      	nop
 80024f4:	40012c00 	.word	0x40012c00
 80024f8:	40014000 	.word	0x40014000

080024fc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024fc:	6a03      	ldr	r3, [r0, #32]
 80024fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002502:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002504:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002506:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002508:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800250a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800250c:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800250e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002512:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002516:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8002518:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800251a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 800251e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002522:	4d0f      	ldr	r5, [pc, #60]	; (8002560 <TIM_OC3_SetConfig+0x64>)
 8002524:	42a8      	cmp	r0, r5
 8002526:	d107      	bne.n	8002538 <TIM_OC3_SetConfig+0x3c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8002528:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800252a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800252e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002532:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002536:	e005      	b.n	8002544 <TIM_OC3_SetConfig+0x48>
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002538:	4d0a      	ldr	r5, [pc, #40]	; (8002564 <TIM_OC3_SetConfig+0x68>)
 800253a:	42a8      	cmp	r0, r5
 800253c:	d002      	beq.n	8002544 <TIM_OC3_SetConfig+0x48>
 800253e:	4d0a      	ldr	r5, [pc, #40]	; (8002568 <TIM_OC3_SetConfig+0x6c>)
 8002540:	42a8      	cmp	r0, r5
 8002542:	d107      	bne.n	8002554 <TIM_OC3_SetConfig+0x58>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8002544:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002546:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 800254a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800254e:	698d      	ldr	r5, [r1, #24]
 8002550:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002554:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002556:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002558:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800255a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800255c:	6203      	str	r3, [r0, #32]
}
 800255e:	bd30      	pop	{r4, r5, pc}
 8002560:	40012c00 	.word	0x40012c00
 8002564:	40014000 	.word	0x40014000
 8002568:	40014400 	.word	0x40014400

0800256c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800256c:	6a03      	ldr	r3, [r0, #32]
 800256e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002572:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002574:	6a02      	ldr	r2, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002576:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002578:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800257a:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800257c:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800257e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002582:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002586:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 800258a:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800258c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8002590:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002594:	4d0a      	ldr	r5, [pc, #40]	; (80025c0 <TIM_OC4_SetConfig+0x54>)
 8002596:	42a8      	cmp	r0, r5
 8002598:	d007      	beq.n	80025aa <TIM_OC4_SetConfig+0x3e>
 800259a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800259e:	42a8      	cmp	r0, r5
 80025a0:	d003      	beq.n	80025aa <TIM_OC4_SetConfig+0x3e>
 80025a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025a6:	42a8      	cmp	r0, r5
 80025a8:	d104      	bne.n	80025b4 <TIM_OC4_SetConfig+0x48>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80025aa:	694d      	ldr	r5, [r1, #20]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025ac:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80025b0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025b4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025b6:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025b8:	684b      	ldr	r3, [r1, #4]
 80025ba:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025bc:	6202      	str	r2, [r0, #32]
 80025be:	bd30      	pop	{r4, r5, pc}
 80025c0:	40012c00 	.word	0x40012c00

080025c4 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80025c4:	6a03      	ldr	r3, [r0, #32]
 80025c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ca:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025cc:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ce:	6842      	ldr	r2, [r0, #4]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80025d0:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80025d2:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025d4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80025d6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80025da:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025de:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80025e0:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80025e2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80025e6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80025ea:	4d0b      	ldr	r5, [pc, #44]	; (8002618 <TIM_OC5_SetConfig+0x54>)
 80025ec:	42a8      	cmp	r0, r5
 80025ee:	d007      	beq.n	8002600 <TIM_OC5_SetConfig+0x3c>
 80025f0:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80025f4:	42a8      	cmp	r0, r5
 80025f6:	d003      	beq.n	8002600 <TIM_OC5_SetConfig+0x3c>
 80025f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025fc:	42a8      	cmp	r0, r5
 80025fe:	d104      	bne.n	800260a <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8002600:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 16);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002602:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8002606:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800260a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800260c:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800260e:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002610:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002612:	6203      	str	r3, [r0, #32]
 8002614:	bd30      	pop	{r4, r5, pc}
 8002616:	bf00      	nop
 8002618:	40012c00 	.word	0x40012c00

0800261c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800261c:	6a03      	ldr	r3, [r0, #32]
 800261e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002622:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002624:	6a02      	ldr	r2, [r0, #32]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002626:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002628:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800262a:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800262c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800262e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002636:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800263a:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800263c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8002640:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002644:	4d0a      	ldr	r5, [pc, #40]	; (8002670 <TIM_OC6_SetConfig+0x54>)
 8002646:	42a8      	cmp	r0, r5
 8002648:	d007      	beq.n	800265a <TIM_OC6_SetConfig+0x3e>
 800264a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800264e:	42a8      	cmp	r0, r5
 8002650:	d003      	beq.n	800265a <TIM_OC6_SetConfig+0x3e>
 8002652:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002656:	42a8      	cmp	r0, r5
 8002658:	d104      	bne.n	8002664 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800265a:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 20);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800265c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8002660:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002664:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002666:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002668:	684b      	ldr	r3, [r1, #4]
 800266a:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800266c:	6202      	str	r2, [r0, #32]
 800266e:	bd30      	pop	{r4, r5, pc}
 8002670:	40012c00 	.word	0x40012c00

08002674 <HAL_TIM_PWM_MspInit>:
 8002674:	4770      	bx	lr

08002676 <HAL_TIM_PeriodElapsedCallback>:
 8002676:	4770      	bx	lr

08002678 <HAL_TIM_OC_DelayElapsedCallback>:
 8002678:	4770      	bx	lr

0800267a <HAL_TIM_IC_CaptureCallback>:
 800267a:	4770      	bx	lr

0800267c <HAL_TIM_PWM_PulseFinishedCallback>:
 800267c:	4770      	bx	lr

0800267e <HAL_TIM_TriggerCallback>:
 800267e:	4770      	bx	lr

08002680 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002680:	6803      	ldr	r3, [r0, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	0791      	lsls	r1, r2, #30
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002686:	b510      	push	{r4, lr}
 8002688:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800268a:	d514      	bpl.n	80026b6 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	0792      	lsls	r2, r2, #30
 8002690:	d511      	bpl.n	80026b6 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002692:	f06f 0202 	mvn.w	r2, #2
 8002696:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002698:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800269a:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800269c:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800269e:	7602      	strb	r2, [r0, #24]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80026a0:	d002      	beq.n	80026a8 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80026a2:	f7ff ffea 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 80026a6:	e004      	b.n	80026b2 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a8:	f7ff ffe6 	bl	8002678 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7ff ffe5 	bl	800267c <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b2:	2300      	movs	r3, #0
 80026b4:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026b6:	6823      	ldr	r3, [r4, #0]
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	0750      	lsls	r0, r2, #29
 80026bc:	d516      	bpl.n	80026ec <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	0751      	lsls	r1, r2, #29
 80026c2:	d513      	bpl.n	80026ec <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026c4:	f06f 0204 	mvn.w	r2, #4
 80026c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80026ca:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026cc:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80026ce:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026d2:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80026d4:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80026d6:	d002      	beq.n	80026de <HAL_TIM_IRQHandler+0x5e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80026d8:	f7ff ffcf 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 80026dc:	e004      	b.n	80026e8 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026de:	f7ff ffcb 	bl	8002678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e2:	4620      	mov	r0, r4
 80026e4:	f7ff ffca 	bl	800267c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e8:	2300      	movs	r3, #0
 80026ea:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	0712      	lsls	r2, r2, #28
 80026f2:	d515      	bpl.n	8002720 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	0710      	lsls	r0, r2, #28
 80026f8:	d512      	bpl.n	8002720 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026fa:	f06f 0208 	mvn.w	r2, #8
 80026fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002700:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002702:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002704:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002706:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002708:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800270a:	d002      	beq.n	8002712 <HAL_TIM_IRQHandler+0x92>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800270c:	f7ff ffb5 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 8002710:	e004      	b.n	800271c <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002712:	f7ff ffb1 	bl	8002678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002716:	4620      	mov	r0, r4
 8002718:	f7ff ffb0 	bl	800267c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271c:	2300      	movs	r3, #0
 800271e:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002720:	6823      	ldr	r3, [r4, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	06d2      	lsls	r2, r2, #27
 8002726:	d516      	bpl.n	8002756 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	06d0      	lsls	r0, r2, #27
 800272c:	d513      	bpl.n	8002756 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800272e:	f06f 0210 	mvn.w	r2, #16
 8002732:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002734:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002736:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002738:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800273c:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800273e:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002740:	d002      	beq.n	8002748 <HAL_TIM_IRQHandler+0xc8>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002742:	f7ff ff9a 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 8002746:	e004      	b.n	8002752 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002748:	f7ff ff96 	bl	8002678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274c:	4620      	mov	r0, r4
 800274e:	f7ff ff95 	bl	800267c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	2300      	movs	r3, #0
 8002754:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	07d1      	lsls	r1, r2, #31
 800275c:	d508      	bpl.n	8002770 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	07d2      	lsls	r2, r2, #31
 8002762:	d505      	bpl.n	8002770 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002764:	f06f 0201 	mvn.w	r2, #1
 8002768:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800276a:	4620      	mov	r0, r4
 800276c:	f7ff ff83 	bl	8002676 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	0610      	lsls	r0, r2, #24
 8002776:	d508      	bpl.n	800278a <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	0611      	lsls	r1, r2, #24
 800277c:	d505      	bpl.n	800278a <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800277e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002782:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002784:	4620      	mov	r0, r4
 8002786:	f000 facc 	bl	8002d22 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	0652      	lsls	r2, r2, #25
 8002790:	d508      	bpl.n	80027a4 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	0650      	lsls	r0, r2, #25
 8002796:	d505      	bpl.n	80027a4 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002798:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800279c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800279e:	4620      	mov	r0, r4
 80027a0:	f7ff ff6d 	bl	800267e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	0691      	lsls	r1, r2, #26
 80027aa:	d50a      	bpl.n	80027c2 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	0692      	lsls	r2, r2, #26
 80027b0:	d507      	bpl.n	80027c2 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027b2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80027b6:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 80027ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 80027be:	f000 baaf 	b.w	8002d20 <HAL_TIMEx_CommutationCallback>
 80027c2:	bd10      	pop	{r4, pc}

080027c4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c4:	4a18      	ldr	r2, [pc, #96]	; (8002828 <TIM_Base_SetConfig+0x64>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 80027c6:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c8:	4290      	cmp	r0, r2
  * @param  TIMx: TIM peripheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027ca:	b510      	push	{r4, lr}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027cc:	d002      	beq.n	80027d4 <TIM_Base_SetConfig+0x10>
 80027ce:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80027d2:	d109      	bne.n	80027e8 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80027d4:	684c      	ldr	r4, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027da:	4290      	cmp	r0, r2
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80027dc:	ea43 0304 	orr.w	r3, r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027e0:	d009      	beq.n	80027f6 <TIM_Base_SetConfig+0x32>
 80027e2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80027e6:	d006      	beq.n	80027f6 <TIM_Base_SetConfig+0x32>
 80027e8:	4a10      	ldr	r2, [pc, #64]	; (800282c <TIM_Base_SetConfig+0x68>)
 80027ea:	4290      	cmp	r0, r2
 80027ec:	d003      	beq.n	80027f6 <TIM_Base_SetConfig+0x32>
 80027ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027f2:	4290      	cmp	r0, r2
 80027f4:	d103      	bne.n	80027fe <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027f6:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027fc:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80027fe:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002800:	688b      	ldr	r3, [r1, #8]
 8002802:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002804:	680b      	ldr	r3, [r1, #0]
 8002806:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002808:	4b07      	ldr	r3, [pc, #28]	; (8002828 <TIM_Base_SetConfig+0x64>)
 800280a:	4298      	cmp	r0, r3
 800280c:	d007      	beq.n	800281e <TIM_Base_SetConfig+0x5a>
 800280e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002812:	4298      	cmp	r0, r3
 8002814:	d003      	beq.n	800281e <TIM_Base_SetConfig+0x5a>
 8002816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800281a:	4298      	cmp	r0, r3
 800281c:	d101      	bne.n	8002822 <TIM_Base_SetConfig+0x5e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800281e:	690b      	ldr	r3, [r1, #16]
 8002820:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002822:	2301      	movs	r3, #1
 8002824:	6143      	str	r3, [r0, #20]
 8002826:	bd10      	pop	{r4, pc}
 8002828:	40012c00 	.word	0x40012c00
 800282c:	40014000 	.word	0x40014000

08002830 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002830:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002832:	4604      	mov	r4, r0
 8002834:	b1a0      	cbz	r0, 8002860 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002836:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800283a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800283e:	b91b      	cbnz	r3, 8002848 <HAL_TIM_Base_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002840:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002844:	f000 ffbe 	bl	80037c4 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002848:	2302      	movs	r3, #2
 800284a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800284e:	6820      	ldr	r0, [r4, #0]
 8002850:	1d21      	adds	r1, r4, #4
 8002852:	f7ff ffb7 	bl	80027c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002856:	2301      	movs	r3, #1
 8002858:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 800285c:	2000      	movs	r0, #0
 800285e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002860:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8002862:	bd10      	pop	{r4, pc}

08002864 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002864:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002866:	4604      	mov	r4, r0
 8002868:	b1a0      	cbz	r0, 8002894 <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 800286a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800286e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002872:	b91b      	cbnz	r3, 800287c <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002874:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002878:	f7ff fefc 	bl	8002674 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800287c:	2302      	movs	r3, #2
 800287e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002882:	6820      	ldr	r0, [r4, #0]
 8002884:	1d21      	adds	r1, r4, #4
 8002886:	f7ff ff9d 	bl	80027c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800288a:	2301      	movs	r3, #1
 800288c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8002890:	2000      	movs	r0, #0
 8002892:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002894:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8002896:	bd10      	pop	{r4, pc}

08002898 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002898:	6a03      	ldr	r3, [r0, #32]
 800289a:	f023 0310 	bic.w	r3, r3, #16
 800289e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028a0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a2:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028a4:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028a6:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80028a8:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028aa:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80028ae:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80028b2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 80028b6:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028b8:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 80028bc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028c0:	4d0f      	ldr	r5, [pc, #60]	; (8002900 <TIM_OC2_SetConfig+0x68>)
 80028c2:	42a8      	cmp	r0, r5
 80028c4:	d107      	bne.n	80028d6 <TIM_OC2_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80028c6:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80028cc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028d4:	e005      	b.n	80028e2 <TIM_OC2_SetConfig+0x4a>

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80028d6:	4d0b      	ldr	r5, [pc, #44]	; (8002904 <TIM_OC2_SetConfig+0x6c>)
 80028d8:	42a8      	cmp	r0, r5
 80028da:	d002      	beq.n	80028e2 <TIM_OC2_SetConfig+0x4a>
 80028dc:	4d0a      	ldr	r5, [pc, #40]	; (8002908 <TIM_OC2_SetConfig+0x70>)
 80028de:	42a8      	cmp	r0, r5
 80028e0:	d107      	bne.n	80028f2 <TIM_OC2_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80028e2:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80028e8:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80028ec:	698d      	ldr	r5, [r1, #24]
 80028ee:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028f2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028f4:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028f6:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028f8:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028fa:	6203      	str	r3, [r0, #32]
}
 80028fc:	bd30      	pop	{r4, r5, pc}
 80028fe:	bf00      	nop
 8002900:	40012c00 	.word	0x40012c00
 8002904:	40014000 	.word	0x40014000
 8002908:	40014400 	.word	0x40014400

0800290c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 800290c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800290e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002912:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 8002914:	4604      	mov	r4, r0
 8002916:	460d      	mov	r5, r1
 8002918:	f04f 0002 	mov.w	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800291c:	d07b      	beq.n	8002a16 <HAL_TIM_PWM_ConfigChannel+0x10a>
 800291e:	2301      	movs	r3, #1

  htim->State = HAL_TIM_STATE_BUSY;

  switch (Channel)
 8002920:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002922:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002926:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  switch (Channel)
 800292a:	d03c      	beq.n	80029a6 <HAL_TIM_PWM_ConfigChannel+0x9a>
 800292c:	d813      	bhi.n	8002956 <HAL_TIM_PWM_ConfigChannel+0x4a>
 800292e:	b34a      	cbz	r2, 8002984 <HAL_TIM_PWM_ConfigChannel+0x78>
 8002930:	2a04      	cmp	r2, #4
 8002932:	d16a      	bne.n	8002a0a <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002934:	6820      	ldr	r0, [r4, #0]
 8002936:	f7ff ffaf 	bl	8002898 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800293a:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800293c:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800293e:	699a      	ldr	r2, [r3, #24]
 8002940:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002944:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002946:	699a      	ldr	r2, [r3, #24]
 8002948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800294c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800294e:	699a      	ldr	r2, [r3, #24]
 8002950:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002954:	e025      	b.n	80029a2 <HAL_TIM_PWM_ConfigChannel+0x96>
  /* Process Locked */
  __HAL_LOCK(htim);

  htim->State = HAL_TIM_STATE_BUSY;

  switch (Channel)
 8002956:	2a10      	cmp	r2, #16
 8002958:	d036      	beq.n	80029c8 <HAL_TIM_PWM_ConfigChannel+0xbc>
 800295a:	2a14      	cmp	r2, #20
 800295c:	d044      	beq.n	80029e8 <HAL_TIM_PWM_ConfigChannel+0xdc>
 800295e:	2a0c      	cmp	r2, #12
 8002960:	d153      	bne.n	8002a0a <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002962:	6820      	ldr	r0, [r4, #0]
 8002964:	f7ff fe02 	bl	800256c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002968:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800296a:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800296c:	69da      	ldr	r2, [r3, #28]
 800296e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002972:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002974:	69da      	ldr	r2, [r3, #28]
 8002976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002982:	e01f      	b.n	80029c4 <HAL_TIM_PWM_ConfigChannel+0xb8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002984:	6820      	ldr	r0, [r4, #0]
 8002986:	f7ff fd7d 	bl	8002484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	f042 0208 	orr.w	r2, r2, #8
 8002992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	f022 0204 	bic.w	r2, r2, #4
 800299a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800299c:	6999      	ldr	r1, [r3, #24]
 800299e:	692a      	ldr	r2, [r5, #16]
 80029a0:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80029a2:	619a      	str	r2, [r3, #24]
    }
    break;
 80029a4:	e031      	b.n	8002a0a <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029a6:	6820      	ldr	r0, [r4, #0]
 80029a8:	f7ff fda8 	bl	80024fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	69da      	ldr	r2, [r3, #28]
 80029b0:	f042 0208 	orr.w	r2, r2, #8
 80029b4:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029b6:	69da      	ldr	r2, [r3, #28]
 80029b8:	f022 0204 	bic.w	r2, r2, #4
 80029bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029be:	69d9      	ldr	r1, [r3, #28]
 80029c0:	692a      	ldr	r2, [r5, #16]
 80029c2:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80029c4:	61da      	str	r2, [r3, #28]
    }
    break;
 80029c6:	e020      	b.n	8002a0a <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80029c8:	6820      	ldr	r0, [r4, #0]
 80029ca:	f7ff fdfb 	bl	80025c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029d2:	f042 0208 	orr.w	r2, r2, #8
 80029d6:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80029d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029da:	f022 0204 	bic.w	r2, r2, #4
 80029de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80029e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80029e2:	692a      	ldr	r2, [r5, #16]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	e00f      	b.n	8002a08 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80029e8:	6820      	ldr	r0, [r4, #0]
 80029ea:	f7ff fe17 	bl	800261c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80029ee:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 80029f0:	6909      	ldr	r1, [r1, #16]

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80029f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80029fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8002a02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a08:	655a      	str	r2, [r3, #84]	; 0x54

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a0a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002a0c:	2000      	movs	r0, #0

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a0e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002a12:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 8002a16:	bd38      	pop	{r3, r4, r5, pc}

08002a18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a18:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8002a1a:	6884      	ldr	r4, [r0, #8]
 8002a1c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8002a20:	4321      	orrs	r1, r4
 8002a22:	430a      	orrs	r2, r1

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002a24:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a28:	6083      	str	r3, [r0, #8]
 8002a2a:	bd10      	pop	{r4, pc}

08002a2c <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a2c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002a30:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8002a32:	b570      	push	{r4, r5, r6, lr}
 8002a34:	4604      	mov	r4, r0
 8002a36:	f04f 0002 	mov.w	r0, #2
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a3a:	f000 80ab 	beq.w	8002b94 <HAL_TIM_ConfigClockSource+0x168>

  htim->State = HAL_TIM_STATE_BUSY;
 8002a3e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a42:	6820      	ldr	r0, [r4, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a44:	2301      	movs	r3, #1
 8002a46:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a4a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a4c:	4b52      	ldr	r3, [pc, #328]	; (8002b98 <HAL_TIM_ConfigClockSource+0x16c>)
 8002a4e:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8002a50:	6083      	str	r3, [r0, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a52:	680b      	ldr	r3, [r1, #0]
 8002a54:	2b40      	cmp	r3, #64	; 0x40
 8002a56:	d074      	beq.n	8002b42 <HAL_TIM_ConfigClockSource+0x116>
 8002a58:	d818      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x60>
 8002a5a:	2b10      	cmp	r3, #16
 8002a5c:	f000 8088 	beq.w	8002b70 <HAL_TIM_ConfigClockSource+0x144>
 8002a60:	d808      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x48>
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f040 8090 	bne.w	8002b88 <HAL_TIM_ConfigClockSource+0x15c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002a68:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002a6e:	f043 0307 	orr.w	r3, r3, #7
 8002a72:	e088      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	f000 8081 	beq.w	8002b7c <HAL_TIM_ConfigClockSource+0x150>
 8002a7a:	2b30      	cmp	r3, #48	; 0x30
 8002a7c:	f040 8084 	bne.w	8002b88 <HAL_TIM_ConfigClockSource+0x15c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002a80:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002a86:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8002a8a:	e07c      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8002a8c:	2b70      	cmp	r3, #112	; 0x70
 8002a8e:	d032      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0xca>
 8002a90:	d81b      	bhi.n	8002aca <HAL_TIM_ConfigClockSource+0x9e>
 8002a92:	2b50      	cmp	r3, #80	; 0x50
 8002a94:	d03e      	beq.n	8002b14 <HAL_TIM_ConfigClockSource+0xe8>
 8002a96:	2b60      	cmp	r3, #96	; 0x60
 8002a98:	d176      	bne.n	8002b88 <HAL_TIM_ConfigClockSource+0x15c>

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a9a:	684d      	ldr	r5, [r1, #4]
 8002a9c:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a9e:	6a01      	ldr	r1, [r0, #32]
 8002aa0:	f021 0110 	bic.w	r1, r1, #16
 8002aa4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aa6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002aa8:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aaa:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8002ab2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 8002ab6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aba:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002abc:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002abe:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002ac4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002ac8:	e05d      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8002aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ace:	d00c      	beq.n	8002aea <HAL_TIM_ConfigClockSource+0xbe>
 8002ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ad4:	d158      	bne.n	8002b88 <HAL_TIM_ConfigClockSource+0x15c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ad6:	68cb      	ldr	r3, [r1, #12]
 8002ad8:	684a      	ldr	r2, [r1, #4]
 8002ada:	6889      	ldr	r1, [r1, #8]
 8002adc:	f7ff ff9c 	bl	8002a18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ae0:	6822      	ldr	r2, [r4, #0]
 8002ae2:	6893      	ldr	r3, [r2, #8]
 8002ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae8:	e012      	b.n	8002b10 <HAL_TIM_ConfigClockSource+0xe4>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002aea:	6883      	ldr	r3, [r0, #8]
 8002aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af0:	f023 0307 	bic.w	r3, r3, #7
 8002af4:	e047      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002af6:	68cb      	ldr	r3, [r1, #12]
 8002af8:	684a      	ldr	r2, [r1, #4]
 8002afa:	6889      	ldr	r1, [r1, #8]
 8002afc:	f7ff ff8c 	bl	8002a18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8002b00:	6822      	ldr	r2, [r4, #0]
 8002b02:	6893      	ldr	r3, [r2, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b08:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b10:	6093      	str	r3, [r2, #8]
    }
    break;
 8002b12:	e039      	b.n	8002b88 <HAL_TIM_ConfigClockSource+0x15c>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b14:	6a03      	ldr	r3, [r0, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b16:	684d      	ldr	r5, [r1, #4]
 8002b18:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b1a:	6a01      	ldr	r1, [r0, #32]
 8002b1c:	f021 0101 	bic.w	r1, r1, #1
 8002b20:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b22:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b24:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b28:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8002b2c:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002b2e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b32:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b34:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002b36:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002b3c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8002b40:	e021      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x15a>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b42:	6a03      	ldr	r3, [r0, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b44:	684d      	ldr	r5, [r1, #4]
 8002b46:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b48:	6a01      	ldr	r1, [r0, #32]
 8002b4a:	f021 0101 	bic.w	r1, r1, #1
 8002b4e:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b50:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b52:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b56:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8002b5a:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002b5c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b60:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b62:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002b64:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002b6a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002b6e:	e00a      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x15a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002b70:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002b76:	f043 0317 	orr.w	r3, r3, #23
 8002b7a:	e004      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x15a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002b7c:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002b82:	f043 0327 	orr.w	r3, r3, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002b86:	6083      	str	r3, [r0, #8]
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b88:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002b8a:	2000      	movs	r0, #0
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002b90:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 8002b94:	bd70      	pop	{r4, r5, r6, pc}
 8002b96:	bf00      	nop
 8002b98:	fffe0088 	.word	0xfffe0088

08002b9c <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b9c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	6a04      	ldr	r4, [r0, #32]
 8002ba2:	408b      	lsls	r3, r1
 8002ba4:	ea24 0303 	bic.w	r3, r4, r3
 8002ba8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002baa:	6a03      	ldr	r3, [r0, #32]
 8002bac:	408a      	lsls	r2, r1
 8002bae:	ea42 0103 	orr.w	r1, r2, r3
 8002bb2:	6201      	str	r1, [r0, #32]
 8002bb4:	bd10      	pop	{r4, pc}
	...

08002bb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bb8:	b510      	push	{r4, lr}
 8002bba:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	6800      	ldr	r0, [r0, #0]
 8002bc0:	f7ff ffec 	bl	8002b9c <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <HAL_TIM_PWM_Start+0x38>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d007      	beq.n	8002bdc <HAL_TIM_PWM_Start+0x24>
 8002bcc:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d003      	beq.n	8002bdc <HAL_TIM_PWM_Start+0x24>
 8002bd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d103      	bne.n	8002be4 <HAL_TIM_PWM_Start+0x2c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002be2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8002bec:	2000      	movs	r0, #0
 8002bee:	bd10      	pop	{r4, pc}
 8002bf0:	40012c00 	.word	0x40012c00

08002bf4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf4:	b510      	push	{r4, lr}
 8002bf6:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	6800      	ldr	r0, [r0, #0]
 8002bfc:	f7ff ffce 	bl	8002b9c <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c00:	6823      	ldr	r3, [r4, #0]
 8002c02:	4a16      	ldr	r2, [pc, #88]	; (8002c5c <HAL_TIM_PWM_Stop+0x68>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d007      	beq.n	8002c18 <HAL_TIM_PWM_Stop+0x24>
 8002c08:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d003      	beq.n	8002c18 <HAL_TIM_PWM_Stop+0x24>
 8002c10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d10d      	bne.n	8002c34 <HAL_TIM_PWM_Stop+0x40>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8002c18:	6a19      	ldr	r1, [r3, #32]
 8002c1a:	f241 1211 	movw	r2, #4369	; 0x1111
 8002c1e:	400a      	ands	r2, r1
 8002c20:	b942      	cbnz	r2, 8002c34 <HAL_TIM_PWM_Stop+0x40>
 8002c22:	6a19      	ldr	r1, [r3, #32]
 8002c24:	f240 4244 	movw	r2, #1092	; 0x444
 8002c28:	400a      	ands	r2, r1
 8002c2a:	b91a      	cbnz	r2, 8002c34 <HAL_TIM_PWM_Stop+0x40>
 8002c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c34:	6a19      	ldr	r1, [r3, #32]
 8002c36:	f241 1211 	movw	r2, #4369	; 0x1111
 8002c3a:	400a      	ands	r2, r1
 8002c3c:	b942      	cbnz	r2, 8002c50 <HAL_TIM_PWM_Stop+0x5c>
 8002c3e:	6a19      	ldr	r1, [r3, #32]
 8002c40:	f240 4244 	movw	r2, #1092	; 0x444
 8002c44:	400a      	ands	r2, r1
 8002c46:	b91a      	cbnz	r2, 8002c50 <HAL_TIM_PWM_Stop+0x5c>
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
}
 8002c56:	2000      	movs	r0, #0
 8002c58:	bd10      	pop	{r4, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40012c00 	.word	0x40012c00

08002c60 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c60:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002c64:	2b01      	cmp	r3, #1
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002c66:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c68:	d018      	beq.n	8002c9c <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c6a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c6c:	4c0c      	ldr	r4, [pc, #48]	; (8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0x40>)

  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c6e:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c70:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c72:	42a2      	cmp	r2, r4
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c74:	bf02      	ittt	eq
 8002c76:	684c      	ldreq	r4, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c78:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c7c:	4323      	orreq	r3, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c7e:	680c      	ldr	r4, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c80:	6889      	ldr	r1, [r1, #8]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c86:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002c88:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c8c:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c8e:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8002c90:	2300      	movs	r3, #0

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c92:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 8002c94:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c9c:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8002c9e:	bd30      	pop	{r4, r5, pc}
 8002ca0:	40012c00 	.word	0x40012c00

08002ca4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002ca4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002ca8:	2b01      	cmp	r3, #1
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8002caa:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002cac:	d034      	beq.n	8002d18 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002cae:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002cb0:	6804      	ldr	r4, [r0, #0]
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002cb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cb6:	688b      	ldr	r3, [r1, #8]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002cbe:	684b      	ldr	r3, [r1, #4]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002cc6:	680b      	ldr	r3, [r1, #0]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002cce:	690b      	ldr	r3, [r1, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002cd6:	694b      	ldr	r3, [r1, #20]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002cdc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	698b      	ldr	r3, [r1, #24]
 8002ce4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002ce8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002cec:	4a0b      	ldr	r2, [pc, #44]	; (8002d1c <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
 8002cee:	4294      	cmp	r4, r2
 8002cf0:	d10c      	bne.n	8002d0c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002cf2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8002cf4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002cf8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002cfc:	69ca      	ldr	r2, [r1, #28]
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d08:	6a0b      	ldr	r3, [r1, #32]
 8002d0a:	4313      	orrs	r3, r2
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d0c:	6463      	str	r3, [r4, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002d14:	4618      	mov	r0, r3
 8002d16:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002d18:	2002      	movs	r0, #2
  htim->Instance->BDTR = tmpbdtr;
  
  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8002d1a:	bd10      	pop	{r4, pc}
 8002d1c:	40012c00 	.word	0x40012c00

08002d20 <HAL_TIMEx_CommutationCallback>:
 8002d20:	4770      	bx	lr

08002d22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d22:	4770      	bx	lr

08002d24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d26:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002d28:	6805      	ldr	r5, [r0, #0]
 8002d2a:	6923      	ldr	r3, [r4, #16]
 8002d2c:	68a2      	ldr	r2, [r4, #8]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d2e:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002d30:	6828      	ldr	r0, [r5, #0]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	6963      	ldr	r3, [r4, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	ea43 0201 	orr.w	r2, r3, r1
 8002d3c:	4b7d      	ldr	r3, [pc, #500]	; (8002f34 <UART_SetConfig+0x210>)
 8002d3e:	4003      	ands	r3, r0
 8002d40:	4313      	orrs	r3, r2
 8002d42:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d44:	686b      	ldr	r3, [r5, #4]
 8002d46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d4a:	68e3      	ldr	r3, [r4, #12]
 8002d4c:	4313      	orrs	r3, r2
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d4e:	4a7a      	ldr	r2, [pc, #488]	; (8002f38 <UART_SetConfig+0x214>)
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d50:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d52:	4295      	cmp	r5, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d54:	bf18      	it	ne
 8002d56:	6a22      	ldrne	r2, [r4, #32]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d58:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d5a:	bf18      	it	ne
 8002d5c:	4313      	orrne	r3, r2
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002d5e:	68aa      	ldr	r2, [r5, #8]
 8002d60:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d68:	4b74      	ldr	r3, [pc, #464]	; (8002f3c <UART_SetConfig+0x218>)
 8002d6a:	429d      	cmp	r5, r3
 8002d6c:	d107      	bne.n	8002d7e <UART_SetConfig+0x5a>
 8002d6e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002d72:	4a73      	ldr	r2, [pc, #460]	; (8002f40 <UART_SetConfig+0x21c>)
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	e009      	b.n	8002d92 <UART_SetConfig+0x6e>
 8002d7e:	4b71      	ldr	r3, [pc, #452]	; (8002f44 <UART_SetConfig+0x220>)
 8002d80:	429d      	cmp	r5, r3
 8002d82:	d10b      	bne.n	8002d9c <UART_SetConfig+0x78>
 8002d84:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002d88:	4a6f      	ldr	r2, [pc, #444]	; (8002f48 <UART_SetConfig+0x224>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	f003 030c 	and.w	r3, r3, #12
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d92:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002d96:	5cd3      	ldrb	r3, [r2, r3]
 8002d98:	d065      	beq.n	8002e66 <UART_SetConfig+0x142>
 8002d9a:	e099      	b.n	8002ed0 <UART_SetConfig+0x1ac>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d9c:	4b66      	ldr	r3, [pc, #408]	; (8002f38 <UART_SetConfig+0x214>)
 8002d9e:	429d      	cmp	r5, r3
 8002da0:	f040 8089 	bne.w	8002eb6 <UART_SetConfig+0x192>
 8002da4:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002da8:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002dac:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8002db0:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8002db4:	d014      	beq.n	8002de0 <UART_SetConfig+0xbc>
 8002db6:	d805      	bhi.n	8002dc4 <UART_SetConfig+0xa0>
 8002db8:	2d00      	cmp	r5, #0
 8002dba:	f040 80b7 	bne.w	8002f2c <UART_SetConfig+0x208>
    tmpreg = 0;

    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8002dbe:	f7ff f937 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
      break;
 8002dc2:	e010      	b.n	8002de6 <UART_SetConfig+0xc2>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dc4:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002dc8:	d007      	beq.n	8002dda <UART_SetConfig+0xb6>
 8002dca:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8002dce:	f040 80ad 	bne.w	8002f2c <UART_SetConfig+0x208>
 8002dd2:	2508      	movs	r5, #8
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
      break;
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 8002dd4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002dd8:	e008      	b.n	8002dec <UART_SetConfig+0xc8>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dda:	2502      	movs	r5, #2
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
      break;
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
 8002ddc:	485b      	ldr	r0, [pc, #364]	; (8002f4c <UART_SetConfig+0x228>)
 8002dde:	e005      	b.n	8002dec <UART_SetConfig+0xc8>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 8002de0:	f7fe fd58 	bl	8001894 <HAL_RCC_GetSysClockFreq>
      break;
 8002de4:	2504      	movs	r5, #4
        ret = HAL_ERROR;
      break;
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 8002de6:	2800      	cmp	r0, #0
 8002de8:	f000 809e 	beq.w	8002f28 <UART_SetConfig+0x204>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8002dec:	6862      	ldr	r2, [r4, #4]
 8002dee:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002df2:	4283      	cmp	r3, r0
 8002df4:	f200 809a 	bhi.w	8002f2c <UART_SetConfig+0x208>
 8002df8:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002dfc:	f200 8096 	bhi.w	8002f2c <UART_SetConfig+0x208>
      {
        ret = HAL_ERROR;
      }
      else
      {
        switch (clocksource)
 8002e00:	2d08      	cmp	r5, #8
 8002e02:	d827      	bhi.n	8002e54 <UART_SetConfig+0x130>
 8002e04:	e8df f005 	tbb	[pc, r5]
 8002e08:	26082605 	.word	0x26082605
 8002e0c:	2626260e 	.word	0x2626260e
 8002e10:	1b          	.byte	0x1b
 8002e11:	00          	.byte	0x00
        {
        case UART_CLOCKSOURCE_PCLK1:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002e12:	f7ff f90d 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 8002e16:	e007      	b.n	8002e28 <UART_SetConfig+0x104>
          break;
        case UART_CLOCKSOURCE_HSI:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002e18:	484d      	ldr	r0, [pc, #308]	; (8002f50 <UART_SetConfig+0x22c>)
 8002e1a:	0855      	lsrs	r5, r2, #1
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	2100      	movs	r1, #0
 8002e20:	1940      	adds	r0, r0, r5
 8002e22:	e011      	b.n	8002e48 <UART_SetConfig+0x124>
          break;
        case UART_CLOCKSOURCE_SYSCLK:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e24:	f7fe fd36 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8002e28:	6862      	ldr	r2, [r4, #4]
 8002e2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e2e:	0856      	lsrs	r6, r2, #1
 8002e30:	2700      	movs	r7, #0
 8002e32:	fbe1 6700 	umlal	r6, r7, r1, r0
 8002e36:	2300      	movs	r3, #0
 8002e38:	4630      	mov	r0, r6
 8002e3a:	4639      	mov	r1, r7
 8002e3c:	e006      	b.n	8002e4c <UART_SetConfig+0x128>
          break;
        case UART_CLOCKSOURCE_LSE:
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002e3e:	0850      	lsrs	r0, r2, #1
 8002e40:	2100      	movs	r1, #0
 8002e42:	2300      	movs	r3, #0
 8002e44:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002e48:	f141 0100 	adc.w	r1, r1, #0
 8002e4c:	f7fd fe02 	bl	8000a54 <__aeabi_uldivmod>
          break;
 8002e50:	2200      	movs	r2, #0
 8002e52:	e000      	b.n	8002e56 <UART_SetConfig+0x132>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
            ret = HAL_ERROR;
 8002e54:	2201      	movs	r2, #1
          break;
        }
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8002e56:	4b3f      	ldr	r3, [pc, #252]	; (8002f54 <UART_SetConfig+0x230>)
 8002e58:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002e5c:	4299      	cmp	r1, r3
 8002e5e:	d865      	bhi.n	8002f2c <UART_SetConfig+0x208>
        {
           huart->Instance->BRR = tmpreg;
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	60d8      	str	r0, [r3, #12]
 8002e64:	e063      	b.n	8002f2e <UART_SetConfig+0x20a>
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d828      	bhi.n	8002ebc <UART_SetConfig+0x198>
 8002e6a:	e8df f003 	tbb	[pc, r3]
 8002e6e:	0805      	.short	0x0805
 8002e70:	2712270b 	.word	0x2712270b
 8002e74:	2727      	.short	0x2727
 8002e76:	1b          	.byte	0x1b
 8002e77:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002e78:	f7ff f8da 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 8002e7c:	e00b      	b.n	8002e96 <UART_SetConfig+0x172>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002e7e:	f7ff f8ef 	bl	8002060 <HAL_RCC_GetPCLK2Freq>
 8002e82:	e008      	b.n	8002e96 <UART_SetConfig+0x172>
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002e84:	6860      	ldr	r0, [r4, #4]
 8002e86:	0842      	lsrs	r2, r0, #1
 8002e88:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 8002e8c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002e90:	e00c      	b.n	8002eac <UART_SetConfig+0x188>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e92:	f7fe fcff 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8002e96:	6863      	ldr	r3, [r4, #4]
 8002e98:	085a      	lsrs	r2, r3, #1
 8002e9a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8002e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea2:	e005      	b.n	8002eb0 <UART_SetConfig+0x18c>
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002ea4:	6860      	ldr	r0, [r4, #4]
 8002ea6:	0843      	lsrs	r3, r0, #1
 8002ea8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002eac:	fbb3 f3f0 	udiv	r3, r3, r0
 8002eb0:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eb2:	2200      	movs	r2, #0
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002eb4:	e004      	b.n	8002ec0 <UART_SetConfig+0x19c>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eb6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002eba:	d137      	bne.n	8002f2c <UART_SetConfig+0x208>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002ebc:	2201      	movs	r2, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
 8002ebe:	2300      	movs	r3, #0
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8002ec0:	f3c3 0042 	ubfx	r0, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002ec4:	6821      	ldr	r1, [r4, #0]
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8002ec6:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 8002eca:	4303      	orrs	r3, r0
 8002ecc:	60cb      	str	r3, [r1, #12]
 8002ece:	e02e      	b.n	8002f2e <UART_SetConfig+0x20a>
  }
  else
  {
    switch (clocksource)
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d82b      	bhi.n	8002f2c <UART_SetConfig+0x208>
 8002ed4:	e8df f003 	tbb	[pc, r3]
 8002ed8:	2a0b0805 	.word	0x2a0b0805
 8002edc:	2a2a2a14 	.word	0x2a2a2a14
 8002ee0:	1e          	.byte	0x1e
 8002ee1:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002ee2:	f7ff f8a5 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 8002ee6:	e00d      	b.n	8002f04 <UART_SetConfig+0x1e0>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002ee8:	f7ff f8ba 	bl	8002060 <HAL_RCC_GetPCLK2Freq>
 8002eec:	e00a      	b.n	8002f04 <UART_SetConfig+0x1e0>
      break;
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002eee:	6861      	ldr	r1, [r4, #4]
 8002ef0:	084a      	lsrs	r2, r1, #1
 8002ef2:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 8002ef6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002efe:	e00f      	b.n	8002f20 <UART_SetConfig+0x1fc>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f00:	f7fe fcc8 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8002f04:	6863      	ldr	r3, [r4, #4]
 8002f06:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002f0a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f0e:	b280      	uxth	r0, r0
 8002f10:	60e8      	str	r0, [r5, #12]
 8002f12:	e007      	b.n	8002f24 <UART_SetConfig+0x200>
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002f14:	6862      	ldr	r2, [r4, #4]
 8002f16:	0853      	lsrs	r3, r2, #1
 8002f18:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f24:	2200      	movs	r2, #0
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
 8002f26:	e002      	b.n	8002f2e <UART_SetConfig+0x20a>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	e000      	b.n	8002f2e <UART_SetConfig+0x20a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002f2c:	2201      	movs	r2, #1
    }
  }

  return ret;

}
 8002f2e:	4610      	mov	r0, r2
 8002f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f32:	bf00      	nop
 8002f34:	efff69f3 	.word	0xefff69f3
 8002f38:	40008000 	.word	0x40008000
 8002f3c:	40013800 	.word	0x40013800
 8002f40:	080049f4 	.word	0x080049f4
 8002f44:	40004400 	.word	0x40004400
 8002f48:	080049f8 	.word	0x080049f8
 8002f4c:	00f42400 	.word	0x00f42400
 8002f50:	f4240000 	.word	0xf4240000
 8002f54:	000ffcff 	.word	0x000ffcff

08002f58 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f5a:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f5c:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f5e:	d506      	bpl.n	8002f6e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f60:	6804      	ldr	r4, [r0, #0]
 8002f62:	6862      	ldr	r2, [r4, #4]
 8002f64:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002f68:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f6e:	079c      	lsls	r4, r3, #30
 8002f70:	d506      	bpl.n	8002f80 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f72:	6804      	ldr	r4, [r0, #0]
 8002f74:	6862      	ldr	r2, [r4, #4]
 8002f76:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002f7a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f80:	0759      	lsls	r1, r3, #29
 8002f82:	d506      	bpl.n	8002f92 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f84:	6804      	ldr	r4, [r0, #0]
 8002f86:	6862      	ldr	r2, [r4, #4]
 8002f88:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002f8c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f92:	071a      	lsls	r2, r3, #28
 8002f94:	d506      	bpl.n	8002fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f96:	6804      	ldr	r4, [r0, #0]
 8002f98:	6862      	ldr	r2, [r4, #4]
 8002f9a:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002f9e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fa4:	06dc      	lsls	r4, r3, #27
 8002fa6:	d506      	bpl.n	8002fb6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fa8:	6804      	ldr	r4, [r0, #0]
 8002faa:	68a2      	ldr	r2, [r4, #8]
 8002fac:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002fb0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fb6:	0699      	lsls	r1, r3, #26
 8002fb8:	d506      	bpl.n	8002fc8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fba:	6804      	ldr	r4, [r0, #0]
 8002fbc:	68a2      	ldr	r2, [r4, #8]
 8002fbe:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002fc2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fc8:	065a      	lsls	r2, r3, #25
 8002fca:	d50f      	bpl.n	8002fec <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fcc:	6801      	ldr	r1, [r0, #0]
 8002fce:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002fd0:	684a      	ldr	r2, [r1, #4]
 8002fd2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002fd6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fd8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fdc:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fde:	d105      	bne.n	8002fec <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fe0:	684a      	ldr	r2, [r1, #4]
 8002fe2:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 8002fe6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002fe8:	4322      	orrs	r2, r4
 8002fea:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fec:	061b      	lsls	r3, r3, #24
 8002fee:	d506      	bpl.n	8002ffe <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ff0:	6801      	ldr	r1, [r0, #0]
 8002ff2:	684b      	ldr	r3, [r1, #4]
 8002ff4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002ff8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	604b      	str	r3, [r1, #4]
 8002ffe:	bd10      	pop	{r4, pc}

08003000 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003004:	9d06      	ldr	r5, [sp, #24]
 8003006:	4604      	mov	r4, r0
 8003008:	460f      	mov	r7, r1
 800300a:	4616      	mov	r6, r2
 800300c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800300e:	6821      	ldr	r1, [r4, #0]
 8003010:	69ca      	ldr	r2, [r1, #28]
 8003012:	ea37 0302 	bics.w	r3, r7, r2
 8003016:	bf0c      	ite	eq
 8003018:	2201      	moveq	r2, #1
 800301a:	2200      	movne	r2, #0
 800301c:	42b2      	cmp	r2, r6
 800301e:	d11d      	bne.n	800305c <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003020:	1c6b      	adds	r3, r5, #1
 8003022:	d0f5      	beq.n	8003010 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003024:	b99d      	cbnz	r5, 800304e <UART_WaitOnFlagUntilTimeout+0x4e>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800302e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8003038:	2320      	movs	r3, #32
 800303a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800303e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003042:	2300      	movs	r3, #0
 8003044:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8003048:	2003      	movs	r0, #3
 800304a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 800304e:	f7fd feb5 	bl	8000dbc <HAL_GetTick>
 8003052:	ebc8 0000 	rsb	r0, r8, r0
 8003056:	4285      	cmp	r5, r0
 8003058:	d2d9      	bcs.n	800300e <UART_WaitOnFlagUntilTimeout+0xe>
 800305a:	e7e4      	b.n	8003026 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800305c:	2000      	movs	r0, #0
}
 800305e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003062 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003064:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003066:	2600      	movs	r6, #0
 8003068:	66c6      	str	r6, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800306a:	f7fd fea7 	bl	8000dbc <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	071a      	lsls	r2, r3, #28

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003074:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003076:	d404      	bmi.n	8003082 <UART_CheckIdleState+0x20>
      /* Timeout occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	075b      	lsls	r3, r3, #29
 800307e:	d51a      	bpl.n	80030b6 <UART_CheckIdleState+0x54>
 8003080:	e00d      	b.n	800309e <UART_CheckIdleState+0x3c>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003082:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	4632      	mov	r2, r6
 800308a:	4603      	mov	r3, r0
 800308c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003090:	4620      	mov	r0, r4
 8003092:	f7ff ffb5 	bl	8003000 <UART_WaitOnFlagUntilTimeout>
 8003096:	2800      	cmp	r0, #0
 8003098:	d0ee      	beq.n	8003078 <UART_CheckIdleState+0x16>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800309a:	2003      	movs	r0, #3
 800309c:	e013      	b.n	80030c6 <UART_CheckIdleState+0x64>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800309e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	2200      	movs	r2, #0
 80030a6:	462b      	mov	r3, r5
 80030a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030ac:	4620      	mov	r0, r4
 80030ae:	f7ff ffa7 	bl	8003000 <UART_WaitOnFlagUntilTimeout>
 80030b2:	2800      	cmp	r0, #0
 80030b4:	d1f1      	bne.n	800309a <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80030b6:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030b8:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80030ba:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030be:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 80030c2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 80030c6:	b002      	add	sp, #8
 80030c8:	bd70      	pop	{r4, r5, r6, pc}

080030ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030ca:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 80030cc:	4604      	mov	r4, r0
 80030ce:	b360      	cbz	r0, 800312a <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80030d0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80030d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030d8:	b91b      	cbnz	r3, 80030e2 <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030da:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030de:	f000 fba9 	bl	8003834 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80030e2:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e4:	2324      	movs	r3, #36	; 0x24
 80030e6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80030ea:	6813      	ldr	r3, [r2, #0]
 80030ec:	f023 0301 	bic.w	r3, r3, #1
 80030f0:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030f2:	4620      	mov	r0, r4
 80030f4:	f7ff fe16 	bl	8002d24 <UART_SetConfig>
 80030f8:	2801      	cmp	r0, #1
 80030fa:	d016      	beq.n	800312a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030fe:	b113      	cbz	r3, 8003106 <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 8003100:	4620      	mov	r0, r4
 8003102:	f7ff ff29 	bl	8002f58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800310e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003116:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800311e:	4620      	mov	r0, r4
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003120:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8003122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003126:	f7ff bf9c 	b.w	8003062 <UART_CheckIdleState>
}
 800312a:	2001      	movs	r0, #1
 800312c:	bd10      	pop	{r4, pc}

0800312e <GPIO_SetBits>:
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 800312e:	2201      	movs	r2, #1
 8003130:	f7fe bb2a 	b.w	8001788 <HAL_GPIO_WritePin>

08003134 <GPIO_ResetBits>:
}

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8003134:	2200      	movs	r2, #0
 8003136:	f7fe bb27 	b.w	8001788 <HAL_GPIO_WritePin>
	...

0800313c <hd44780_wr_hi_nibble>:
}

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 800313c:	b510      	push	{r4, lr}
 800313e:	4604      	mov	r4, r0
	if (data & 0x10) {
 8003140:	06e2      	lsls	r2, r4, #27
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8003142:	f04f 0110 	mov.w	r1, #16
 8003146:	481a      	ldr	r0, [pc, #104]	; (80031b0 <hd44780_wr_hi_nibble+0x74>)
}

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
	if (data & 0x10) {
 8003148:	d502      	bpl.n	8003150 <hd44780_wr_hi_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800314a:	f7ff fff0 	bl	800312e <GPIO_SetBits>
 800314e:	e001      	b.n	8003154 <hd44780_wr_hi_nibble+0x18>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8003150:	f7ff fff0 	bl	8003134 <GPIO_ResetBits>
	}
	if (data & 0x20) {
 8003154:	06a3      	lsls	r3, r4, #26
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8003156:	f04f 0120 	mov.w	r1, #32
 800315a:	4815      	ldr	r0, [pc, #84]	; (80031b0 <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x10) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	}
	if (data & 0x20) {
 800315c:	d502      	bpl.n	8003164 <hd44780_wr_hi_nibble+0x28>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 800315e:	f7ff ffe6 	bl	800312e <GPIO_SetBits>
 8003162:	e001      	b.n	8003168 <hd44780_wr_hi_nibble+0x2c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8003164:	f7ff ffe6 	bl	8003134 <GPIO_ResetBits>
	}
	if (data & 0x40) {
 8003168:	0662      	lsls	r2, r4, #25
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800316a:	f04f 0140 	mov.w	r1, #64	; 0x40
 800316e:	4810      	ldr	r0, [pc, #64]	; (80031b0 <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x20) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	}
	if (data & 0x40) {
 8003170:	d502      	bpl.n	8003178 <hd44780_wr_hi_nibble+0x3c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8003172:	f7ff ffdc 	bl	800312e <GPIO_SetBits>
 8003176:	e001      	b.n	800317c <hd44780_wr_hi_nibble+0x40>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8003178:	f7ff ffdc 	bl	8003134 <GPIO_ResetBits>
	}
	if (data & 0x80) {
 800317c:	0623      	lsls	r3, r4, #24
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 800317e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8003182:	480b      	ldr	r0, [pc, #44]	; (80031b0 <hd44780_wr_hi_nibble+0x74>)
	if (data & 0x40) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	}
	if (data & 0x80) {
 8003184:	d502      	bpl.n	800318c <hd44780_wr_hi_nibble+0x50>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8003186:	f7ff ffd2 	bl	800312e <GPIO_SetBits>
 800318a:	e001      	b.n	8003190 <hd44780_wr_hi_nibble+0x54>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 800318c:	f7ff ffd2 	bl	8003134 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8003190:	2201      	movs	r2, #1
 8003192:	2102      	movs	r1, #2
 8003194:	4806      	ldr	r0, [pc, #24]	; (80031b0 <hd44780_wr_hi_nibble+0x74>)
 8003196:	f7fe faf7 	bl	8001788 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 800319a:	2002      	movs	r0, #2
 800319c:	f7fd fe14 	bl	8000dc8 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 80031a0:	2200      	movs	r2, #0
 80031a2:	2102      	movs	r1, #2
 80031a4:	4802      	ldr	r0, [pc, #8]	; (80031b0 <hd44780_wr_hi_nibble+0x74>)
}
 80031a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* wait */
	hd44780_EN_high_delay()
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 80031aa:	f7fe baed 	b.w	8001788 <HAL_GPIO_WritePin>
 80031ae:	bf00      	nop
 80031b0:	48000400 	.word	0x48000400

080031b4 <hd44780_wr_lo_nibble>:
}

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 80031b4:	b510      	push	{r4, lr}
 80031b6:	4604      	mov	r4, r0
	if (data & 0x01) {
 80031b8:	07e2      	lsls	r2, r4, #31
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80031ba:	f04f 0110 	mov.w	r1, #16
 80031be:	481a      	ldr	r0, [pc, #104]	; (8003228 <hd44780_wr_lo_nibble+0x74>)
}

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
	if (data & 0x01) {
 80031c0:	d502      	bpl.n	80031c8 <hd44780_wr_lo_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80031c2:	f7ff ffb4 	bl	800312e <GPIO_SetBits>
 80031c6:	e001      	b.n	80031cc <hd44780_wr_lo_nibble+0x18>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80031c8:	f7ff ffb4 	bl	8003134 <GPIO_ResetBits>
	}
	if (data & 0x02) {
 80031cc:	07a3      	lsls	r3, r4, #30
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80031ce:	f04f 0120 	mov.w	r1, #32
 80031d2:	4815      	ldr	r0, [pc, #84]	; (8003228 <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x01) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
	}
	if (data & 0x02) {
 80031d4:	d502      	bpl.n	80031dc <hd44780_wr_lo_nibble+0x28>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80031d6:	f7ff ffaa 	bl	800312e <GPIO_SetBits>
 80031da:	e001      	b.n	80031e0 <hd44780_wr_lo_nibble+0x2c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80031dc:	f7ff ffaa 	bl	8003134 <GPIO_ResetBits>
	}
	if (data & 0x04) {
 80031e0:	0762      	lsls	r2, r4, #29
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80031e2:	f04f 0140 	mov.w	r1, #64	; 0x40
 80031e6:	4810      	ldr	r0, [pc, #64]	; (8003228 <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x02) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
	}
	if (data & 0x04) {
 80031e8:	d502      	bpl.n	80031f0 <hd44780_wr_lo_nibble+0x3c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80031ea:	f7ff ffa0 	bl	800312e <GPIO_SetBits>
 80031ee:	e001      	b.n	80031f4 <hd44780_wr_lo_nibble+0x40>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80031f0:	f7ff ffa0 	bl	8003134 <GPIO_ResetBits>
	}
	if (data & 0x08) {
 80031f4:	0723      	lsls	r3, r4, #28
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80031f6:	f04f 0180 	mov.w	r1, #128	; 0x80
 80031fa:	480b      	ldr	r0, [pc, #44]	; (8003228 <hd44780_wr_lo_nibble+0x74>)
	if (data & 0x04) {
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
	}
	if (data & 0x08) {
 80031fc:	d502      	bpl.n	8003204 <hd44780_wr_lo_nibble+0x50>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80031fe:	f7ff ff96 	bl	800312e <GPIO_SetBits>
 8003202:	e001      	b.n	8003208 <hd44780_wr_lo_nibble+0x54>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8003204:	f7ff ff96 	bl	8003134 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8003208:	2201      	movs	r2, #1
 800320a:	2102      	movs	r1, #2
 800320c:	4806      	ldr	r0, [pc, #24]	; (8003228 <hd44780_wr_lo_nibble+0x74>)
 800320e:	f7fe fabb 	bl	8001788 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 8003212:	2002      	movs	r0, #2
 8003214:	f7fd fdd8 	bl	8000dc8 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8003218:	2200      	movs	r2, #0
 800321a:	2102      	movs	r1, #2
 800321c:	4802      	ldr	r0, [pc, #8]	; (8003228 <hd44780_wr_lo_nibble+0x74>)
}
 800321e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* wait */
	hd44780_EN_high_delay()
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8003222:	f7fe bab1 	b.w	8001788 <HAL_GPIO_WritePin>
 8003226:	bf00      	nop
 8003228:	48000400 	.word	0x48000400

0800322c <hd44780_write>:
}

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 800322c:	b510      	push	{r4, lr}
 800322e:	4604      	mov	r4, r0
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 8003230:	f7ff ff84 	bl	800313c <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 8003234:	4620      	mov	r0, r4
}
 8003236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* 4bit bus version */
void hd44780_write(unsigned char data) {
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
	hd44780_wr_lo_nibble(data);
 800323a:	f7ff bfbb 	b.w	80031b4 <hd44780_wr_lo_nibble>
	...

08003240 <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 8003240:	b510      	push	{r4, lr}
	hd44780_RS_Off();
 8003242:	2200      	movs	r2, #0
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 8003244:	4604      	mov	r4, r0
	hd44780_RS_Off();
 8003246:	2101      	movs	r1, #1
 8003248:	4803      	ldr	r0, [pc, #12]	; (8003258 <hd44780_wr_cmd+0x18>)
 800324a:	f7fe fa9d 	bl	8001788 <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 800324e:	4620      	mov	r0, r4
}
 8003250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
	hd44780_RS_Off();
	hd44780_write(cmd);
 8003254:	f7ff bfea 	b.w	800322c <hd44780_write>
 8003258:	48000400 	.word	0x48000400

0800325c <hd44780_wr_data>:
}

void hd44780_wr_data(unsigned char data) {
 800325c:	b510      	push	{r4, lr}
	hd44780_RS_On();
 800325e:	2201      	movs	r2, #1
void hd44780_wr_cmd(unsigned char cmd) {
	hd44780_RS_Off();
	hd44780_write(cmd);
}

void hd44780_wr_data(unsigned char data) {
 8003260:	4604      	mov	r4, r0
	hd44780_RS_On();
 8003262:	4611      	mov	r1, r2
 8003264:	4803      	ldr	r0, [pc, #12]	; (8003274 <hd44780_wr_data+0x18>)
 8003266:	f7fe fa8f 	bl	8001788 <HAL_GPIO_WritePin>
	hd44780_write(data);
 800326a:	4620      	mov	r0, r4
}
 800326c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hd44780_write(cmd);
}

void hd44780_wr_data(unsigned char data) {
	hd44780_RS_On();
	hd44780_write(data);
 8003270:	f7ff bfdc 	b.w	800322c <hd44780_write>
 8003274:	48000400 	.word	0x48000400

08003278 <HD44780_Init>:
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8003278:	4b29      	ldr	r3, [pc, #164]	; (8003320 <HD44780_Init+0xa8>)
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 800327a:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 800327c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 800327e:	4d29      	ldr	r5, [pc, #164]	; (8003324 <HD44780_Init+0xac>)
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8003280:	f042 0202 	orr.w	r2, r2, #2
 8003284:	64da      	str	r2, [r3, #76]	; 0x4c
 8003286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 8003288:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	9300      	str	r3, [sp, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8003290:	2401      	movs	r4, #1
void HD44780_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8003292:	9b00      	ldr	r3, [sp, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8003294:	9402      	str	r4, [sp, #8]
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 8003296:	23f0      	movs	r3, #240	; 0xf0
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8003298:	2603      	movs	r6, #3

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 800329a:	a901      	add	r1, sp, #4
 800329c:	4628      	mov	r0, r5
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 800329e:	9301      	str	r3, [sp, #4]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80032a0:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80032a2:	9604      	str	r6, [sp, #16]

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 80032a4:	f7fe f9b4 	bl	8001610 <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 80032a8:	230b      	movs	r3, #11
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 80032aa:	a901      	add	r1, sp, #4
 80032ac:	4628      	mov	r0, r5

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 80032ae:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80032b0:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80032b2:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80032b4:	9604      	str	r6, [sp, #16]

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 80032b6:	f7fe f9ab 	bl	8001610 <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 80032ba:	4628      	mov	r0, r5
 80032bc:	2200      	movs	r2, #0
 80032be:	2102      	movs	r1, #2
 80032c0:	f7fe fa62 	bl	8001788 <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 80032c4:	4621      	mov	r1, r4
 80032c6:	4628      	mov	r0, r5
 80032c8:	2200      	movs	r2, #0
 80032ca:	f7fe fa5d 	bl	8001788 <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 80032ce:	2200      	movs	r2, #0
 80032d0:	2108      	movs	r1, #8
 80032d2:	4628      	mov	r0, r5
 80032d4:	f7fe fa58 	bl	8001788 <HAL_GPIO_WritePin>

	/* wait initial delay for LCD to settle */
	//HAL_Delay(100);		//added as nothing here and spec'd as 100ms after power-on. R. Hofer
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
 80032d8:	2010      	movs	r0, #16
 80032da:	f7fd fd75 	bl	8000dc8 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80032de:	2030      	movs	r0, #48	; 0x30
 80032e0:	f7ff ff2c 	bl	800313c <hd44780_wr_hi_nibble>
	hd44780_init_delay2();
 80032e4:	2005      	movs	r0, #5
 80032e6:	f7fd fd6f 	bl	8000dc8 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80032ea:	2030      	movs	r0, #48	; 0x30
 80032ec:	f7ff ff26 	bl	800313c <hd44780_wr_hi_nibble>
	hd44780_init_delay3();
 80032f0:	4620      	mov	r0, r4
 80032f2:	f7fd fd69 	bl	8000dc8 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80032f6:	2030      	movs	r0, #48	; 0x30
 80032f8:	f7ff ff20 	bl	800313c <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 80032fc:	2020      	movs	r0, #32
 80032fe:	f7ff ff1d 	bl	800313c <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 8003302:	2028      	movs	r0, #40	; 0x28
 8003304:	f7ff ff9c 	bl	8003240 <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 8003308:	200c      	movs	r0, #12
 800330a:	f7ff ff99 	bl	8003240 <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 800330e:	4620      	mov	r0, r4
 8003310:	f7ff ff96 	bl	8003240 <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 8003314:	2006      	movs	r0, #6
 8003316:	f7ff ff93 	bl	8003240 <hd44780_wr_cmd>

}
 800331a:	b006      	add	sp, #24
 800331c:	bd70      	pop	{r4, r5, r6, pc}
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
 8003324:	48000400 	.word	0x48000400

08003328 <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 8003328:	b513      	push	{r0, r1, r4, lr}
	__IO unsigned int i = 0;
 800332a:	2300      	movs	r3, #0

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 800332c:	4604      	mov	r4, r0
	__IO unsigned int i = 0;
 800332e:	9301      	str	r3, [sp, #4]

	do {
		HD44780_PutChar(str[i]);
 8003330:	9b01      	ldr	r3, [sp, #4]
 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
	hd44780_wr_data(c & 0xff);
 8003332:	5ce0      	ldrb	r0, [r4, r3]
 8003334:	f7ff ff92 	bl	800325c <hd44780_wr_data>
void HD44780_PutStr(char *str) {
	__IO unsigned int i = 0;

	do {
		HD44780_PutChar(str[i]);
		i++;
 8003338:	9b01      	ldr	r3, [sp, #4]
 800333a:	3301      	adds	r3, #1
 800333c:	9301      	str	r3, [sp, #4]
	} while (str[i] != '\0');
 800333e:	9b01      	ldr	r3, [sp, #4]
 8003340:	5ce3      	ldrb	r3, [r4, r3]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f4      	bne.n	8003330 <HD44780_PutStr+0x8>
}
 8003346:	b002      	add	sp, #8
 8003348:	bd10      	pop	{r4, pc}

0800334a <HD44780_ClrScr>:

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_ClrScr(void) {
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 800334a:	2001      	movs	r0, #1
 800334c:	f7ff bf78 	b.w	8003240 <hd44780_wr_cmd>

08003350 <setRGBColorForTim1Ch1to3>:
int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void setRGBColorForTim1Ch1to3(uint8_t red, uint8_t blue, uint8_t green){
 8003350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8003352:	4c19      	ldr	r4, [pc, #100]	; (80033b8 <setRGBColorForTim1Ch1to3+0x68>)
int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void setRGBColorForTim1Ch1to3(uint8_t red, uint8_t blue, uint8_t green){
 8003354:	4607      	mov	r7, r0
 8003356:	460d      	mov	r5, r1
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8003358:	4620      	mov	r0, r4
 800335a:	2100      	movs	r1, #0
int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void setRGBColorForTim1Ch1to3(uint8_t red, uint8_t blue, uint8_t green){
 800335c:	4616      	mov	r6, r2
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800335e:	f7ff fc49 	bl	8002bf4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8003362:	2104      	movs	r1, #4
 8003364:	4620      	mov	r0, r4
 8003366:	f7ff fc45 	bl	8002bf4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800336a:	2108      	movs	r1, #8
 800336c:	4620      	mov	r0, r4
 800336e:	f7ff fc41 	bl	8002bf4 <HAL_TIM_PWM_Stop>

	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, map(green, 0, 255, 9090, 0));
 8003372:	4812      	ldr	r0, [pc, #72]	; (80033bc <setRGBColorForTim1Ch1to3+0x6c>)
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	f242 3282 	movw	r2, #9090	; 0x2382
 800337a:	21ff      	movs	r1, #255	; 0xff
 800337c:	4346      	muls	r6, r0
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, map(blue, 0, 255, 9090, 0));
 800337e:	4345      	muls	r5, r0
void setRGBColorForTim1Ch1to3(uint8_t red, uint8_t blue, uint8_t green){
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);

	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, map(green, 0, 255, 9090, 0));
 8003380:	fb96 f6f1 	sdiv	r6, r6, r1
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, map(blue, 0, 255, 9090, 0));
 8003384:	fb95 f5f1 	sdiv	r5, r5, r1
void setRGBColorForTim1Ch1to3(uint8_t red, uint8_t blue, uint8_t green){
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);

	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, map(green, 0, 255, 9090, 0));
 8003388:	4416      	add	r6, r2
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, map(blue, 0, 255, 9090, 0));
 800338a:	4415      	add	r5, r2
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, map(red, 0, 255, 9090, 0));
 800338c:	4378      	muls	r0, r7
 800338e:	fb90 f0f1 	sdiv	r0, r0, r1
 8003392:	4410      	add	r0, r2
void setRGBColorForTim1Ch1to3(uint8_t red, uint8_t blue, uint8_t green){
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);

	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, map(green, 0, 255, 9090, 0));
 8003394:	635e      	str	r6, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, map(blue, 0, 255, 9090, 0));
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, map(red, 0, 255, 9090, 0));

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003396:	2100      	movs	r1, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);

	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, map(green, 0, 255, 9090, 0));
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, map(blue, 0, 255, 9090, 0));
 8003398:	639d      	str	r5, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, map(red, 0, 255, 9090, 0));
 800339a:	63d8      	str	r0, [r3, #60]	; 0x3c

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800339c:	4620      	mov	r0, r4
 800339e:	f7ff fc0b 	bl	8002bb8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80033a2:	2104      	movs	r1, #4
 80033a4:	4620      	mov	r0, r4
 80033a6:	f7ff fc07 	bl	8002bb8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80033aa:	4620      	mov	r0, r4
 80033ac:	2108      	movs	r1, #8
}
 80033ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, map(blue, 0, 255, 9090, 0));
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, map(red, 0, 255, 9090, 0));

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80033b2:	f7ff bc01 	b.w	8002bb8 <HAL_TIM_PWM_Start>
 80033b6:	bf00      	nop
 80033b8:	200000fc 	.word	0x200000fc
 80033bc:	ffffdc7e 	.word	0xffffdc7e

080033c0 <SystemClock_Config>:
}

/** System Clock Configuration
 */
void SystemClock_Config(void)
{
 80033c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033c2:	b0ad      	sub	sp, #180	; 0xb4

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80033c4:	2300      	movs	r3, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80033c6:	2401      	movs	r4, #1
	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033c8:	2502      	movs	r5, #2
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80033ca:	2610      	movs	r6, #16
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80033cc:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
	RCC_OscInitStruct.PLL.PLLM = 1;
	RCC_OscInitStruct.PLL.PLLN = 16;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80033ce:	2707      	movs	r7, #7
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80033d0:	2360      	movs	r3, #96	; 0x60
	RCC_OscInitStruct.PLL.PLLM = 1;
	RCC_OscInitStruct.PLL.PLLN = 16;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033d2:	a806      	add	r0, sp, #24
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80033d4:	9606      	str	r6, [sp, #24]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80033d6:	940c      	str	r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80033d8:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033da:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80033dc:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 80033de:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 16;
 80033e0:	9613      	str	r6, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80033e2:	9714      	str	r7, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80033e4:	9515      	str	r5, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80033e6:	9516      	str	r5, [sp, #88]	; 0x58
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033e8:	f7fe faf2 	bl	80019d0 <HAL_RCC_OscConfig>
 80033ec:	b100      	cbz	r0, 80033f0 <SystemClock_Config+0x30>
 80033ee:	e7fe      	b.n	80033ee <SystemClock_Config+0x2e>
		Error_Handler();
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033f0:	230f      	movs	r3, #15
 80033f2:	9301      	str	r3, [sp, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033f4:	2303      	movs	r3, #3
 80033f6:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033f8:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80033fa:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80033fc:	f44f 63e0 	mov.w	r3, #1792	; 0x700

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003400:	4621      	mov	r1, r4
 8003402:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8003404:	9305      	str	r3, [sp, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003406:	f7fe fd55 	bl	8001eb4 <HAL_RCC_ClockConfig>
 800340a:	b100      	cbz	r0, 800340e <SystemClock_Config+0x4e>
 800340c:	e7fe      	b.n	800340c <SystemClock_Config+0x4c>
	{
		Error_Handler();
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800340e:	f244 0302 	movw	r3, #16386	; 0x4002
 8003412:	9317      	str	r3, [sp, #92]	; 0x5c
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003414:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	{
		Error_Handler();
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003418:	9020      	str	r0, [sp, #128]	; 0x80
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800341a:	9329      	str	r3, [sp, #164]	; 0xa4
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800341c:	a817      	add	r0, sp, #92	; 0x5c
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800341e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003422:	9418      	str	r4, [sp, #96]	; 0x60
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003424:	9419      	str	r4, [sp, #100]	; 0x64
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003426:	961a      	str	r6, [sp, #104]	; 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003428:	971b      	str	r7, [sp, #108]	; 0x6c
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800342a:	951c      	str	r5, [sp, #112]	; 0x70
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800342c:	951d      	str	r5, [sp, #116]	; 0x74
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800342e:	931e      	str	r3, [sp, #120]	; 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003430:	f7fe fee6 	bl	8002200 <HAL_RCCEx_PeriphCLKConfig>
 8003434:	b100      	cbz	r0, 8003438 <SystemClock_Config+0x78>
 8003436:	e7fe      	b.n	8003436 <SystemClock_Config+0x76>
		Error_Handler();
	}

	/**Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003438:	f44f 7000 	mov.w	r0, #512	; 0x200
 800343c:	f7fe f9b2 	bl	80017a4 <HAL_PWREx_ControlVoltageScaling>
 8003440:	4604      	mov	r4, r0
 8003442:	b100      	cbz	r0, 8003446 <SystemClock_Config+0x86>
 8003444:	e7fe      	b.n	8003444 <SystemClock_Config+0x84>
		Error_Handler();
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003446:	f7fe fded 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 800344a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800344e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003452:	f7fe f8b5 	bl	80015c0 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003456:	2004      	movs	r0, #4
 8003458:	f7fe f8c8 	bl	80015ec <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800345c:	4622      	mov	r2, r4
 800345e:	4621      	mov	r1, r4
 8003460:	f04f 30ff 	mov.w	r0, #4294967295
 8003464:	f7fe f86c 	bl	8001540 <HAL_NVIC_SetPriority>
}
 8003468:	b02d      	add	sp, #180	; 0xb4
 800346a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800346c:	0000      	movs	r0, r0
	...

08003470 <main>:
}

/* USER CODE END 0 */

int main(void)
{
 8003470:	b530      	push	{r4, r5, lr}
 8003472:	b09d      	sub	sp, #116	; 0x74
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003474:	f7fd fc8e 	bl	8000d94 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8003478:	f7ff ffa2 	bl	80033c0 <SystemClock_Config>
 */
static void MX_GPIO_Init(void)
{

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800347c:	4b8e      	ldr	r3, [pc, #568]	; (80036b8 <main+0x248>)

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

	huart2.Instance = USART2;
 800347e:	488f      	ldr	r0, [pc, #572]	; (80036bc <main+0x24c>)
 */
static void MX_GPIO_Init(void)
{

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003480:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003482:	f042 0204 	orr.w	r2, r2, #4
 8003486:	64da      	str	r2, [r3, #76]	; 0x4c
 8003488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800348a:	f002 0204 	and.w	r2, r2, #4
 800348e:	9201      	str	r2, [sp, #4]
 8003490:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003492:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003494:	f042 0201 	orr.w	r2, r2, #1
 8003498:	64da      	str	r2, [r3, #76]	; 0x4c
 800349a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	9302      	str	r3, [sp, #8]
 80034a2:	9b02      	ldr	r3, [sp, #8]
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

	huart2.Instance = USART2;
	huart2.Init.BaudRate = 9600;
 80034a4:	4b86      	ldr	r3, [pc, #536]	; (80036c0 <main+0x250>)
 80034a6:	f44f 5416 	mov.w	r4, #9600	; 0x2580
 80034aa:	e880 0018 	stmia.w	r0, {r3, r4}
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
 80034ae:	220c      	movs	r2, #12
static void MX_USART2_UART_Init(void)
{

	huart2.Instance = USART2;
	huart2.Init.BaudRate = 9600;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034b0:	2300      	movs	r3, #0
 80034b2:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80034b4:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80034b6:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80034b8:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ba:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80034bc:	61c3      	str	r3, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034be:	6203      	str	r3, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034c0:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80034c2:	f7ff fe02 	bl	80030ca <HAL_UART_Init>
 80034c6:	b100      	cbz	r0, 80034ca <main+0x5a>
 80034c8:	e7fe      	b.n	80034c8 <main+0x58>
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	htim1.Instance = TIM1;
 80034ca:	4c7e      	ldr	r4, [pc, #504]	; (80036c4 <main+0x254>)
 80034cc:	4b7e      	ldr	r3, [pc, #504]	; (80036c8 <main+0x258>)
 80034ce:	6023      	str	r3, [r4, #0]
	htim1.Init.Prescaler = 0;
 80034d0:	6060      	str	r0, [r4, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034d2:	60a0      	str	r0, [r4, #8]
	htim1.Init.Period = 9090;
 80034d4:	f242 3382 	movw	r3, #9090	; 0x2382
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034d8:	6120      	str	r0, [r4, #16]
	htim1.Init.RepetitionCounter = 0;
 80034da:	6160      	str	r0, [r4, #20]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80034dc:	4620      	mov	r0, r4
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	htim1.Instance = TIM1;
	htim1.Init.Prescaler = 0;
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim1.Init.Period = 9090;
 80034de:	60e3      	str	r3, [r4, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim1.Init.RepetitionCounter = 0;
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80034e0:	f7ff f9a6 	bl	8002830 <HAL_TIM_Base_Init>
 80034e4:	b100      	cbz	r0, 80034e8 <main+0x78>
 80034e6:	e7fe      	b.n	80034e6 <main+0x76>
	{
		Error_Handler();
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034e8:	a91c      	add	r1, sp, #112	; 0x70
 80034ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ee:	f841 3d58 	str.w	r3, [r1, #-88]!
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80034f2:	4620      	mov	r0, r4
 80034f4:	f7ff fa9a 	bl	8002a2c <HAL_TIM_ConfigClockSource>
 80034f8:	b100      	cbz	r0, 80034fc <main+0x8c>
 80034fa:	e7fe      	b.n	80034fa <main+0x8a>
	{
		Error_Handler();
	}

	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80034fc:	4620      	mov	r0, r4
 80034fe:	f7ff f9b1 	bl	8002864 <HAL_TIM_PWM_Init>
 8003502:	b100      	cbz	r0, 8003506 <main+0x96>
 8003504:	e7fe      	b.n	8003504 <main+0x94>
	{
		Error_Handler();
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003506:	9003      	str	r0, [sp, #12]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003508:	9004      	str	r0, [sp, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800350a:	9005      	str	r0, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800350c:	a903      	add	r1, sp, #12
 800350e:	4620      	mov	r0, r4
 8003510:	f7ff fba6 	bl	8002c60 <HAL_TIMEx_MasterConfigSynchronization>
 8003514:	4602      	mov	r2, r0
 8003516:	b100      	cbz	r0, 800351a <main+0xaa>
 8003518:	e7fe      	b.n	8003518 <main+0xa8>
	{
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800351a:	2360      	movs	r3, #96	; 0x60
	sConfigOC.Pulse = 0;
 800351c:	900b      	str	r0, [sp, #44]	; 0x2c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800351e:	900c      	str	r0, [sp, #48]	; 0x30
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003520:	900d      	str	r0, [sp, #52]	; 0x34
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003522:	900e      	str	r0, [sp, #56]	; 0x38
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003524:	900f      	str	r0, [sp, #60]	; 0x3c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003526:	9010      	str	r0, [sp, #64]	; 0x40
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003528:	a90a      	add	r1, sp, #40	; 0x28
 800352a:	4620      	mov	r0, r4
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
	{
		Error_Handler();
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800352c:	930a      	str	r3, [sp, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800352e:	f7ff f9ed 	bl	800290c <HAL_TIM_PWM_ConfigChannel>
 8003532:	b100      	cbz	r0, 8003536 <main+0xc6>
 8003534:	e7fe      	b.n	8003534 <main+0xc4>
	{
		Error_Handler();
	}

	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003536:	2204      	movs	r2, #4
 8003538:	a90a      	add	r1, sp, #40	; 0x28
 800353a:	4620      	mov	r0, r4
 800353c:	f7ff f9e6 	bl	800290c <HAL_TIM_PWM_ConfigChannel>
 8003540:	b100      	cbz	r0, 8003544 <main+0xd4>
 8003542:	e7fe      	b.n	8003542 <main+0xd2>
	{
		Error_Handler();
	}

	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003544:	2208      	movs	r2, #8
 8003546:	a90a      	add	r1, sp, #40	; 0x28
 8003548:	4620      	mov	r0, r4
 800354a:	f7ff f9df 	bl	800290c <HAL_TIM_PWM_ConfigChannel>
 800354e:	b100      	cbz	r0, 8003552 <main+0xe2>
 8003550:	e7fe      	b.n	8003550 <main+0xe0>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003552:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
	{
		Error_Handler();
	}

	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003556:	9011      	str	r0, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003558:	9012      	str	r0, [sp, #72]	; 0x48
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800355a:	9013      	str	r0, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.DeadTime = 0;
 800355c:	9014      	str	r0, [sp, #80]	; 0x50
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800355e:	9015      	str	r0, [sp, #84]	; 0x54
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003560:	9316      	str	r3, [sp, #88]	; 0x58
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003562:	9017      	str	r0, [sp, #92]	; 0x5c
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003564:	9018      	str	r0, [sp, #96]	; 0x60
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	sBreakDeadTimeConfig.Break2Filter = 0;
 800356a:	901a      	str	r0, [sp, #104]	; 0x68
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800356c:	901b      	str	r0, [sp, #108]	; 0x6c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800356e:	a911      	add	r1, sp, #68	; 0x44
 8003570:	4620      	mov	r0, r4
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
	sBreakDeadTimeConfig.BreakFilter = 0;
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003572:	9319      	str	r3, [sp, #100]	; 0x64
	sBreakDeadTimeConfig.Break2Filter = 0;
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003574:	f7ff fb96 	bl	8002ca4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003578:	4605      	mov	r5, r0
 800357a:	b100      	cbz	r0, 800357e <main+0x10e>
 800357c:	e7fe      	b.n	800357c <main+0x10c>
	{
		Error_Handler();
	}

	HAL_TIM_MspPostInit(&htim1);
 800357e:	4620      	mov	r0, r4
 8003580:	f000 f93e 	bl	8003800 <HAL_TIM_MspPostInit>

	ADC_ChannelConfTypeDef sConfig;

	/**Common config
	 */
	hadc1.Instance = ADC1;
 8003584:	4851      	ldr	r0, [pc, #324]	; (80036cc <main+0x25c>)
 8003586:	4b52      	ldr	r3, [pc, #328]	; (80036d0 <main+0x260>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003588:	6085      	str	r5, [r0, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	hadc1.Init.LowPowerAutoWait = DISABLE;
	hadc1.Init.ContinuousConvMode = DISABLE;
	hadc1.Init.NbrOfConversion = 1;
 800358a:	2401      	movs	r4, #1
	ADC_ChannelConfTypeDef sConfig;

	/**Common config
	 */
	hadc1.Instance = ADC1;
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800358c:	e880 0028 	stmia.w	r0, {r3, r5}
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003590:	2304      	movs	r3, #4
	/**Common config
	 */
	hadc1.Instance = ADC1;
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003592:	60c5      	str	r5, [r0, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003594:	6105      	str	r5, [r0, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003596:	6143      	str	r3, [r0, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8003598:	6185      	str	r5, [r0, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800359a:	61c5      	str	r5, [r0, #28]
	hadc1.Init.NbrOfConversion = 1;
 800359c:	6204      	str	r4, [r0, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800359e:	6245      	str	r5, [r0, #36]	; 0x24
	hadc1.Init.NbrOfDiscConversion = 1;
 80035a0:	6284      	str	r4, [r0, #40]	; 0x28
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80035a2:	62c4      	str	r4, [r0, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80035a4:	6305      	str	r5, [r0, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80035a6:	6345      	str	r5, [r0, #52]	; 0x34
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80035a8:	6385      	str	r5, [r0, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 80035aa:	63c5      	str	r5, [r0, #60]	; 0x3c
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80035ac:	f7fd fc18 	bl	8000de0 <HAL_ADC_Init>
 80035b0:	b100      	cbz	r0, 80035b4 <main+0x144>
 80035b2:	e7fe      	b.n	80035b2 <main+0x142>
		Error_Handler();
	}

	/**Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80035b4:	2305      	movs	r3, #5
 80035b6:	9311      	str	r3, [sp, #68]	; 0x44
	sConfig.Rank = 1;
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
	sConfig.Offset = 0;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035b8:	a911      	add	r1, sp, #68	; 0x44

	/**Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
	sConfig.Rank = 1;
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80035ba:	2300      	movs	r3, #0
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
	sConfig.Offset = 0;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035bc:	4843      	ldr	r0, [pc, #268]	; (80036cc <main+0x25c>)
	}

	/**Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
	sConfig.Rank = 1;
 80035be:	9412      	str	r4, [sp, #72]	; 0x48
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80035c0:	9313      	str	r3, [sp, #76]	; 0x4c
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80035c2:	9314      	str	r3, [sp, #80]	; 0x50
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80035c4:	9315      	str	r3, [sp, #84]	; 0x54
	sConfig.Offset = 0;
 80035c6:	9316      	str	r3, [sp, #88]	; 0x58
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035c8:	f7fd fd3e 	bl	8001048 <HAL_ADC_ConfigChannel>
 80035cc:	4604      	mov	r4, r0
 80035ce:	b100      	cbz	r0, 80035d2 <main+0x162>
 80035d0:	e7fe      	b.n	80035d0 <main+0x160>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_USART2_UART_Init();
	MX_TIM1_Init();
	MX_ADC1_Init();
	HD44780_Init();
 80035d2:	f7ff fe51 	bl	8003278 <HD44780_Init>

	/* USER CODE BEGIN 2 */

	__IO uint16_t uhADCxConvertedValue = 0; //_IO is a macro
 80035d6:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80035da:	483c      	ldr	r0, [pc, #240]	; (80036cc <main+0x25c>)
 80035dc:	f7fd ff60 	bl	80014a0 <HAL_ADC_Start>
 80035e0:	b110      	cbz	r0, 80035e8 <main+0x178>
			/* Start Conversation Error */
			printf("HAL_ADC_Start Error\r\n");
 80035e2:	483c      	ldr	r0, [pc, #240]	; (80036d4 <main+0x264>)
 80035e4:	f000 fa32 	bl	8003a4c <puts>
		}
		if (HAL_ADC_PollForConversion(&hadc1, 10) != HAL_OK) {
 80035e8:	210a      	movs	r1, #10
 80035ea:	4838      	ldr	r0, [pc, #224]	; (80036cc <main+0x25c>)
 80035ec:	f7fd fcd8 	bl	8000fa0 <HAL_ADC_PollForConversion>
 80035f0:	b118      	cbz	r0, 80035fa <main+0x18a>
			printf("HAL_ADC_PollForConversion Error\r\n");
 80035f2:	4839      	ldr	r0, [pc, #228]	; (80036d8 <main+0x268>)
 80035f4:	f000 fa2a 	bl	8003a4c <puts>
 80035f8:	e005      	b.n	8003606 <main+0x196>
		} else {
			/* ADC conversion completed */
			/*##-5- Get the converted value of regular channel  ########################*/
			uhADCxConvertedValue = HAL_ADC_GetValue(&hadc1);
 80035fa:	4834      	ldr	r0, [pc, #208]	; (80036cc <main+0x25c>)
 80035fc:	f7fd fd20 	bl	8001040 <HAL_ADC_GetValue>
 8003600:	b280      	uxth	r0, r0
 8003602:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
		}
		HAL_Delay(150);
 8003606:	2096      	movs	r0, #150	; 0x96
 8003608:	f7fd fbde 	bl	8000dc8 <HAL_Delay>
		int32_t temp_celsius = ((3.3/4095*uhADCxConvertedValue*1000)-500)/10;
 800360c:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
 8003610:	b280      	uxth	r0, r0
 8003612:	f7fc ff7f 	bl	8000514 <__aeabi_i2d>
 8003616:	a326      	add	r3, pc, #152	; (adr r3, 80036b0 <main+0x240>)
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	f7fc ffe0 	bl	80005e0 <__aeabi_dmul>
 8003620:	2200      	movs	r2, #0
 8003622:	4b2e      	ldr	r3, [pc, #184]	; (80036dc <main+0x26c>)
 8003624:	f7fc ffdc 	bl	80005e0 <__aeabi_dmul>
 8003628:	2200      	movs	r2, #0
 800362a:	4b2d      	ldr	r3, [pc, #180]	; (80036e0 <main+0x270>)
 800362c:	f7fc fe24 	bl	8000278 <__aeabi_dsub>
 8003630:	2200      	movs	r2, #0
 8003632:	4b2c      	ldr	r3, [pc, #176]	; (80036e4 <main+0x274>)
 8003634:	f7fd f8fe 	bl	8000834 <__aeabi_ddiv>
 8003638:	f7fd f9e4 	bl	8000a04 <__aeabi_d2iz>
		char str_temperature[3]={0};
 800363c:	2500      	movs	r5, #0
		snprintf(str_temperature, 3, "%d", temp_celsius);
 800363e:	4603      	mov	r3, r0
			/* ADC conversion completed */
			/*##-5- Get the converted value of regular channel  ########################*/
			uhADCxConvertedValue = HAL_ADC_GetValue(&hadc1);
		}
		HAL_Delay(150);
		int32_t temp_celsius = ((3.3/4095*uhADCxConvertedValue*1000)-500)/10;
 8003640:	4604      	mov	r4, r0
		char str_temperature[3]={0};
		snprintf(str_temperature, 3, "%d", temp_celsius);
 8003642:	4a29      	ldr	r2, [pc, #164]	; (80036e8 <main+0x278>)
			/*##-5- Get the converted value of regular channel  ########################*/
			uhADCxConvertedValue = HAL_ADC_GetValue(&hadc1);
		}
		HAL_Delay(150);
		int32_t temp_celsius = ((3.3/4095*uhADCxConvertedValue*1000)-500)/10;
		char str_temperature[3]={0};
 8003644:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
		snprintf(str_temperature, 3, "%d", temp_celsius);
 8003648:	2103      	movs	r1, #3
 800364a:	a811      	add	r0, sp, #68	; 0x44
			/*##-5- Get the converted value of regular channel  ########################*/
			uhADCxConvertedValue = HAL_ADC_GetValue(&hadc1);
		}
		HAL_Delay(150);
		int32_t temp_celsius = ((3.3/4095*uhADCxConvertedValue*1000)-500)/10;
		char str_temperature[3]={0};
 800364c:	f88d 5046 	strb.w	r5, [sp, #70]	; 0x46
		snprintf(str_temperature, 3, "%d", temp_celsius);
 8003650:	f000 fa04 	bl	8003a5c <sniprintf>

		if(temp_celsius>=-15 && temp_celsius<=5){
 8003654:	f104 030f 	add.w	r3, r4, #15
 8003658:	2b14      	cmp	r3, #20
 800365a:	d804      	bhi.n	8003666 <main+0x1f6>
			setRGBColorForTim1Ch1to3(0,0,255);
 800365c:	22ff      	movs	r2, #255	; 0xff
 800365e:	4629      	mov	r1, r5
 8003660:	4628      	mov	r0, r5
 8003662:	f7ff fe75 	bl	8003350 <setRGBColorForTim1Ch1to3>
		}
		if(temp_celsius>5 && temp_celsius<=15){
 8003666:	1fa3      	subs	r3, r4, #6
 8003668:	2b09      	cmp	r3, #9
 800366a:	d804      	bhi.n	8003676 <main+0x206>
			setRGBColorForTim1Ch1to3(127,127,0);
 800366c:	217f      	movs	r1, #127	; 0x7f
 800366e:	2200      	movs	r2, #0
 8003670:	4608      	mov	r0, r1
 8003672:	f7ff fe6d 	bl	8003350 <setRGBColorForTim1Ch1to3>
		}
		if(temp_celsius>15 && temp_celsius<=25){
 8003676:	f1a4 0310 	sub.w	r3, r4, #16
 800367a:	2b09      	cmp	r3, #9
 800367c:	d803      	bhi.n	8003686 <main+0x216>
			setRGBColorForTim1Ch1to3(180,127,0);
 800367e:	2200      	movs	r2, #0
 8003680:	217f      	movs	r1, #127	; 0x7f
 8003682:	20b4      	movs	r0, #180	; 0xb4
 8003684:	e004      	b.n	8003690 <main+0x220>
		}
		if(temp_celsius>25){
 8003686:	2c19      	cmp	r4, #25
 8003688:	dd04      	ble.n	8003694 <main+0x224>
			setRGBColorForTim1Ch1to3(255,0,0);
 800368a:	2200      	movs	r2, #0
 800368c:	4611      	mov	r1, r2
 800368e:	20ff      	movs	r0, #255	; 0xff
 8003690:	f7ff fe5e 	bl	8003350 <setRGBColorForTim1Ch1to3>
		}

		HD44780_ClrScr();
 8003694:	f7ff fe59 	bl	800334a <HD44780_ClrScr>
		HD44780_PutStr("Temp = ");
 8003698:	4814      	ldr	r0, [pc, #80]	; (80036ec <main+0x27c>)
 800369a:	f7ff fe45 	bl	8003328 <HD44780_PutStr>
		HD44780_PutStr(str_temperature);
 800369e:	a811      	add	r0, sp, #68	; 0x44
 80036a0:	f7ff fe42 	bl	8003328 <HD44780_PutStr>
		HD44780_PutStr(" C");
 80036a4:	4812      	ldr	r0, [pc, #72]	; (80036f0 <main+0x280>)
 80036a6:	f7ff fe3f 	bl	8003328 <HD44780_PutStr>
	}
 80036aa:	e796      	b.n	80035da <main+0x16a>
 80036ac:	f3af 8000 	nop.w
 80036b0:	e734d9b4 	.word	0xe734d9b4
 80036b4:	3f4a680c 	.word	0x3f4a680c
 80036b8:	40021000 	.word	0x40021000
 80036bc:	20000138 	.word	0x20000138
 80036c0:	40004400 	.word	0x40004400
 80036c4:	200000fc 	.word	0x200000fc
 80036c8:	40012c00 	.word	0x40012c00
 80036cc:	20000094 	.word	0x20000094
 80036d0:	50040000 	.word	0x50040000
 80036d4:	08004a05 	.word	0x08004a05
 80036d8:	08004a1a 	.word	0x08004a1a
 80036dc:	408f4000 	.word	0x408f4000
 80036e0:	407f4000 	.word	0x407f4000
 80036e4:	40240000 	.word	0x40240000
 80036e8:	08004a3b 	.word	0x08004a3b
 80036ec:	08004a3e 	.word	0x08004a3e
 80036f0:	08004a46 	.word	0x08004a46

080036f4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f4:	4b21      	ldr	r3, [pc, #132]	; (800377c <HAL_MspInit+0x88>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036f6:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	661a      	str	r2, [r3, #96]	; 0x60
 8003700:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003702:	f002 0201 	and.w	r2, r2, #1
 8003706:	9200      	str	r2, [sp, #0]
 8003708:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800370a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800370c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003710:	659a      	str	r2, [r3, #88]	; 0x58
 8003712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003718:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800371a:	2003      	movs	r0, #3
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();
 800371c:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800371e:	f7fd fefd 	bl	800151c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003722:	2200      	movs	r2, #0
 8003724:	4611      	mov	r1, r2
 8003726:	f06f 000b 	mvn.w	r0, #11
 800372a:	f7fd ff09 	bl	8001540 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800372e:	2200      	movs	r2, #0
 8003730:	4611      	mov	r1, r2
 8003732:	f06f 000a 	mvn.w	r0, #10
 8003736:	f7fd ff03 	bl	8001540 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800373a:	2200      	movs	r2, #0
 800373c:	4611      	mov	r1, r2
 800373e:	f06f 0009 	mvn.w	r0, #9
 8003742:	f7fd fefd 	bl	8001540 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003746:	2200      	movs	r2, #0
 8003748:	4611      	mov	r1, r2
 800374a:	f06f 0004 	mvn.w	r0, #4
 800374e:	f7fd fef7 	bl	8001540 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003752:	2200      	movs	r2, #0
 8003754:	4611      	mov	r1, r2
 8003756:	f06f 0003 	mvn.w	r0, #3
 800375a:	f7fd fef1 	bl	8001540 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800375e:	2200      	movs	r2, #0
 8003760:	4611      	mov	r1, r2
 8003762:	f06f 0001 	mvn.w	r0, #1
 8003766:	f7fd feeb 	bl	8001540 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800376a:	2200      	movs	r2, #0
 800376c:	4611      	mov	r1, r2
 800376e:	f04f 30ff 	mov.w	r0, #4294967295
 8003772:	f7fd fee5 	bl	8001540 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003776:	b003      	add	sp, #12
 8003778:	f85d fb04 	ldr.w	pc, [sp], #4
 800377c:	40021000 	.word	0x40021000

08003780 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003780:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003782:	6802      	ldr	r2, [r0, #0]
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <HAL_ADC_MspInit+0x40>)
 8003786:	429a      	cmp	r2, r3
 8003788:	d117      	bne.n	80037ba <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800378a:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800378e:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PA0-CK_IN     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003792:	a901      	add	r1, sp, #4
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003794:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003796:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800379a:	64da      	str	r2, [r3, #76]	; 0x4c
 800379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PA0-CK_IN     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80037a6:	2301      	movs	r3, #1
 80037a8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80037aa:	230b      	movs	r3, #11
 80037ac:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    /**ADC1 GPIO Configuration    
    PA0-CK_IN     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b6:	f7fd ff2b 	bl	8001610 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80037ba:	b007      	add	sp, #28
 80037bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80037c0:	50040000 	.word	0x50040000

080037c4 <HAL_TIM_Base_MspInit>:
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037c4:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM1)
 80037c6:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <HAL_TIM_Base_MspInit+0x38>)
 80037c8:	6802      	ldr	r2, [r0, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d112      	bne.n	80037f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037ce:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80037d2:	201a      	movs	r0, #26
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037da:	661a      	str	r2, [r3, #96]	; 0x60
 80037dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80037de:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e4:	9301      	str	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80037e6:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037e8:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80037ea:	f7fd fea9 	bl	8001540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80037ee:	201a      	movs	r0, #26
 80037f0:	f7fd feda 	bl	80015a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80037f4:	b003      	add	sp, #12
 80037f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80037fa:	bf00      	nop
 80037fc:	40012c00 	.word	0x40012c00

08003800 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003800:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8003802:	6802      	ldr	r2, [r0, #0]
 8003804:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <HAL_TIM_MspPostInit+0x30>)
 8003806:	429a      	cmp	r2, r3
 8003808:	d10e      	bne.n	8003828 <HAL_TIM_MspPostInit+0x28>
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = BLUE_LED_PIN_Pin|GREEN_LED_PIN_Pin|RED_LED_PIN_Pin;
 800380a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800380e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003810:	2302      	movs	r3, #2
 8003812:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	2300      	movs	r3, #0
 8003816:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003818:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800381a:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = BLUE_LED_PIN_Pin|GREEN_LED_PIN_Pin|RED_LED_PIN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800381c:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800381e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    */
    GPIO_InitStruct.Pin = BLUE_LED_PIN_Pin|GREEN_LED_PIN_Pin|RED_LED_PIN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003822:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003824:	f7fd fef4 	bl	8001610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003828:	b007      	add	sp, #28
 800382a:	f85d fb04 	ldr.w	pc, [sp], #4
 800382e:	bf00      	nop
 8003830:	40012c00 	.word	0x40012c00

08003834 <HAL_UART_MspInit>:
  /* USER CODE END TIM1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003834:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8003836:	6802      	ldr	r2, [r0, #0]
 8003838:	4b15      	ldr	r3, [pc, #84]	; (8003890 <HAL_UART_MspInit+0x5c>)
 800383a:	429a      	cmp	r2, r3
  /* USER CODE END TIM1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800383c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800383e:	d125      	bne.n	800388c <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003840:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003844:	2403      	movs	r4, #3
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003846:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003848:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800384c:	659a      	str	r2, [r3, #88]	; 0x58
 800384e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003850:	9404      	str	r4, [sp, #16]
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800385a:	2304      	movs	r3, #4
 800385c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385e:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003860:	2307      	movs	r3, #7
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003862:	2501      	movs	r5, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003864:	a901      	add	r1, sp, #4
 8003866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800386a:	9305      	str	r3, [sp, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386c:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800386e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003870:	f7fd fece 	bl	8001610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003874:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003878:	a901      	add	r1, sp, #4
 800387a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800387e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003880:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003882:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003884:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003886:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003888:	f7fd fec2 	bl	8001610 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800388c:	b006      	add	sp, #24
 800388e:	bd70      	pop	{r4, r5, r6, pc}
 8003890:	40004400 	.word	0x40004400

08003894 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003894:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003896:	f7fd fa89 	bl	8000dac <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800389a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800389e:	f7fd beb2 	b.w	8001606 <HAL_SYSTICK_IRQHandler>
	...

080038a4 <TIM1_TRG_COM_IRQHandler>:
void TIM1_TRG_COM_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038a4:	4801      	ldr	r0, [pc, #4]	; (80038ac <TIM1_TRG_COM_IRQHandler+0x8>)
 80038a6:	f7fe beeb 	b.w	8002680 <HAL_TIM_IRQHandler>
 80038aa:	bf00      	nop
 80038ac:	200000fc 	.word	0x200000fc

080038b0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038b0:	490f      	ldr	r1, [pc, #60]	; (80038f0 <SystemInit+0x40>)
 80038b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80038b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80038be:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <SystemInit+0x44>)
 80038c0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80038c2:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80038c4:	f042 0201 	orr.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80038ca:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80038d2:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80038d6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80038d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038dc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038e4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80038e6:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038ec:	608b      	str	r3, [r1, #8]
 80038ee:	4770      	bx	lr
 80038f0:	e000ed00 	.word	0xe000ed00
 80038f4:	40021000 	.word	0x40021000

080038f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80038f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003930 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80038fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80038fe:	e003      	b.n	8003908 <LoopCopyDataInit>

08003900 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003902:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003904:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003906:	3104      	adds	r1, #4

08003908 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003908:	480b      	ldr	r0, [pc, #44]	; (8003938 <LoopForever+0xa>)
	ldr	r3, =_edata
 800390a:	4b0c      	ldr	r3, [pc, #48]	; (800393c <LoopForever+0xe>)
	adds	r2, r0, r1
 800390c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800390e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003910:	d3f6      	bcc.n	8003900 <CopyDataInit>
	ldr	r2, =_sbss
 8003912:	4a0b      	ldr	r2, [pc, #44]	; (8003940 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003914:	e002      	b.n	800391c <LoopFillZerobss>

08003916 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003916:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003918:	f842 3b04 	str.w	r3, [r2], #4

0800391c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <LoopForever+0x16>)
	cmp	r2, r3
 800391e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003920:	d3f9      	bcc.n	8003916 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003922:	f7ff ffc5 	bl	80038b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003926:	f000 f811 	bl	800394c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800392a:	f7ff fda1 	bl	8003470 <main>

0800392e <LoopForever>:

LoopForever:
    b LoopForever
 800392e:	e7fe      	b.n	800392e <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003930:	2000c000 	.word	0x2000c000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8003934:	08004b3c 	.word	0x08004b3c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003938:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800393c:	20000068 	.word	0x20000068
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8003940:	20000068 	.word	0x20000068
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8003944:	200001ac 	.word	0x200001ac

08003948 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003948:	e7fe      	b.n	8003948 <ADC1_IRQHandler>
	...

0800394c <__libc_init_array>:
 800394c:	b570      	push	{r4, r5, r6, lr}
 800394e:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <__libc_init_array+0x3c>)
 8003950:	4c0e      	ldr	r4, [pc, #56]	; (800398c <__libc_init_array+0x40>)
 8003952:	1ae4      	subs	r4, r4, r3
 8003954:	10a4      	asrs	r4, r4, #2
 8003956:	2500      	movs	r5, #0
 8003958:	461e      	mov	r6, r3
 800395a:	42a5      	cmp	r5, r4
 800395c:	d004      	beq.n	8003968 <__libc_init_array+0x1c>
 800395e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003962:	4798      	blx	r3
 8003964:	3501      	adds	r5, #1
 8003966:	e7f8      	b.n	800395a <__libc_init_array+0xe>
 8003968:	f001 f838 	bl	80049dc <_init>
 800396c:	4c08      	ldr	r4, [pc, #32]	; (8003990 <__libc_init_array+0x44>)
 800396e:	4b09      	ldr	r3, [pc, #36]	; (8003994 <__libc_init_array+0x48>)
 8003970:	1ae4      	subs	r4, r4, r3
 8003972:	10a4      	asrs	r4, r4, #2
 8003974:	2500      	movs	r5, #0
 8003976:	461e      	mov	r6, r3
 8003978:	42a5      	cmp	r5, r4
 800397a:	d004      	beq.n	8003986 <__libc_init_array+0x3a>
 800397c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003980:	4798      	blx	r3
 8003982:	3501      	adds	r5, #1
 8003984:	e7f8      	b.n	8003978 <__libc_init_array+0x2c>
 8003986:	bd70      	pop	{r4, r5, r6, pc}
 8003988:	08004b34 	.word	0x08004b34
 800398c:	08004b34 	.word	0x08004b34
 8003990:	08004b38 	.word	0x08004b38
 8003994:	08004b34 	.word	0x08004b34

08003998 <_puts_r>:
 8003998:	b570      	push	{r4, r5, r6, lr}
 800399a:	460e      	mov	r6, r1
 800399c:	4605      	mov	r5, r0
 800399e:	b118      	cbz	r0, 80039a8 <_puts_r+0x10>
 80039a0:	6983      	ldr	r3, [r0, #24]
 80039a2:	b90b      	cbnz	r3, 80039a8 <_puts_r+0x10>
 80039a4:	f000 fa40 	bl	8003e28 <__sinit>
 80039a8:	69ab      	ldr	r3, [r5, #24]
 80039aa:	68ac      	ldr	r4, [r5, #8]
 80039ac:	b913      	cbnz	r3, 80039b4 <_puts_r+0x1c>
 80039ae:	4628      	mov	r0, r5
 80039b0:	f000 fa3a 	bl	8003e28 <__sinit>
 80039b4:	4b22      	ldr	r3, [pc, #136]	; (8003a40 <_puts_r+0xa8>)
 80039b6:	429c      	cmp	r4, r3
 80039b8:	d101      	bne.n	80039be <_puts_r+0x26>
 80039ba:	686c      	ldr	r4, [r5, #4]
 80039bc:	e008      	b.n	80039d0 <_puts_r+0x38>
 80039be:	4b21      	ldr	r3, [pc, #132]	; (8003a44 <_puts_r+0xac>)
 80039c0:	429c      	cmp	r4, r3
 80039c2:	d101      	bne.n	80039c8 <_puts_r+0x30>
 80039c4:	68ac      	ldr	r4, [r5, #8]
 80039c6:	e003      	b.n	80039d0 <_puts_r+0x38>
 80039c8:	4b1f      	ldr	r3, [pc, #124]	; (8003a48 <_puts_r+0xb0>)
 80039ca:	429c      	cmp	r4, r3
 80039cc:	bf08      	it	eq
 80039ce:	68ec      	ldreq	r4, [r5, #12]
 80039d0:	89a3      	ldrh	r3, [r4, #12]
 80039d2:	071b      	lsls	r3, r3, #28
 80039d4:	d501      	bpl.n	80039da <_puts_r+0x42>
 80039d6:	6923      	ldr	r3, [r4, #16]
 80039d8:	b93b      	cbnz	r3, 80039ea <_puts_r+0x52>
 80039da:	4621      	mov	r1, r4
 80039dc:	4628      	mov	r0, r5
 80039de:	f000 f8c3 	bl	8003b68 <__swsetup_r>
 80039e2:	b110      	cbz	r0, 80039ea <_puts_r+0x52>
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295
 80039e8:	bd70      	pop	{r4, r5, r6, pc}
 80039ea:	3e01      	subs	r6, #1
 80039ec:	68a3      	ldr	r3, [r4, #8]
 80039ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80039f2:	3b01      	subs	r3, #1
 80039f4:	60a3      	str	r3, [r4, #8]
 80039f6:	b191      	cbz	r1, 8003a1e <_puts_r+0x86>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	da04      	bge.n	8003a06 <_puts_r+0x6e>
 80039fc:	69a2      	ldr	r2, [r4, #24]
 80039fe:	4293      	cmp	r3, r2
 8003a00:	db06      	blt.n	8003a10 <_puts_r+0x78>
 8003a02:	290a      	cmp	r1, #10
 8003a04:	d004      	beq.n	8003a10 <_puts_r+0x78>
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	6022      	str	r2, [r4, #0]
 8003a0c:	7019      	strb	r1, [r3, #0]
 8003a0e:	e7ed      	b.n	80039ec <_puts_r+0x54>
 8003a10:	4622      	mov	r2, r4
 8003a12:	4628      	mov	r0, r5
 8003a14:	f000 f854 	bl	8003ac0 <__swbuf_r>
 8003a18:	3001      	adds	r0, #1
 8003a1a:	d1e7      	bne.n	80039ec <_puts_r+0x54>
 8003a1c:	e7e2      	b.n	80039e4 <_puts_r+0x4c>
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	da08      	bge.n	8003a34 <_puts_r+0x9c>
 8003a22:	4622      	mov	r2, r4
 8003a24:	210a      	movs	r1, #10
 8003a26:	4628      	mov	r0, r5
 8003a28:	f000 f84a 	bl	8003ac0 <__swbuf_r>
 8003a2c:	3001      	adds	r0, #1
 8003a2e:	d0d9      	beq.n	80039e4 <_puts_r+0x4c>
 8003a30:	200a      	movs	r0, #10
 8003a32:	bd70      	pop	{r4, r5, r6, pc}
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	200a      	movs	r0, #10
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	6022      	str	r2, [r4, #0]
 8003a3c:	7018      	strb	r0, [r3, #0]
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	08004a94 	.word	0x08004a94
 8003a44:	08004ab4 	.word	0x08004ab4
 8003a48:	08004ad4 	.word	0x08004ad4

08003a4c <puts>:
 8003a4c:	4b02      	ldr	r3, [pc, #8]	; (8003a58 <puts+0xc>)
 8003a4e:	4601      	mov	r1, r0
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	f7ff bfa1 	b.w	8003998 <_puts_r>
 8003a56:	bf00      	nop
 8003a58:	20000064 	.word	0x20000064

08003a5c <sniprintf>:
 8003a5c:	b40c      	push	{r2, r3}
 8003a5e:	b530      	push	{r4, r5, lr}
 8003a60:	4b16      	ldr	r3, [pc, #88]	; (8003abc <sniprintf+0x60>)
 8003a62:	1e0c      	subs	r4, r1, #0
 8003a64:	b09d      	sub	sp, #116	; 0x74
 8003a66:	681d      	ldr	r5, [r3, #0]
 8003a68:	da04      	bge.n	8003a74 <sniprintf+0x18>
 8003a6a:	238b      	movs	r3, #139	; 0x8b
 8003a6c:	602b      	str	r3, [r5, #0]
 8003a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a72:	e01e      	b.n	8003ab2 <sniprintf+0x56>
 8003a74:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003a78:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003a7c:	bf14      	ite	ne
 8003a7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003a82:	4623      	moveq	r3, r4
 8003a84:	9304      	str	r3, [sp, #16]
 8003a86:	9307      	str	r3, [sp, #28]
 8003a88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a8c:	9002      	str	r0, [sp, #8]
 8003a8e:	9006      	str	r0, [sp, #24]
 8003a90:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003a94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003a96:	ab21      	add	r3, sp, #132	; 0x84
 8003a98:	a902      	add	r1, sp, #8
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	f000 fbbb 	bl	8004218 <_svfiprintf_r>
 8003aa2:	1c43      	adds	r3, r0, #1
 8003aa4:	bfbc      	itt	lt
 8003aa6:	238b      	movlt	r3, #139	; 0x8b
 8003aa8:	602b      	strlt	r3, [r5, #0]
 8003aaa:	b114      	cbz	r4, 8003ab2 <sniprintf+0x56>
 8003aac:	9b02      	ldr	r3, [sp, #8]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	b01d      	add	sp, #116	; 0x74
 8003ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ab8:	b002      	add	sp, #8
 8003aba:	4770      	bx	lr
 8003abc:	20000064 	.word	0x20000064

08003ac0 <__swbuf_r>:
 8003ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac2:	460f      	mov	r7, r1
 8003ac4:	4614      	mov	r4, r2
 8003ac6:	4606      	mov	r6, r0
 8003ac8:	b118      	cbz	r0, 8003ad2 <__swbuf_r+0x12>
 8003aca:	6983      	ldr	r3, [r0, #24]
 8003acc:	b90b      	cbnz	r3, 8003ad2 <__swbuf_r+0x12>
 8003ace:	f000 f9ab 	bl	8003e28 <__sinit>
 8003ad2:	4b22      	ldr	r3, [pc, #136]	; (8003b5c <__swbuf_r+0x9c>)
 8003ad4:	429c      	cmp	r4, r3
 8003ad6:	d101      	bne.n	8003adc <__swbuf_r+0x1c>
 8003ad8:	6874      	ldr	r4, [r6, #4]
 8003ada:	e008      	b.n	8003aee <__swbuf_r+0x2e>
 8003adc:	4b20      	ldr	r3, [pc, #128]	; (8003b60 <__swbuf_r+0xa0>)
 8003ade:	429c      	cmp	r4, r3
 8003ae0:	d101      	bne.n	8003ae6 <__swbuf_r+0x26>
 8003ae2:	68b4      	ldr	r4, [r6, #8]
 8003ae4:	e003      	b.n	8003aee <__swbuf_r+0x2e>
 8003ae6:	4b1f      	ldr	r3, [pc, #124]	; (8003b64 <__swbuf_r+0xa4>)
 8003ae8:	429c      	cmp	r4, r3
 8003aea:	bf08      	it	eq
 8003aec:	68f4      	ldreq	r4, [r6, #12]
 8003aee:	69a3      	ldr	r3, [r4, #24]
 8003af0:	60a3      	str	r3, [r4, #8]
 8003af2:	89a3      	ldrh	r3, [r4, #12]
 8003af4:	071a      	lsls	r2, r3, #28
 8003af6:	d509      	bpl.n	8003b0c <__swbuf_r+0x4c>
 8003af8:	6923      	ldr	r3, [r4, #16]
 8003afa:	b13b      	cbz	r3, 8003b0c <__swbuf_r+0x4c>
 8003afc:	6823      	ldr	r3, [r4, #0]
 8003afe:	6920      	ldr	r0, [r4, #16]
 8003b00:	1a18      	subs	r0, r3, r0
 8003b02:	6963      	ldr	r3, [r4, #20]
 8003b04:	4298      	cmp	r0, r3
 8003b06:	b2fd      	uxtb	r5, r7
 8003b08:	db0f      	blt.n	8003b2a <__swbuf_r+0x6a>
 8003b0a:	e008      	b.n	8003b1e <__swbuf_r+0x5e>
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	4630      	mov	r0, r6
 8003b10:	f000 f82a 	bl	8003b68 <__swsetup_r>
 8003b14:	2800      	cmp	r0, #0
 8003b16:	d0f1      	beq.n	8003afc <__swbuf_r+0x3c>
 8003b18:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b1e:	4621      	mov	r1, r4
 8003b20:	4630      	mov	r0, r6
 8003b22:	f000 f917 	bl	8003d54 <_fflush_r>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	d1f6      	bne.n	8003b18 <__swbuf_r+0x58>
 8003b2a:	68a3      	ldr	r3, [r4, #8]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	60a3      	str	r3, [r4, #8]
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	6022      	str	r2, [r4, #0]
 8003b36:	701f      	strb	r7, [r3, #0]
 8003b38:	6962      	ldr	r2, [r4, #20]
 8003b3a:	1c43      	adds	r3, r0, #1
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d004      	beq.n	8003b4a <__swbuf_r+0x8a>
 8003b40:	89a3      	ldrh	r3, [r4, #12]
 8003b42:	07db      	lsls	r3, r3, #31
 8003b44:	d507      	bpl.n	8003b56 <__swbuf_r+0x96>
 8003b46:	2d0a      	cmp	r5, #10
 8003b48:	d105      	bne.n	8003b56 <__swbuf_r+0x96>
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	f000 f901 	bl	8003d54 <_fflush_r>
 8003b52:	2800      	cmp	r0, #0
 8003b54:	d1e0      	bne.n	8003b18 <__swbuf_r+0x58>
 8003b56:	4628      	mov	r0, r5
 8003b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	08004a94 	.word	0x08004a94
 8003b60:	08004ab4 	.word	0x08004ab4
 8003b64:	08004ad4 	.word	0x08004ad4

08003b68 <__swsetup_r>:
 8003b68:	4b32      	ldr	r3, [pc, #200]	; (8003c34 <__swsetup_r+0xcc>)
 8003b6a:	b570      	push	{r4, r5, r6, lr}
 8003b6c:	681d      	ldr	r5, [r3, #0]
 8003b6e:	4606      	mov	r6, r0
 8003b70:	460c      	mov	r4, r1
 8003b72:	b125      	cbz	r5, 8003b7e <__swsetup_r+0x16>
 8003b74:	69ab      	ldr	r3, [r5, #24]
 8003b76:	b913      	cbnz	r3, 8003b7e <__swsetup_r+0x16>
 8003b78:	4628      	mov	r0, r5
 8003b7a:	f000 f955 	bl	8003e28 <__sinit>
 8003b7e:	4b2e      	ldr	r3, [pc, #184]	; (8003c38 <__swsetup_r+0xd0>)
 8003b80:	429c      	cmp	r4, r3
 8003b82:	d101      	bne.n	8003b88 <__swsetup_r+0x20>
 8003b84:	686c      	ldr	r4, [r5, #4]
 8003b86:	e008      	b.n	8003b9a <__swsetup_r+0x32>
 8003b88:	4b2c      	ldr	r3, [pc, #176]	; (8003c3c <__swsetup_r+0xd4>)
 8003b8a:	429c      	cmp	r4, r3
 8003b8c:	d101      	bne.n	8003b92 <__swsetup_r+0x2a>
 8003b8e:	68ac      	ldr	r4, [r5, #8]
 8003b90:	e003      	b.n	8003b9a <__swsetup_r+0x32>
 8003b92:	4b2b      	ldr	r3, [pc, #172]	; (8003c40 <__swsetup_r+0xd8>)
 8003b94:	429c      	cmp	r4, r3
 8003b96:	bf08      	it	eq
 8003b98:	68ec      	ldreq	r4, [r5, #12]
 8003b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	0715      	lsls	r5, r2, #28
 8003ba2:	d41d      	bmi.n	8003be0 <__swsetup_r+0x78>
 8003ba4:	06d0      	lsls	r0, r2, #27
 8003ba6:	d402      	bmi.n	8003bae <__swsetup_r+0x46>
 8003ba8:	2209      	movs	r2, #9
 8003baa:	6032      	str	r2, [r6, #0]
 8003bac:	e03a      	b.n	8003c24 <__swsetup_r+0xbc>
 8003bae:	0751      	lsls	r1, r2, #29
 8003bb0:	d512      	bpl.n	8003bd8 <__swsetup_r+0x70>
 8003bb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bb4:	b141      	cbz	r1, 8003bc8 <__swsetup_r+0x60>
 8003bb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bba:	4299      	cmp	r1, r3
 8003bbc:	d002      	beq.n	8003bc4 <__swsetup_r+0x5c>
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	f000 fa24 	bl	800400c <_free_r>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	6363      	str	r3, [r4, #52]	; 0x34
 8003bc8:	89a3      	ldrh	r3, [r4, #12]
 8003bca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003bce:	81a3      	strh	r3, [r4, #12]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	6063      	str	r3, [r4, #4]
 8003bd4:	6923      	ldr	r3, [r4, #16]
 8003bd6:	6023      	str	r3, [r4, #0]
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	f043 0308 	orr.w	r3, r3, #8
 8003bde:	81a3      	strh	r3, [r4, #12]
 8003be0:	6923      	ldr	r3, [r4, #16]
 8003be2:	b94b      	cbnz	r3, 8003bf8 <__swsetup_r+0x90>
 8003be4:	89a3      	ldrh	r3, [r4, #12]
 8003be6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003bea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bee:	d003      	beq.n	8003bf8 <__swsetup_r+0x90>
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	4630      	mov	r0, r6
 8003bf4:	f000 f9c6 	bl	8003f84 <__smakebuf_r>
 8003bf8:	89a2      	ldrh	r2, [r4, #12]
 8003bfa:	f012 0301 	ands.w	r3, r2, #1
 8003bfe:	d005      	beq.n	8003c0c <__swsetup_r+0xa4>
 8003c00:	2300      	movs	r3, #0
 8003c02:	60a3      	str	r3, [r4, #8]
 8003c04:	6963      	ldr	r3, [r4, #20]
 8003c06:	425b      	negs	r3, r3
 8003c08:	61a3      	str	r3, [r4, #24]
 8003c0a:	e003      	b.n	8003c14 <__swsetup_r+0xac>
 8003c0c:	0792      	lsls	r2, r2, #30
 8003c0e:	bf58      	it	pl
 8003c10:	6963      	ldrpl	r3, [r4, #20]
 8003c12:	60a3      	str	r3, [r4, #8]
 8003c14:	6923      	ldr	r3, [r4, #16]
 8003c16:	b95b      	cbnz	r3, 8003c30 <__swsetup_r+0xc8>
 8003c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c1c:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8003c20:	b280      	uxth	r0, r0
 8003c22:	b130      	cbz	r0, 8003c32 <__swsetup_r+0xca>
 8003c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c28:	81a3      	strh	r3, [r4, #12]
 8003c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
 8003c30:	2000      	movs	r0, #0
 8003c32:	bd70      	pop	{r4, r5, r6, pc}
 8003c34:	20000064 	.word	0x20000064
 8003c38:	08004a94 	.word	0x08004a94
 8003c3c:	08004ab4 	.word	0x08004ab4
 8003c40:	08004ad4 	.word	0x08004ad4

08003c44 <__sflush_r>:
 8003c44:	898a      	ldrh	r2, [r1, #12]
 8003c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c4a:	4605      	mov	r5, r0
 8003c4c:	0710      	lsls	r0, r2, #28
 8003c4e:	460c      	mov	r4, r1
 8003c50:	d459      	bmi.n	8003d06 <__sflush_r+0xc2>
 8003c52:	684b      	ldr	r3, [r1, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	dc02      	bgt.n	8003c5e <__sflush_r+0x1a>
 8003c58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	dd17      	ble.n	8003c8e <__sflush_r+0x4a>
 8003c5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c60:	b1ae      	cbz	r6, 8003c8e <__sflush_r+0x4a>
 8003c62:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c66:	2300      	movs	r3, #0
 8003c68:	b292      	uxth	r2, r2
 8003c6a:	682f      	ldr	r7, [r5, #0]
 8003c6c:	602b      	str	r3, [r5, #0]
 8003c6e:	b10a      	cbz	r2, 8003c74 <__sflush_r+0x30>
 8003c70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c72:	e015      	b.n	8003ca0 <__sflush_r+0x5c>
 8003c74:	6a21      	ldr	r1, [r4, #32]
 8003c76:	2301      	movs	r3, #1
 8003c78:	4628      	mov	r0, r5
 8003c7a:	47b0      	blx	r6
 8003c7c:	1c41      	adds	r1, r0, #1
 8003c7e:	d10f      	bne.n	8003ca0 <__sflush_r+0x5c>
 8003c80:	682b      	ldr	r3, [r5, #0]
 8003c82:	b16b      	cbz	r3, 8003ca0 <__sflush_r+0x5c>
 8003c84:	2b1d      	cmp	r3, #29
 8003c86:	d001      	beq.n	8003c8c <__sflush_r+0x48>
 8003c88:	2b16      	cmp	r3, #22
 8003c8a:	d103      	bne.n	8003c94 <__sflush_r+0x50>
 8003c8c:	602f      	str	r7, [r5, #0]
 8003c8e:	2000      	movs	r0, #0
 8003c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c94:	89a3      	ldrh	r3, [r4, #12]
 8003c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c9a:	81a3      	strh	r3, [r4, #12]
 8003c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ca0:	89a3      	ldrh	r3, [r4, #12]
 8003ca2:	075a      	lsls	r2, r3, #29
 8003ca4:	d505      	bpl.n	8003cb2 <__sflush_r+0x6e>
 8003ca6:	6863      	ldr	r3, [r4, #4]
 8003ca8:	1ac0      	subs	r0, r0, r3
 8003caa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cac:	b10b      	cbz	r3, 8003cb2 <__sflush_r+0x6e>
 8003cae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cb0:	1ac0      	subs	r0, r0, r3
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cb8:	6a21      	ldr	r1, [r4, #32]
 8003cba:	4628      	mov	r0, r5
 8003cbc:	47b0      	blx	r6
 8003cbe:	1c43      	adds	r3, r0, #1
 8003cc0:	89a3      	ldrh	r3, [r4, #12]
 8003cc2:	d106      	bne.n	8003cd2 <__sflush_r+0x8e>
 8003cc4:	6829      	ldr	r1, [r5, #0]
 8003cc6:	291d      	cmp	r1, #29
 8003cc8:	d83a      	bhi.n	8003d40 <__sflush_r+0xfc>
 8003cca:	4a21      	ldr	r2, [pc, #132]	; (8003d50 <__sflush_r+0x10c>)
 8003ccc:	40ca      	lsrs	r2, r1
 8003cce:	07d6      	lsls	r6, r2, #31
 8003cd0:	d536      	bpl.n	8003d40 <__sflush_r+0xfc>
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	6062      	str	r2, [r4, #4]
 8003cd6:	04d9      	lsls	r1, r3, #19
 8003cd8:	6922      	ldr	r2, [r4, #16]
 8003cda:	6022      	str	r2, [r4, #0]
 8003cdc:	d504      	bpl.n	8003ce8 <__sflush_r+0xa4>
 8003cde:	1c42      	adds	r2, r0, #1
 8003ce0:	d101      	bne.n	8003ce6 <__sflush_r+0xa2>
 8003ce2:	682b      	ldr	r3, [r5, #0]
 8003ce4:	b903      	cbnz	r3, 8003ce8 <__sflush_r+0xa4>
 8003ce6:	6560      	str	r0, [r4, #84]	; 0x54
 8003ce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cea:	602f      	str	r7, [r5, #0]
 8003cec:	2900      	cmp	r1, #0
 8003cee:	d0ce      	beq.n	8003c8e <__sflush_r+0x4a>
 8003cf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cf4:	4299      	cmp	r1, r3
 8003cf6:	d002      	beq.n	8003cfe <__sflush_r+0xba>
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	f000 f987 	bl	800400c <_free_r>
 8003cfe:	2000      	movs	r0, #0
 8003d00:	6360      	str	r0, [r4, #52]	; 0x34
 8003d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d06:	690f      	ldr	r7, [r1, #16]
 8003d08:	2f00      	cmp	r7, #0
 8003d0a:	d0c0      	beq.n	8003c8e <__sflush_r+0x4a>
 8003d0c:	0793      	lsls	r3, r2, #30
 8003d0e:	680e      	ldr	r6, [r1, #0]
 8003d10:	bf08      	it	eq
 8003d12:	694b      	ldreq	r3, [r1, #20]
 8003d14:	600f      	str	r7, [r1, #0]
 8003d16:	bf18      	it	ne
 8003d18:	2300      	movne	r3, #0
 8003d1a:	ebc7 0806 	rsb	r8, r7, r6
 8003d1e:	608b      	str	r3, [r1, #8]
 8003d20:	e002      	b.n	8003d28 <__sflush_r+0xe4>
 8003d22:	4407      	add	r7, r0
 8003d24:	ebc0 0808 	rsb	r8, r0, r8
 8003d28:	f1b8 0f00 	cmp.w	r8, #0
 8003d2c:	ddaf      	ble.n	8003c8e <__sflush_r+0x4a>
 8003d2e:	4643      	mov	r3, r8
 8003d30:	463a      	mov	r2, r7
 8003d32:	6a21      	ldr	r1, [r4, #32]
 8003d34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d36:	4628      	mov	r0, r5
 8003d38:	47b0      	blx	r6
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	dcf1      	bgt.n	8003d22 <__sflush_r+0xde>
 8003d3e:	89a3      	ldrh	r3, [r4, #12]
 8003d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d44:	81a3      	strh	r3, [r4, #12]
 8003d46:	f04f 30ff 	mov.w	r0, #4294967295
 8003d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d4e:	bf00      	nop
 8003d50:	20400001 	.word	0x20400001

08003d54 <_fflush_r>:
 8003d54:	b538      	push	{r3, r4, r5, lr}
 8003d56:	690b      	ldr	r3, [r1, #16]
 8003d58:	4605      	mov	r5, r0
 8003d5a:	460c      	mov	r4, r1
 8003d5c:	b1db      	cbz	r3, 8003d96 <_fflush_r+0x42>
 8003d5e:	b118      	cbz	r0, 8003d68 <_fflush_r+0x14>
 8003d60:	6983      	ldr	r3, [r0, #24]
 8003d62:	b90b      	cbnz	r3, 8003d68 <_fflush_r+0x14>
 8003d64:	f000 f860 	bl	8003e28 <__sinit>
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <_fflush_r+0x48>)
 8003d6a:	429c      	cmp	r4, r3
 8003d6c:	d101      	bne.n	8003d72 <_fflush_r+0x1e>
 8003d6e:	686c      	ldr	r4, [r5, #4]
 8003d70:	e008      	b.n	8003d84 <_fflush_r+0x30>
 8003d72:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <_fflush_r+0x4c>)
 8003d74:	429c      	cmp	r4, r3
 8003d76:	d101      	bne.n	8003d7c <_fflush_r+0x28>
 8003d78:	68ac      	ldr	r4, [r5, #8]
 8003d7a:	e003      	b.n	8003d84 <_fflush_r+0x30>
 8003d7c:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <_fflush_r+0x50>)
 8003d7e:	429c      	cmp	r4, r3
 8003d80:	bf08      	it	eq
 8003d82:	68ec      	ldreq	r4, [r5, #12]
 8003d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d88:	b12b      	cbz	r3, 8003d96 <_fflush_r+0x42>
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d92:	f7ff bf57 	b.w	8003c44 <__sflush_r>
 8003d96:	2000      	movs	r0, #0
 8003d98:	bd38      	pop	{r3, r4, r5, pc}
 8003d9a:	bf00      	nop
 8003d9c:	08004a94 	.word	0x08004a94
 8003da0:	08004ab4 	.word	0x08004ab4
 8003da4:	08004ad4 	.word	0x08004ad4

08003da8 <_cleanup_r>:
 8003da8:	4901      	ldr	r1, [pc, #4]	; (8003db0 <_cleanup_r+0x8>)
 8003daa:	f000 b8a9 	b.w	8003f00 <_fwalk_reent>
 8003dae:	bf00      	nop
 8003db0:	08003d55 	.word	0x08003d55

08003db4 <std.isra.0>:
 8003db4:	2300      	movs	r3, #0
 8003db6:	b510      	push	{r4, lr}
 8003db8:	4604      	mov	r4, r0
 8003dba:	6003      	str	r3, [r0, #0]
 8003dbc:	6043      	str	r3, [r0, #4]
 8003dbe:	6083      	str	r3, [r0, #8]
 8003dc0:	8181      	strh	r1, [r0, #12]
 8003dc2:	6643      	str	r3, [r0, #100]	; 0x64
 8003dc4:	81c2      	strh	r2, [r0, #14]
 8003dc6:	6103      	str	r3, [r0, #16]
 8003dc8:	6143      	str	r3, [r0, #20]
 8003dca:	6183      	str	r3, [r0, #24]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	2208      	movs	r2, #8
 8003dd0:	305c      	adds	r0, #92	; 0x5c
 8003dd2:	f000 f913 	bl	8003ffc <memset>
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <std.isra.0+0x38>)
 8003dd8:	6263      	str	r3, [r4, #36]	; 0x24
 8003dda:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <std.isra.0+0x3c>)
 8003ddc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dde:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <std.isra.0+0x40>)
 8003de0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003de2:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <std.isra.0+0x44>)
 8003de4:	6224      	str	r4, [r4, #32]
 8003de6:	6323      	str	r3, [r4, #48]	; 0x30
 8003de8:	bd10      	pop	{r4, pc}
 8003dea:	bf00      	nop
 8003dec:	08004759 	.word	0x08004759
 8003df0:	0800477b 	.word	0x0800477b
 8003df4:	080047b3 	.word	0x080047b3
 8003df8:	080047d7 	.word	0x080047d7

08003dfc <__sfmoreglue>:
 8003dfc:	b570      	push	{r4, r5, r6, lr}
 8003dfe:	2368      	movs	r3, #104	; 0x68
 8003e00:	1e4d      	subs	r5, r1, #1
 8003e02:	435d      	muls	r5, r3
 8003e04:	460e      	mov	r6, r1
 8003e06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e0a:	f000 f94d 	bl	80040a8 <_malloc_r>
 8003e0e:	4604      	mov	r4, r0
 8003e10:	b140      	cbz	r0, 8003e24 <__sfmoreglue+0x28>
 8003e12:	2100      	movs	r1, #0
 8003e14:	e880 0042 	stmia.w	r0, {r1, r6}
 8003e18:	300c      	adds	r0, #12
 8003e1a:	60a0      	str	r0, [r4, #8]
 8003e1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e20:	f000 f8ec 	bl	8003ffc <memset>
 8003e24:	4620      	mov	r0, r4
 8003e26:	bd70      	pop	{r4, r5, r6, pc}

08003e28 <__sinit>:
 8003e28:	6983      	ldr	r3, [r0, #24]
 8003e2a:	b510      	push	{r4, lr}
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	bb33      	cbnz	r3, 8003e7e <__sinit+0x56>
 8003e30:	6483      	str	r3, [r0, #72]	; 0x48
 8003e32:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003e34:	6503      	str	r3, [r0, #80]	; 0x50
 8003e36:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <__sinit+0x58>)
 8003e38:	4a12      	ldr	r2, [pc, #72]	; (8003e84 <__sinit+0x5c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6282      	str	r2, [r0, #40]	; 0x28
 8003e3e:	4298      	cmp	r0, r3
 8003e40:	bf04      	itt	eq
 8003e42:	2301      	moveq	r3, #1
 8003e44:	6183      	streq	r3, [r0, #24]
 8003e46:	f000 f81f 	bl	8003e88 <__sfp>
 8003e4a:	6060      	str	r0, [r4, #4]
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	f000 f81b 	bl	8003e88 <__sfp>
 8003e52:	60a0      	str	r0, [r4, #8]
 8003e54:	4620      	mov	r0, r4
 8003e56:	f000 f817 	bl	8003e88 <__sfp>
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	60e0      	str	r0, [r4, #12]
 8003e5e:	2104      	movs	r1, #4
 8003e60:	6860      	ldr	r0, [r4, #4]
 8003e62:	f7ff ffa7 	bl	8003db4 <std.isra.0>
 8003e66:	2201      	movs	r2, #1
 8003e68:	2109      	movs	r1, #9
 8003e6a:	68a0      	ldr	r0, [r4, #8]
 8003e6c:	f7ff ffa2 	bl	8003db4 <std.isra.0>
 8003e70:	2202      	movs	r2, #2
 8003e72:	2112      	movs	r1, #18
 8003e74:	68e0      	ldr	r0, [r4, #12]
 8003e76:	f7ff ff9d 	bl	8003db4 <std.isra.0>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	61a3      	str	r3, [r4, #24]
 8003e7e:	bd10      	pop	{r4, pc}
 8003e80:	08004af4 	.word	0x08004af4
 8003e84:	08003da9 	.word	0x08003da9

08003e88 <__sfp>:
 8003e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8a:	4b1c      	ldr	r3, [pc, #112]	; (8003efc <__sfp+0x74>)
 8003e8c:	681e      	ldr	r6, [r3, #0]
 8003e8e:	69b3      	ldr	r3, [r6, #24]
 8003e90:	4607      	mov	r7, r0
 8003e92:	b913      	cbnz	r3, 8003e9a <__sfp+0x12>
 8003e94:	4630      	mov	r0, r6
 8003e96:	f7ff ffc7 	bl	8003e28 <__sinit>
 8003e9a:	3648      	adds	r6, #72	; 0x48
 8003e9c:	68b4      	ldr	r4, [r6, #8]
 8003e9e:	6873      	ldr	r3, [r6, #4]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	d404      	bmi.n	8003eae <__sfp+0x26>
 8003ea4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ea8:	b17d      	cbz	r5, 8003eca <__sfp+0x42>
 8003eaa:	3468      	adds	r4, #104	; 0x68
 8003eac:	e7f8      	b.n	8003ea0 <__sfp+0x18>
 8003eae:	6833      	ldr	r3, [r6, #0]
 8003eb0:	b10b      	cbz	r3, 8003eb6 <__sfp+0x2e>
 8003eb2:	6836      	ldr	r6, [r6, #0]
 8003eb4:	e7f2      	b.n	8003e9c <__sfp+0x14>
 8003eb6:	2104      	movs	r1, #4
 8003eb8:	4638      	mov	r0, r7
 8003eba:	f7ff ff9f 	bl	8003dfc <__sfmoreglue>
 8003ebe:	6030      	str	r0, [r6, #0]
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	d1f6      	bne.n	8003eb2 <__sfp+0x2a>
 8003ec4:	230c      	movs	r3, #12
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ece:	81e3      	strh	r3, [r4, #14]
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	81a3      	strh	r3, [r4, #12]
 8003ed4:	6665      	str	r5, [r4, #100]	; 0x64
 8003ed6:	6025      	str	r5, [r4, #0]
 8003ed8:	60a5      	str	r5, [r4, #8]
 8003eda:	6065      	str	r5, [r4, #4]
 8003edc:	6125      	str	r5, [r4, #16]
 8003ede:	6165      	str	r5, [r4, #20]
 8003ee0:	61a5      	str	r5, [r4, #24]
 8003ee2:	2208      	movs	r2, #8
 8003ee4:	4629      	mov	r1, r5
 8003ee6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003eea:	f000 f887 	bl	8003ffc <memset>
 8003eee:	6365      	str	r5, [r4, #52]	; 0x34
 8003ef0:	63a5      	str	r5, [r4, #56]	; 0x38
 8003ef2:	64a5      	str	r5, [r4, #72]	; 0x48
 8003ef4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003efa:	bf00      	nop
 8003efc:	08004af4 	.word	0x08004af4

08003f00 <_fwalk_reent>:
 8003f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f04:	4680      	mov	r8, r0
 8003f06:	4689      	mov	r9, r1
 8003f08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f0c:	2600      	movs	r6, #0
 8003f0e:	b194      	cbz	r4, 8003f36 <_fwalk_reent+0x36>
 8003f10:	68a5      	ldr	r5, [r4, #8]
 8003f12:	6867      	ldr	r7, [r4, #4]
 8003f14:	3f01      	subs	r7, #1
 8003f16:	d40c      	bmi.n	8003f32 <_fwalk_reent+0x32>
 8003f18:	89ab      	ldrh	r3, [r5, #12]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d907      	bls.n	8003f2e <_fwalk_reent+0x2e>
 8003f1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f22:	3301      	adds	r3, #1
 8003f24:	d003      	beq.n	8003f2e <_fwalk_reent+0x2e>
 8003f26:	4629      	mov	r1, r5
 8003f28:	4640      	mov	r0, r8
 8003f2a:	47c8      	blx	r9
 8003f2c:	4306      	orrs	r6, r0
 8003f2e:	3568      	adds	r5, #104	; 0x68
 8003f30:	e7f0      	b.n	8003f14 <_fwalk_reent+0x14>
 8003f32:	6824      	ldr	r4, [r4, #0]
 8003f34:	e7eb      	b.n	8003f0e <_fwalk_reent+0xe>
 8003f36:	4630      	mov	r0, r6
 8003f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003f3c <__swhatbuf_r>:
 8003f3c:	b570      	push	{r4, r5, r6, lr}
 8003f3e:	460e      	mov	r6, r1
 8003f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f44:	2900      	cmp	r1, #0
 8003f46:	b090      	sub	sp, #64	; 0x40
 8003f48:	4614      	mov	r4, r2
 8003f4a:	461d      	mov	r5, r3
 8003f4c:	da06      	bge.n	8003f5c <__swhatbuf_r+0x20>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	602b      	str	r3, [r5, #0]
 8003f52:	89b3      	ldrh	r3, [r6, #12]
 8003f54:	061a      	lsls	r2, r3, #24
 8003f56:	d50e      	bpl.n	8003f76 <__swhatbuf_r+0x3a>
 8003f58:	2340      	movs	r3, #64	; 0x40
 8003f5a:	e00e      	b.n	8003f7a <__swhatbuf_r+0x3e>
 8003f5c:	aa01      	add	r2, sp, #4
 8003f5e:	f000 fc61 	bl	8004824 <_fstat_r>
 8003f62:	2800      	cmp	r0, #0
 8003f64:	dbf3      	blt.n	8003f4e <__swhatbuf_r+0x12>
 8003f66:	9a02      	ldr	r2, [sp, #8]
 8003f68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f70:	425a      	negs	r2, r3
 8003f72:	415a      	adcs	r2, r3
 8003f74:	602a      	str	r2, [r5, #0]
 8003f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	6023      	str	r3, [r4, #0]
 8003f7e:	b010      	add	sp, #64	; 0x40
 8003f80:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f84 <__smakebuf_r>:
 8003f84:	898b      	ldrh	r3, [r1, #12]
 8003f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f88:	079e      	lsls	r6, r3, #30
 8003f8a:	4605      	mov	r5, r0
 8003f8c:	460c      	mov	r4, r1
 8003f8e:	d410      	bmi.n	8003fb2 <__smakebuf_r+0x2e>
 8003f90:	ab01      	add	r3, sp, #4
 8003f92:	466a      	mov	r2, sp
 8003f94:	f7ff ffd2 	bl	8003f3c <__swhatbuf_r>
 8003f98:	9900      	ldr	r1, [sp, #0]
 8003f9a:	4606      	mov	r6, r0
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	f000 f883 	bl	80040a8 <_malloc_r>
 8003fa2:	b968      	cbnz	r0, 8003fc0 <__smakebuf_r+0x3c>
 8003fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fa8:	059a      	lsls	r2, r3, #22
 8003faa:	d422      	bmi.n	8003ff2 <__smakebuf_r+0x6e>
 8003fac:	f043 0302 	orr.w	r3, r3, #2
 8003fb0:	81a3      	strh	r3, [r4, #12]
 8003fb2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003fb6:	6023      	str	r3, [r4, #0]
 8003fb8:	6123      	str	r3, [r4, #16]
 8003fba:	2301      	movs	r3, #1
 8003fbc:	6163      	str	r3, [r4, #20]
 8003fbe:	e018      	b.n	8003ff2 <__smakebuf_r+0x6e>
 8003fc0:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <__smakebuf_r+0x74>)
 8003fc2:	62ab      	str	r3, [r5, #40]	; 0x28
 8003fc4:	89a3      	ldrh	r3, [r4, #12]
 8003fc6:	6020      	str	r0, [r4, #0]
 8003fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fcc:	81a3      	strh	r3, [r4, #12]
 8003fce:	9b00      	ldr	r3, [sp, #0]
 8003fd0:	6163      	str	r3, [r4, #20]
 8003fd2:	9b01      	ldr	r3, [sp, #4]
 8003fd4:	6120      	str	r0, [r4, #16]
 8003fd6:	b14b      	cbz	r3, 8003fec <__smakebuf_r+0x68>
 8003fd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fdc:	4628      	mov	r0, r5
 8003fde:	f000 fc33 	bl	8004848 <_isatty_r>
 8003fe2:	b118      	cbz	r0, 8003fec <__smakebuf_r+0x68>
 8003fe4:	89a3      	ldrh	r3, [r4, #12]
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	81a3      	strh	r3, [r4, #12]
 8003fec:	89a0      	ldrh	r0, [r4, #12]
 8003fee:	4330      	orrs	r0, r6
 8003ff0:	81a0      	strh	r0, [r4, #12]
 8003ff2:	b002      	add	sp, #8
 8003ff4:	bd70      	pop	{r4, r5, r6, pc}
 8003ff6:	bf00      	nop
 8003ff8:	08003da9 	.word	0x08003da9

08003ffc <memset>:
 8003ffc:	4402      	add	r2, r0
 8003ffe:	4603      	mov	r3, r0
 8004000:	4293      	cmp	r3, r2
 8004002:	d002      	beq.n	800400a <memset+0xe>
 8004004:	f803 1b01 	strb.w	r1, [r3], #1
 8004008:	e7fa      	b.n	8004000 <memset+0x4>
 800400a:	4770      	bx	lr

0800400c <_free_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4605      	mov	r5, r0
 8004010:	2900      	cmp	r1, #0
 8004012:	d046      	beq.n	80040a2 <_free_r+0x96>
 8004014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004018:	1f0c      	subs	r4, r1, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	bfb8      	it	lt
 800401e:	18e4      	addlt	r4, r4, r3
 8004020:	f000 fc5a 	bl	80048d8 <__malloc_lock>
 8004024:	4a1f      	ldr	r2, [pc, #124]	; (80040a4 <_free_r+0x98>)
 8004026:	6813      	ldr	r3, [r2, #0]
 8004028:	4611      	mov	r1, r2
 800402a:	b913      	cbnz	r3, 8004032 <_free_r+0x26>
 800402c:	6063      	str	r3, [r4, #4]
 800402e:	6014      	str	r4, [r2, #0]
 8004030:	e032      	b.n	8004098 <_free_r+0x8c>
 8004032:	42a3      	cmp	r3, r4
 8004034:	d90e      	bls.n	8004054 <_free_r+0x48>
 8004036:	6822      	ldr	r2, [r4, #0]
 8004038:	18a0      	adds	r0, r4, r2
 800403a:	4283      	cmp	r3, r0
 800403c:	bf04      	itt	eq
 800403e:	6818      	ldreq	r0, [r3, #0]
 8004040:	685b      	ldreq	r3, [r3, #4]
 8004042:	6063      	str	r3, [r4, #4]
 8004044:	bf04      	itt	eq
 8004046:	1812      	addeq	r2, r2, r0
 8004048:	6022      	streq	r2, [r4, #0]
 800404a:	600c      	str	r4, [r1, #0]
 800404c:	e024      	b.n	8004098 <_free_r+0x8c>
 800404e:	42a2      	cmp	r2, r4
 8004050:	d803      	bhi.n	800405a <_free_r+0x4e>
 8004052:	4613      	mov	r3, r2
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	2a00      	cmp	r2, #0
 8004058:	d1f9      	bne.n	800404e <_free_r+0x42>
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	1819      	adds	r1, r3, r0
 800405e:	42a1      	cmp	r1, r4
 8004060:	d10b      	bne.n	800407a <_free_r+0x6e>
 8004062:	6821      	ldr	r1, [r4, #0]
 8004064:	4401      	add	r1, r0
 8004066:	1858      	adds	r0, r3, r1
 8004068:	4282      	cmp	r2, r0
 800406a:	6019      	str	r1, [r3, #0]
 800406c:	d114      	bne.n	8004098 <_free_r+0x8c>
 800406e:	6810      	ldr	r0, [r2, #0]
 8004070:	6852      	ldr	r2, [r2, #4]
 8004072:	605a      	str	r2, [r3, #4]
 8004074:	4401      	add	r1, r0
 8004076:	6019      	str	r1, [r3, #0]
 8004078:	e00e      	b.n	8004098 <_free_r+0x8c>
 800407a:	d902      	bls.n	8004082 <_free_r+0x76>
 800407c:	230c      	movs	r3, #12
 800407e:	602b      	str	r3, [r5, #0]
 8004080:	e00a      	b.n	8004098 <_free_r+0x8c>
 8004082:	6821      	ldr	r1, [r4, #0]
 8004084:	1860      	adds	r0, r4, r1
 8004086:	4282      	cmp	r2, r0
 8004088:	bf04      	itt	eq
 800408a:	6810      	ldreq	r0, [r2, #0]
 800408c:	6852      	ldreq	r2, [r2, #4]
 800408e:	6062      	str	r2, [r4, #4]
 8004090:	bf04      	itt	eq
 8004092:	1809      	addeq	r1, r1, r0
 8004094:	6021      	streq	r1, [r4, #0]
 8004096:	605c      	str	r4, [r3, #4]
 8004098:	4628      	mov	r0, r5
 800409a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800409e:	f000 bc1c 	b.w	80048da <__malloc_unlock>
 80040a2:	bd38      	pop	{r3, r4, r5, pc}
 80040a4:	20000088 	.word	0x20000088

080040a8 <_malloc_r>:
 80040a8:	b570      	push	{r4, r5, r6, lr}
 80040aa:	1ccd      	adds	r5, r1, #3
 80040ac:	f025 0503 	bic.w	r5, r5, #3
 80040b0:	3508      	adds	r5, #8
 80040b2:	2d0c      	cmp	r5, #12
 80040b4:	bf38      	it	cc
 80040b6:	250c      	movcc	r5, #12
 80040b8:	2d00      	cmp	r5, #0
 80040ba:	4606      	mov	r6, r0
 80040bc:	db01      	blt.n	80040c2 <_malloc_r+0x1a>
 80040be:	42a9      	cmp	r1, r5
 80040c0:	d902      	bls.n	80040c8 <_malloc_r+0x20>
 80040c2:	230c      	movs	r3, #12
 80040c4:	6033      	str	r3, [r6, #0]
 80040c6:	e046      	b.n	8004156 <_malloc_r+0xae>
 80040c8:	f000 fc06 	bl	80048d8 <__malloc_lock>
 80040cc:	4b23      	ldr	r3, [pc, #140]	; (800415c <_malloc_r+0xb4>)
 80040ce:	681c      	ldr	r4, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	4621      	mov	r1, r4
 80040d4:	b1a1      	cbz	r1, 8004100 <_malloc_r+0x58>
 80040d6:	680b      	ldr	r3, [r1, #0]
 80040d8:	1b5b      	subs	r3, r3, r5
 80040da:	d40e      	bmi.n	80040fa <_malloc_r+0x52>
 80040dc:	2b0b      	cmp	r3, #11
 80040de:	d903      	bls.n	80040e8 <_malloc_r+0x40>
 80040e0:	600b      	str	r3, [r1, #0]
 80040e2:	18cc      	adds	r4, r1, r3
 80040e4:	50cd      	str	r5, [r1, r3]
 80040e6:	e01e      	b.n	8004126 <_malloc_r+0x7e>
 80040e8:	428c      	cmp	r4, r1
 80040ea:	bf0d      	iteet	eq
 80040ec:	6863      	ldreq	r3, [r4, #4]
 80040ee:	684b      	ldrne	r3, [r1, #4]
 80040f0:	6063      	strne	r3, [r4, #4]
 80040f2:	6013      	streq	r3, [r2, #0]
 80040f4:	bf18      	it	ne
 80040f6:	460c      	movne	r4, r1
 80040f8:	e015      	b.n	8004126 <_malloc_r+0x7e>
 80040fa:	460c      	mov	r4, r1
 80040fc:	6849      	ldr	r1, [r1, #4]
 80040fe:	e7e9      	b.n	80040d4 <_malloc_r+0x2c>
 8004100:	4c17      	ldr	r4, [pc, #92]	; (8004160 <_malloc_r+0xb8>)
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	b91b      	cbnz	r3, 800410e <_malloc_r+0x66>
 8004106:	4630      	mov	r0, r6
 8004108:	f000 fb16 	bl	8004738 <_sbrk_r>
 800410c:	6020      	str	r0, [r4, #0]
 800410e:	4629      	mov	r1, r5
 8004110:	4630      	mov	r0, r6
 8004112:	f000 fb11 	bl	8004738 <_sbrk_r>
 8004116:	1c43      	adds	r3, r0, #1
 8004118:	d018      	beq.n	800414c <_malloc_r+0xa4>
 800411a:	1cc4      	adds	r4, r0, #3
 800411c:	f024 0403 	bic.w	r4, r4, #3
 8004120:	42a0      	cmp	r0, r4
 8004122:	d10d      	bne.n	8004140 <_malloc_r+0x98>
 8004124:	6025      	str	r5, [r4, #0]
 8004126:	4630      	mov	r0, r6
 8004128:	f000 fbd7 	bl	80048da <__malloc_unlock>
 800412c:	f104 000b 	add.w	r0, r4, #11
 8004130:	1d23      	adds	r3, r4, #4
 8004132:	f020 0007 	bic.w	r0, r0, #7
 8004136:	1ac3      	subs	r3, r0, r3
 8004138:	d00e      	beq.n	8004158 <_malloc_r+0xb0>
 800413a:	425a      	negs	r2, r3
 800413c:	50e2      	str	r2, [r4, r3]
 800413e:	bd70      	pop	{r4, r5, r6, pc}
 8004140:	1a21      	subs	r1, r4, r0
 8004142:	4630      	mov	r0, r6
 8004144:	f000 faf8 	bl	8004738 <_sbrk_r>
 8004148:	3001      	adds	r0, #1
 800414a:	d1eb      	bne.n	8004124 <_malloc_r+0x7c>
 800414c:	230c      	movs	r3, #12
 800414e:	6033      	str	r3, [r6, #0]
 8004150:	4630      	mov	r0, r6
 8004152:	f000 fbc2 	bl	80048da <__malloc_unlock>
 8004156:	2000      	movs	r0, #0
 8004158:	bd70      	pop	{r4, r5, r6, pc}
 800415a:	bf00      	nop
 800415c:	20000088 	.word	0x20000088
 8004160:	20000084 	.word	0x20000084

08004164 <__ssputs_r>:
 8004164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004168:	688e      	ldr	r6, [r1, #8]
 800416a:	429e      	cmp	r6, r3
 800416c:	4682      	mov	sl, r0
 800416e:	460c      	mov	r4, r1
 8004170:	4691      	mov	r9, r2
 8004172:	4698      	mov	r8, r3
 8004174:	d83e      	bhi.n	80041f4 <__ssputs_r+0x90>
 8004176:	898a      	ldrh	r2, [r1, #12]
 8004178:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800417c:	d03a      	beq.n	80041f4 <__ssputs_r+0x90>
 800417e:	6825      	ldr	r5, [r4, #0]
 8004180:	6909      	ldr	r1, [r1, #16]
 8004182:	1a6f      	subs	r7, r5, r1
 8004184:	6965      	ldr	r5, [r4, #20]
 8004186:	2302      	movs	r3, #2
 8004188:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800418c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004190:	1c7b      	adds	r3, r7, #1
 8004192:	4443      	add	r3, r8
 8004194:	429d      	cmp	r5, r3
 8004196:	bf38      	it	cc
 8004198:	461d      	movcc	r5, r3
 800419a:	0553      	lsls	r3, r2, #21
 800419c:	d50f      	bpl.n	80041be <__ssputs_r+0x5a>
 800419e:	4629      	mov	r1, r5
 80041a0:	f7ff ff82 	bl	80040a8 <_malloc_r>
 80041a4:	4606      	mov	r6, r0
 80041a6:	b198      	cbz	r0, 80041d0 <__ssputs_r+0x6c>
 80041a8:	463a      	mov	r2, r7
 80041aa:	6921      	ldr	r1, [r4, #16]
 80041ac:	f000 fb6e 	bl	800488c <memcpy>
 80041b0:	89a3      	ldrh	r3, [r4, #12]
 80041b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ba:	81a3      	strh	r3, [r4, #12]
 80041bc:	e013      	b.n	80041e6 <__ssputs_r+0x82>
 80041be:	462a      	mov	r2, r5
 80041c0:	f000 fb8c 	bl	80048dc <_realloc_r>
 80041c4:	4606      	mov	r6, r0
 80041c6:	b970      	cbnz	r0, 80041e6 <__ssputs_r+0x82>
 80041c8:	6921      	ldr	r1, [r4, #16]
 80041ca:	4650      	mov	r0, sl
 80041cc:	f7ff ff1e 	bl	800400c <_free_r>
 80041d0:	230c      	movs	r3, #12
 80041d2:	f8ca 3000 	str.w	r3, [sl]
 80041d6:	89a3      	ldrh	r3, [r4, #12]
 80041d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041dc:	81a3      	strh	r3, [r4, #12]
 80041de:	f04f 30ff 	mov.w	r0, #4294967295
 80041e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e6:	6126      	str	r6, [r4, #16]
 80041e8:	6165      	str	r5, [r4, #20]
 80041ea:	443e      	add	r6, r7
 80041ec:	1bed      	subs	r5, r5, r7
 80041ee:	6026      	str	r6, [r4, #0]
 80041f0:	60a5      	str	r5, [r4, #8]
 80041f2:	4646      	mov	r6, r8
 80041f4:	4546      	cmp	r6, r8
 80041f6:	bf28      	it	cs
 80041f8:	4646      	movcs	r6, r8
 80041fa:	4632      	mov	r2, r6
 80041fc:	4649      	mov	r1, r9
 80041fe:	6820      	ldr	r0, [r4, #0]
 8004200:	f000 fb4f 	bl	80048a2 <memmove>
 8004204:	68a3      	ldr	r3, [r4, #8]
 8004206:	1b9b      	subs	r3, r3, r6
 8004208:	60a3      	str	r3, [r4, #8]
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	441e      	add	r6, r3
 800420e:	6026      	str	r6, [r4, #0]
 8004210:	2000      	movs	r0, #0
 8004212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004218 <_svfiprintf_r>:
 8004218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800421c:	b09d      	sub	sp, #116	; 0x74
 800421e:	4680      	mov	r8, r0
 8004220:	9303      	str	r3, [sp, #12]
 8004222:	898b      	ldrh	r3, [r1, #12]
 8004224:	061c      	lsls	r4, r3, #24
 8004226:	460d      	mov	r5, r1
 8004228:	4616      	mov	r6, r2
 800422a:	d50d      	bpl.n	8004248 <_svfiprintf_r+0x30>
 800422c:	690b      	ldr	r3, [r1, #16]
 800422e:	b95b      	cbnz	r3, 8004248 <_svfiprintf_r+0x30>
 8004230:	2140      	movs	r1, #64	; 0x40
 8004232:	f7ff ff39 	bl	80040a8 <_malloc_r>
 8004236:	6028      	str	r0, [r5, #0]
 8004238:	6128      	str	r0, [r5, #16]
 800423a:	b918      	cbnz	r0, 8004244 <_svfiprintf_r+0x2c>
 800423c:	230c      	movs	r3, #12
 800423e:	f8c8 3000 	str.w	r3, [r8]
 8004242:	e0cd      	b.n	80043e0 <_svfiprintf_r+0x1c8>
 8004244:	2340      	movs	r3, #64	; 0x40
 8004246:	616b      	str	r3, [r5, #20]
 8004248:	2300      	movs	r3, #0
 800424a:	9309      	str	r3, [sp, #36]	; 0x24
 800424c:	2320      	movs	r3, #32
 800424e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004252:	f8df b19c 	ldr.w	fp, [pc, #412]	; 80043f0 <_svfiprintf_r+0x1d8>
 8004256:	2330      	movs	r3, #48	; 0x30
 8004258:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800425c:	4637      	mov	r7, r6
 800425e:	463c      	mov	r4, r7
 8004260:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004264:	b91b      	cbnz	r3, 800426e <_svfiprintf_r+0x56>
 8004266:	ebb7 0906 	subs.w	r9, r7, r6
 800426a:	d010      	beq.n	800428e <_svfiprintf_r+0x76>
 800426c:	e003      	b.n	8004276 <_svfiprintf_r+0x5e>
 800426e:	2b25      	cmp	r3, #37	; 0x25
 8004270:	d0f9      	beq.n	8004266 <_svfiprintf_r+0x4e>
 8004272:	4627      	mov	r7, r4
 8004274:	e7f3      	b.n	800425e <_svfiprintf_r+0x46>
 8004276:	464b      	mov	r3, r9
 8004278:	4632      	mov	r2, r6
 800427a:	4629      	mov	r1, r5
 800427c:	4640      	mov	r0, r8
 800427e:	f7ff ff71 	bl	8004164 <__ssputs_r>
 8004282:	3001      	adds	r0, #1
 8004284:	f000 80a7 	beq.w	80043d6 <_svfiprintf_r+0x1be>
 8004288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800428a:	444b      	add	r3, r9
 800428c:	9309      	str	r3, [sp, #36]	; 0x24
 800428e:	783b      	ldrb	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80a0 	beq.w	80043d6 <_svfiprintf_r+0x1be>
 8004296:	2300      	movs	r3, #0
 8004298:	f04f 32ff 	mov.w	r2, #4294967295
 800429c:	9304      	str	r3, [sp, #16]
 800429e:	9307      	str	r3, [sp, #28]
 80042a0:	9205      	str	r2, [sp, #20]
 80042a2:	9306      	str	r3, [sp, #24]
 80042a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042a8:	931a      	str	r3, [sp, #104]	; 0x68
 80042aa:	2601      	movs	r6, #1
 80042ac:	2205      	movs	r2, #5
 80042ae:	7821      	ldrb	r1, [r4, #0]
 80042b0:	484e      	ldr	r0, [pc, #312]	; (80043ec <_svfiprintf_r+0x1d4>)
 80042b2:	f7fb ff8d 	bl	80001d0 <memchr>
 80042b6:	1c67      	adds	r7, r4, #1
 80042b8:	9b04      	ldr	r3, [sp, #16]
 80042ba:	b138      	cbz	r0, 80042cc <_svfiprintf_r+0xb4>
 80042bc:	4a4b      	ldr	r2, [pc, #300]	; (80043ec <_svfiprintf_r+0x1d4>)
 80042be:	1a80      	subs	r0, r0, r2
 80042c0:	fa06 f000 	lsl.w	r0, r6, r0
 80042c4:	4318      	orrs	r0, r3
 80042c6:	9004      	str	r0, [sp, #16]
 80042c8:	463c      	mov	r4, r7
 80042ca:	e7ef      	b.n	80042ac <_svfiprintf_r+0x94>
 80042cc:	06d9      	lsls	r1, r3, #27
 80042ce:	bf44      	itt	mi
 80042d0:	2220      	movmi	r2, #32
 80042d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80042d6:	071a      	lsls	r2, r3, #28
 80042d8:	bf44      	itt	mi
 80042da:	222b      	movmi	r2, #43	; 0x2b
 80042dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80042e0:	7822      	ldrb	r2, [r4, #0]
 80042e2:	2a2a      	cmp	r2, #42	; 0x2a
 80042e4:	d003      	beq.n	80042ee <_svfiprintf_r+0xd6>
 80042e6:	9a07      	ldr	r2, [sp, #28]
 80042e8:	2100      	movs	r1, #0
 80042ea:	200a      	movs	r0, #10
 80042ec:	e00b      	b.n	8004306 <_svfiprintf_r+0xee>
 80042ee:	9a03      	ldr	r2, [sp, #12]
 80042f0:	1d11      	adds	r1, r2, #4
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	9103      	str	r1, [sp, #12]
 80042f6:	2a00      	cmp	r2, #0
 80042f8:	da10      	bge.n	800431c <_svfiprintf_r+0x104>
 80042fa:	4252      	negs	r2, r2
 80042fc:	f043 0002 	orr.w	r0, r3, #2
 8004300:	9207      	str	r2, [sp, #28]
 8004302:	9004      	str	r0, [sp, #16]
 8004304:	e00b      	b.n	800431e <_svfiprintf_r+0x106>
 8004306:	4627      	mov	r7, r4
 8004308:	3401      	adds	r4, #1
 800430a:	783b      	ldrb	r3, [r7, #0]
 800430c:	3b30      	subs	r3, #48	; 0x30
 800430e:	2b09      	cmp	r3, #9
 8004310:	d803      	bhi.n	800431a <_svfiprintf_r+0x102>
 8004312:	fb00 3202 	mla	r2, r0, r2, r3
 8004316:	2101      	movs	r1, #1
 8004318:	e7f5      	b.n	8004306 <_svfiprintf_r+0xee>
 800431a:	b101      	cbz	r1, 800431e <_svfiprintf_r+0x106>
 800431c:	9207      	str	r2, [sp, #28]
 800431e:	783b      	ldrb	r3, [r7, #0]
 8004320:	2b2e      	cmp	r3, #46	; 0x2e
 8004322:	d11e      	bne.n	8004362 <_svfiprintf_r+0x14a>
 8004324:	787b      	ldrb	r3, [r7, #1]
 8004326:	2b2a      	cmp	r3, #42	; 0x2a
 8004328:	d10a      	bne.n	8004340 <_svfiprintf_r+0x128>
 800432a:	9b03      	ldr	r3, [sp, #12]
 800432c:	1d1a      	adds	r2, r3, #4
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	9203      	str	r2, [sp, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	bfb8      	it	lt
 8004336:	f04f 33ff 	movlt.w	r3, #4294967295
 800433a:	3702      	adds	r7, #2
 800433c:	9305      	str	r3, [sp, #20]
 800433e:	e010      	b.n	8004362 <_svfiprintf_r+0x14a>
 8004340:	2300      	movs	r3, #0
 8004342:	9305      	str	r3, [sp, #20]
 8004344:	1c78      	adds	r0, r7, #1
 8004346:	4619      	mov	r1, r3
 8004348:	240a      	movs	r4, #10
 800434a:	4607      	mov	r7, r0
 800434c:	3001      	adds	r0, #1
 800434e:	783a      	ldrb	r2, [r7, #0]
 8004350:	3a30      	subs	r2, #48	; 0x30
 8004352:	2a09      	cmp	r2, #9
 8004354:	d803      	bhi.n	800435e <_svfiprintf_r+0x146>
 8004356:	fb04 2101 	mla	r1, r4, r1, r2
 800435a:	2301      	movs	r3, #1
 800435c:	e7f5      	b.n	800434a <_svfiprintf_r+0x132>
 800435e:	b103      	cbz	r3, 8004362 <_svfiprintf_r+0x14a>
 8004360:	9105      	str	r1, [sp, #20]
 8004362:	2203      	movs	r2, #3
 8004364:	7839      	ldrb	r1, [r7, #0]
 8004366:	4822      	ldr	r0, [pc, #136]	; (80043f0 <_svfiprintf_r+0x1d8>)
 8004368:	f7fb ff32 	bl	80001d0 <memchr>
 800436c:	b140      	cbz	r0, 8004380 <_svfiprintf_r+0x168>
 800436e:	2340      	movs	r3, #64	; 0x40
 8004370:	ebcb 0000 	rsb	r0, fp, r0
 8004374:	fa03 f000 	lsl.w	r0, r3, r0
 8004378:	9b04      	ldr	r3, [sp, #16]
 800437a:	4318      	orrs	r0, r3
 800437c:	9004      	str	r0, [sp, #16]
 800437e:	3701      	adds	r7, #1
 8004380:	7839      	ldrb	r1, [r7, #0]
 8004382:	481c      	ldr	r0, [pc, #112]	; (80043f4 <_svfiprintf_r+0x1dc>)
 8004384:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004388:	2206      	movs	r2, #6
 800438a:	1c7e      	adds	r6, r7, #1
 800438c:	f7fb ff20 	bl	80001d0 <memchr>
 8004390:	b188      	cbz	r0, 80043b6 <_svfiprintf_r+0x19e>
 8004392:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <_svfiprintf_r+0x1e0>)
 8004394:	b933      	cbnz	r3, 80043a4 <_svfiprintf_r+0x18c>
 8004396:	9b03      	ldr	r3, [sp, #12]
 8004398:	3307      	adds	r3, #7
 800439a:	f023 0307 	bic.w	r3, r3, #7
 800439e:	3308      	adds	r3, #8
 80043a0:	9303      	str	r3, [sp, #12]
 80043a2:	e014      	b.n	80043ce <_svfiprintf_r+0x1b6>
 80043a4:	ab03      	add	r3, sp, #12
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	462a      	mov	r2, r5
 80043aa:	4b14      	ldr	r3, [pc, #80]	; (80043fc <_svfiprintf_r+0x1e4>)
 80043ac:	a904      	add	r1, sp, #16
 80043ae:	4640      	mov	r0, r8
 80043b0:	f3af 8000 	nop.w
 80043b4:	e007      	b.n	80043c6 <_svfiprintf_r+0x1ae>
 80043b6:	ab03      	add	r3, sp, #12
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	462a      	mov	r2, r5
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <_svfiprintf_r+0x1e4>)
 80043be:	a904      	add	r1, sp, #16
 80043c0:	4640      	mov	r0, r8
 80043c2:	f000 f893 	bl	80044ec <_printf_i>
 80043c6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80043ca:	4682      	mov	sl, r0
 80043cc:	d003      	beq.n	80043d6 <_svfiprintf_r+0x1be>
 80043ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043d0:	4453      	add	r3, sl
 80043d2:	9309      	str	r3, [sp, #36]	; 0x24
 80043d4:	e742      	b.n	800425c <_svfiprintf_r+0x44>
 80043d6:	89ab      	ldrh	r3, [r5, #12]
 80043d8:	065b      	lsls	r3, r3, #25
 80043da:	d401      	bmi.n	80043e0 <_svfiprintf_r+0x1c8>
 80043dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043de:	e001      	b.n	80043e4 <_svfiprintf_r+0x1cc>
 80043e0:	f04f 30ff 	mov.w	r0, #4294967295
 80043e4:	b01d      	add	sp, #116	; 0x74
 80043e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ea:	bf00      	nop
 80043ec:	08004af8 	.word	0x08004af8
 80043f0:	08004afe 	.word	0x08004afe
 80043f4:	08004b02 	.word	0x08004b02
 80043f8:	00000000 	.word	0x00000000
 80043fc:	08004165 	.word	0x08004165

08004400 <_printf_common>:
 8004400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004404:	4691      	mov	r9, r2
 8004406:	461f      	mov	r7, r3
 8004408:	690a      	ldr	r2, [r1, #16]
 800440a:	688b      	ldr	r3, [r1, #8]
 800440c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004410:	4293      	cmp	r3, r2
 8004412:	bfb8      	it	lt
 8004414:	4613      	movlt	r3, r2
 8004416:	f8c9 3000 	str.w	r3, [r9]
 800441a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800441e:	4606      	mov	r6, r0
 8004420:	460c      	mov	r4, r1
 8004422:	b112      	cbz	r2, 800442a <_printf_common+0x2a>
 8004424:	3301      	adds	r3, #1
 8004426:	f8c9 3000 	str.w	r3, [r9]
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	0699      	lsls	r1, r3, #26
 800442e:	bf42      	ittt	mi
 8004430:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004434:	3302      	addmi	r3, #2
 8004436:	f8c9 3000 	strmi.w	r3, [r9]
 800443a:	6825      	ldr	r5, [r4, #0]
 800443c:	f015 0506 	ands.w	r5, r5, #6
 8004440:	d110      	bne.n	8004464 <_printf_common+0x64>
 8004442:	f104 0a19 	add.w	sl, r4, #25
 8004446:	e007      	b.n	8004458 <_printf_common+0x58>
 8004448:	2301      	movs	r3, #1
 800444a:	4652      	mov	r2, sl
 800444c:	4639      	mov	r1, r7
 800444e:	4630      	mov	r0, r6
 8004450:	47c0      	blx	r8
 8004452:	3001      	adds	r0, #1
 8004454:	d01a      	beq.n	800448c <_printf_common+0x8c>
 8004456:	3501      	adds	r5, #1
 8004458:	68e3      	ldr	r3, [r4, #12]
 800445a:	f8d9 2000 	ldr.w	r2, [r9]
 800445e:	1a9b      	subs	r3, r3, r2
 8004460:	429d      	cmp	r5, r3
 8004462:	dbf1      	blt.n	8004448 <_printf_common+0x48>
 8004464:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004468:	6822      	ldr	r2, [r4, #0]
 800446a:	3300      	adds	r3, #0
 800446c:	bf18      	it	ne
 800446e:	2301      	movne	r3, #1
 8004470:	0692      	lsls	r2, r2, #26
 8004472:	d50f      	bpl.n	8004494 <_printf_common+0x94>
 8004474:	18e1      	adds	r1, r4, r3
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	2030      	movs	r0, #48	; 0x30
 800447a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800447e:	4422      	add	r2, r4
 8004480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004484:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004488:	3302      	adds	r3, #2
 800448a:	e003      	b.n	8004494 <_printf_common+0x94>
 800448c:	f04f 30ff 	mov.w	r0, #4294967295
 8004490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004498:	4639      	mov	r1, r7
 800449a:	4630      	mov	r0, r6
 800449c:	47c0      	blx	r8
 800449e:	3001      	adds	r0, #1
 80044a0:	d0f4      	beq.n	800448c <_printf_common+0x8c>
 80044a2:	6822      	ldr	r2, [r4, #0]
 80044a4:	f8d9 5000 	ldr.w	r5, [r9]
 80044a8:	68e3      	ldr	r3, [r4, #12]
 80044aa:	f002 0206 	and.w	r2, r2, #6
 80044ae:	2a04      	cmp	r2, #4
 80044b0:	bf08      	it	eq
 80044b2:	1b5d      	subeq	r5, r3, r5
 80044b4:	6922      	ldr	r2, [r4, #16]
 80044b6:	68a3      	ldr	r3, [r4, #8]
 80044b8:	bf0c      	ite	eq
 80044ba:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044be:	2500      	movne	r5, #0
 80044c0:	4293      	cmp	r3, r2
 80044c2:	bfc4      	itt	gt
 80044c4:	1a9b      	subgt	r3, r3, r2
 80044c6:	18ed      	addgt	r5, r5, r3
 80044c8:	f04f 0900 	mov.w	r9, #0
 80044cc:	341a      	adds	r4, #26
 80044ce:	454d      	cmp	r5, r9
 80044d0:	d009      	beq.n	80044e6 <_printf_common+0xe6>
 80044d2:	2301      	movs	r3, #1
 80044d4:	4622      	mov	r2, r4
 80044d6:	4639      	mov	r1, r7
 80044d8:	4630      	mov	r0, r6
 80044da:	47c0      	blx	r8
 80044dc:	3001      	adds	r0, #1
 80044de:	d0d5      	beq.n	800448c <_printf_common+0x8c>
 80044e0:	f109 0901 	add.w	r9, r9, #1
 80044e4:	e7f3      	b.n	80044ce <_printf_common+0xce>
 80044e6:	2000      	movs	r0, #0
 80044e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080044ec <_printf_i>:
 80044ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044f0:	4617      	mov	r7, r2
 80044f2:	7e0a      	ldrb	r2, [r1, #24]
 80044f4:	b085      	sub	sp, #20
 80044f6:	2a6e      	cmp	r2, #110	; 0x6e
 80044f8:	4698      	mov	r8, r3
 80044fa:	4606      	mov	r6, r0
 80044fc:	460c      	mov	r4, r1
 80044fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004500:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004504:	f000 80ae 	beq.w	8004664 <_printf_i+0x178>
 8004508:	d811      	bhi.n	800452e <_printf_i+0x42>
 800450a:	2a63      	cmp	r2, #99	; 0x63
 800450c:	d022      	beq.n	8004554 <_printf_i+0x68>
 800450e:	d809      	bhi.n	8004524 <_printf_i+0x38>
 8004510:	2a00      	cmp	r2, #0
 8004512:	f000 80bb 	beq.w	800468c <_printf_i+0x1a0>
 8004516:	2a58      	cmp	r2, #88	; 0x58
 8004518:	f040 80ca 	bne.w	80046b0 <_printf_i+0x1c4>
 800451c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004520:	4983      	ldr	r1, [pc, #524]	; (8004730 <_printf_i+0x244>)
 8004522:	e055      	b.n	80045d0 <_printf_i+0xe4>
 8004524:	2a64      	cmp	r2, #100	; 0x64
 8004526:	d01e      	beq.n	8004566 <_printf_i+0x7a>
 8004528:	2a69      	cmp	r2, #105	; 0x69
 800452a:	d01c      	beq.n	8004566 <_printf_i+0x7a>
 800452c:	e0c0      	b.n	80046b0 <_printf_i+0x1c4>
 800452e:	2a73      	cmp	r2, #115	; 0x73
 8004530:	f000 80b0 	beq.w	8004694 <_printf_i+0x1a8>
 8004534:	d809      	bhi.n	800454a <_printf_i+0x5e>
 8004536:	2a6f      	cmp	r2, #111	; 0x6f
 8004538:	d02e      	beq.n	8004598 <_printf_i+0xac>
 800453a:	2a70      	cmp	r2, #112	; 0x70
 800453c:	f040 80b8 	bne.w	80046b0 <_printf_i+0x1c4>
 8004540:	680a      	ldr	r2, [r1, #0]
 8004542:	f042 0220 	orr.w	r2, r2, #32
 8004546:	600a      	str	r2, [r1, #0]
 8004548:	e03e      	b.n	80045c8 <_printf_i+0xdc>
 800454a:	2a75      	cmp	r2, #117	; 0x75
 800454c:	d024      	beq.n	8004598 <_printf_i+0xac>
 800454e:	2a78      	cmp	r2, #120	; 0x78
 8004550:	d03a      	beq.n	80045c8 <_printf_i+0xdc>
 8004552:	e0ad      	b.n	80046b0 <_printf_i+0x1c4>
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800455a:	1d11      	adds	r1, r2, #4
 800455c:	6019      	str	r1, [r3, #0]
 800455e:	6813      	ldr	r3, [r2, #0]
 8004560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004564:	e0a8      	b.n	80046b8 <_printf_i+0x1cc>
 8004566:	6821      	ldr	r1, [r4, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800456e:	d002      	beq.n	8004576 <_printf_i+0x8a>
 8004570:	1d11      	adds	r1, r2, #4
 8004572:	6019      	str	r1, [r3, #0]
 8004574:	e008      	b.n	8004588 <_printf_i+0x9c>
 8004576:	f011 0f40 	tst.w	r1, #64	; 0x40
 800457a:	f102 0104 	add.w	r1, r2, #4
 800457e:	6019      	str	r1, [r3, #0]
 8004580:	d002      	beq.n	8004588 <_printf_i+0x9c>
 8004582:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004586:	e000      	b.n	800458a <_printf_i+0x9e>
 8004588:	6813      	ldr	r3, [r2, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	da3c      	bge.n	8004608 <_printf_i+0x11c>
 800458e:	222d      	movs	r2, #45	; 0x2d
 8004590:	425b      	negs	r3, r3
 8004592:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004596:	e037      	b.n	8004608 <_printf_i+0x11c>
 8004598:	6821      	ldr	r1, [r4, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	f011 0f80 	tst.w	r1, #128	; 0x80
 80045a0:	d002      	beq.n	80045a8 <_printf_i+0xbc>
 80045a2:	1d11      	adds	r1, r2, #4
 80045a4:	6019      	str	r1, [r3, #0]
 80045a6:	e007      	b.n	80045b8 <_printf_i+0xcc>
 80045a8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80045ac:	f102 0104 	add.w	r1, r2, #4
 80045b0:	6019      	str	r1, [r3, #0]
 80045b2:	d001      	beq.n	80045b8 <_printf_i+0xcc>
 80045b4:	8813      	ldrh	r3, [r2, #0]
 80045b6:	e000      	b.n	80045ba <_printf_i+0xce>
 80045b8:	6813      	ldr	r3, [r2, #0]
 80045ba:	7e22      	ldrb	r2, [r4, #24]
 80045bc:	495c      	ldr	r1, [pc, #368]	; (8004730 <_printf_i+0x244>)
 80045be:	2a6f      	cmp	r2, #111	; 0x6f
 80045c0:	bf14      	ite	ne
 80045c2:	220a      	movne	r2, #10
 80045c4:	2208      	moveq	r2, #8
 80045c6:	e01b      	b.n	8004600 <_printf_i+0x114>
 80045c8:	2278      	movs	r2, #120	; 0x78
 80045ca:	495a      	ldr	r1, [pc, #360]	; (8004734 <_printf_i+0x248>)
 80045cc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80045d0:	6822      	ldr	r2, [r4, #0]
 80045d2:	6818      	ldr	r0, [r3, #0]
 80045d4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80045d8:	f100 0504 	add.w	r5, r0, #4
 80045dc:	601d      	str	r5, [r3, #0]
 80045de:	d103      	bne.n	80045e8 <_printf_i+0xfc>
 80045e0:	0655      	lsls	r5, r2, #25
 80045e2:	d501      	bpl.n	80045e8 <_printf_i+0xfc>
 80045e4:	8803      	ldrh	r3, [r0, #0]
 80045e6:	e000      	b.n	80045ea <_printf_i+0xfe>
 80045e8:	6803      	ldr	r3, [r0, #0]
 80045ea:	07d0      	lsls	r0, r2, #31
 80045ec:	bf44      	itt	mi
 80045ee:	f042 0220 	orrmi.w	r2, r2, #32
 80045f2:	6022      	strmi	r2, [r4, #0]
 80045f4:	b91b      	cbnz	r3, 80045fe <_printf_i+0x112>
 80045f6:	6822      	ldr	r2, [r4, #0]
 80045f8:	f022 0220 	bic.w	r2, r2, #32
 80045fc:	6022      	str	r2, [r4, #0]
 80045fe:	2210      	movs	r2, #16
 8004600:	2000      	movs	r0, #0
 8004602:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004606:	e001      	b.n	800460c <_printf_i+0x120>
 8004608:	4949      	ldr	r1, [pc, #292]	; (8004730 <_printf_i+0x244>)
 800460a:	220a      	movs	r2, #10
 800460c:	6865      	ldr	r5, [r4, #4]
 800460e:	60a5      	str	r5, [r4, #8]
 8004610:	2d00      	cmp	r5, #0
 8004612:	db08      	blt.n	8004626 <_printf_i+0x13a>
 8004614:	6820      	ldr	r0, [r4, #0]
 8004616:	f020 0004 	bic.w	r0, r0, #4
 800461a:	6020      	str	r0, [r4, #0]
 800461c:	b92b      	cbnz	r3, 800462a <_printf_i+0x13e>
 800461e:	2d00      	cmp	r5, #0
 8004620:	d17d      	bne.n	800471e <_printf_i+0x232>
 8004622:	4675      	mov	r5, lr
 8004624:	e00c      	b.n	8004640 <_printf_i+0x154>
 8004626:	2b00      	cmp	r3, #0
 8004628:	d079      	beq.n	800471e <_printf_i+0x232>
 800462a:	4675      	mov	r5, lr
 800462c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004630:	fb02 3310 	mls	r3, r2, r0, r3
 8004634:	5ccb      	ldrb	r3, [r1, r3]
 8004636:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800463a:	4603      	mov	r3, r0
 800463c:	2800      	cmp	r0, #0
 800463e:	d1f5      	bne.n	800462c <_printf_i+0x140>
 8004640:	2a08      	cmp	r2, #8
 8004642:	d10b      	bne.n	800465c <_printf_i+0x170>
 8004644:	6823      	ldr	r3, [r4, #0]
 8004646:	07da      	lsls	r2, r3, #31
 8004648:	d508      	bpl.n	800465c <_printf_i+0x170>
 800464a:	6923      	ldr	r3, [r4, #16]
 800464c:	6862      	ldr	r2, [r4, #4]
 800464e:	429a      	cmp	r2, r3
 8004650:	bfde      	ittt	le
 8004652:	2330      	movle	r3, #48	; 0x30
 8004654:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004658:	f105 35ff 	addle.w	r5, r5, #4294967295
 800465c:	ebc5 030e 	rsb	r3, r5, lr
 8004660:	6123      	str	r3, [r4, #16]
 8004662:	e02e      	b.n	80046c2 <_printf_i+0x1d6>
 8004664:	6808      	ldr	r0, [r1, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	6949      	ldr	r1, [r1, #20]
 800466a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800466e:	d003      	beq.n	8004678 <_printf_i+0x18c>
 8004670:	1d10      	adds	r0, r2, #4
 8004672:	6018      	str	r0, [r3, #0]
 8004674:	6813      	ldr	r3, [r2, #0]
 8004676:	e008      	b.n	800468a <_printf_i+0x19e>
 8004678:	f010 0f40 	tst.w	r0, #64	; 0x40
 800467c:	f102 0004 	add.w	r0, r2, #4
 8004680:	6018      	str	r0, [r3, #0]
 8004682:	6813      	ldr	r3, [r2, #0]
 8004684:	d001      	beq.n	800468a <_printf_i+0x19e>
 8004686:	8019      	strh	r1, [r3, #0]
 8004688:	e000      	b.n	800468c <_printf_i+0x1a0>
 800468a:	6019      	str	r1, [r3, #0]
 800468c:	2300      	movs	r3, #0
 800468e:	6123      	str	r3, [r4, #16]
 8004690:	4675      	mov	r5, lr
 8004692:	e016      	b.n	80046c2 <_printf_i+0x1d6>
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	1d11      	adds	r1, r2, #4
 8004698:	6019      	str	r1, [r3, #0]
 800469a:	6815      	ldr	r5, [r2, #0]
 800469c:	6862      	ldr	r2, [r4, #4]
 800469e:	2100      	movs	r1, #0
 80046a0:	4628      	mov	r0, r5
 80046a2:	f7fb fd95 	bl	80001d0 <memchr>
 80046a6:	b108      	cbz	r0, 80046ac <_printf_i+0x1c0>
 80046a8:	1b40      	subs	r0, r0, r5
 80046aa:	6060      	str	r0, [r4, #4]
 80046ac:	6863      	ldr	r3, [r4, #4]
 80046ae:	e004      	b.n	80046ba <_printf_i+0x1ce>
 80046b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046b4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80046b8:	2301      	movs	r3, #1
 80046ba:	6123      	str	r3, [r4, #16]
 80046bc:	2300      	movs	r3, #0
 80046be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046c2:	f8cd 8000 	str.w	r8, [sp]
 80046c6:	463b      	mov	r3, r7
 80046c8:	aa03      	add	r2, sp, #12
 80046ca:	4621      	mov	r1, r4
 80046cc:	4630      	mov	r0, r6
 80046ce:	f7ff fe97 	bl	8004400 <_printf_common>
 80046d2:	3001      	adds	r0, #1
 80046d4:	d102      	bne.n	80046dc <_printf_i+0x1f0>
 80046d6:	f04f 30ff 	mov.w	r0, #4294967295
 80046da:	e026      	b.n	800472a <_printf_i+0x23e>
 80046dc:	6923      	ldr	r3, [r4, #16]
 80046de:	462a      	mov	r2, r5
 80046e0:	4639      	mov	r1, r7
 80046e2:	4630      	mov	r0, r6
 80046e4:	47c0      	blx	r8
 80046e6:	3001      	adds	r0, #1
 80046e8:	d0f5      	beq.n	80046d6 <_printf_i+0x1ea>
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	079b      	lsls	r3, r3, #30
 80046ee:	d510      	bpl.n	8004712 <_printf_i+0x226>
 80046f0:	2500      	movs	r5, #0
 80046f2:	f104 0919 	add.w	r9, r4, #25
 80046f6:	e007      	b.n	8004708 <_printf_i+0x21c>
 80046f8:	2301      	movs	r3, #1
 80046fa:	464a      	mov	r2, r9
 80046fc:	4639      	mov	r1, r7
 80046fe:	4630      	mov	r0, r6
 8004700:	47c0      	blx	r8
 8004702:	3001      	adds	r0, #1
 8004704:	d0e7      	beq.n	80046d6 <_printf_i+0x1ea>
 8004706:	3501      	adds	r5, #1
 8004708:	68e3      	ldr	r3, [r4, #12]
 800470a:	9a03      	ldr	r2, [sp, #12]
 800470c:	1a9b      	subs	r3, r3, r2
 800470e:	429d      	cmp	r5, r3
 8004710:	dbf2      	blt.n	80046f8 <_printf_i+0x20c>
 8004712:	68e0      	ldr	r0, [r4, #12]
 8004714:	9b03      	ldr	r3, [sp, #12]
 8004716:	4298      	cmp	r0, r3
 8004718:	bfb8      	it	lt
 800471a:	4618      	movlt	r0, r3
 800471c:	e005      	b.n	800472a <_printf_i+0x23e>
 800471e:	780b      	ldrb	r3, [r1, #0]
 8004720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004728:	e78a      	b.n	8004640 <_printf_i+0x154>
 800472a:	b005      	add	sp, #20
 800472c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004730:	08004b09 	.word	0x08004b09
 8004734:	08004b1a 	.word	0x08004b1a

08004738 <_sbrk_r>:
 8004738:	b538      	push	{r3, r4, r5, lr}
 800473a:	4c06      	ldr	r4, [pc, #24]	; (8004754 <_sbrk_r+0x1c>)
 800473c:	2300      	movs	r3, #0
 800473e:	4605      	mov	r5, r0
 8004740:	4608      	mov	r0, r1
 8004742:	6023      	str	r3, [r4, #0]
 8004744:	f000 f934 	bl	80049b0 <_sbrk>
 8004748:	1c43      	adds	r3, r0, #1
 800474a:	d102      	bne.n	8004752 <_sbrk_r+0x1a>
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	b103      	cbz	r3, 8004752 <_sbrk_r+0x1a>
 8004750:	602b      	str	r3, [r5, #0]
 8004752:	bd38      	pop	{r3, r4, r5, pc}
 8004754:	200001a8 	.word	0x200001a8

08004758 <__sread>:
 8004758:	b510      	push	{r4, lr}
 800475a:	460c      	mov	r4, r1
 800475c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004760:	f000 f8e2 	bl	8004928 <_read_r>
 8004764:	2800      	cmp	r0, #0
 8004766:	bfab      	itete	ge
 8004768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800476a:	89a3      	ldrhlt	r3, [r4, #12]
 800476c:	181b      	addge	r3, r3, r0
 800476e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004772:	bfac      	ite	ge
 8004774:	6563      	strge	r3, [r4, #84]	; 0x54
 8004776:	81a3      	strhlt	r3, [r4, #12]
 8004778:	bd10      	pop	{r4, pc}

0800477a <__swrite>:
 800477a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800477e:	461f      	mov	r7, r3
 8004780:	898b      	ldrh	r3, [r1, #12]
 8004782:	05db      	lsls	r3, r3, #23
 8004784:	4605      	mov	r5, r0
 8004786:	460c      	mov	r4, r1
 8004788:	4616      	mov	r6, r2
 800478a:	d505      	bpl.n	8004798 <__swrite+0x1e>
 800478c:	2302      	movs	r3, #2
 800478e:	2200      	movs	r2, #0
 8004790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004794:	f000 f868 	bl	8004868 <_lseek_r>
 8004798:	89a3      	ldrh	r3, [r4, #12]
 800479a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800479e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047a2:	81a3      	strh	r3, [r4, #12]
 80047a4:	4632      	mov	r2, r6
 80047a6:	463b      	mov	r3, r7
 80047a8:	4628      	mov	r0, r5
 80047aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047ae:	f000 b817 	b.w	80047e0 <_write_r>

080047b2 <__sseek>:
 80047b2:	b510      	push	{r4, lr}
 80047b4:	460c      	mov	r4, r1
 80047b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ba:	f000 f855 	bl	8004868 <_lseek_r>
 80047be:	1c43      	adds	r3, r0, #1
 80047c0:	89a3      	ldrh	r3, [r4, #12]
 80047c2:	bf15      	itete	ne
 80047c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80047c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047ce:	81a3      	strheq	r3, [r4, #12]
 80047d0:	bf18      	it	ne
 80047d2:	81a3      	strhne	r3, [r4, #12]
 80047d4:	bd10      	pop	{r4, pc}

080047d6 <__sclose>:
 80047d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047da:	f000 b813 	b.w	8004804 <_close_r>
	...

080047e0 <_write_r>:
 80047e0:	b538      	push	{r3, r4, r5, lr}
 80047e2:	4c07      	ldr	r4, [pc, #28]	; (8004800 <_write_r+0x20>)
 80047e4:	4605      	mov	r5, r0
 80047e6:	4608      	mov	r0, r1
 80047e8:	4611      	mov	r1, r2
 80047ea:	2200      	movs	r2, #0
 80047ec:	6022      	str	r2, [r4, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	f000 f8ec 	bl	80049cc <_write>
 80047f4:	1c43      	adds	r3, r0, #1
 80047f6:	d102      	bne.n	80047fe <_write_r+0x1e>
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	b103      	cbz	r3, 80047fe <_write_r+0x1e>
 80047fc:	602b      	str	r3, [r5, #0]
 80047fe:	bd38      	pop	{r3, r4, r5, pc}
 8004800:	200001a8 	.word	0x200001a8

08004804 <_close_r>:
 8004804:	b538      	push	{r3, r4, r5, lr}
 8004806:	4c06      	ldr	r4, [pc, #24]	; (8004820 <_close_r+0x1c>)
 8004808:	2300      	movs	r3, #0
 800480a:	4605      	mov	r5, r0
 800480c:	4608      	mov	r0, r1
 800480e:	6023      	str	r3, [r4, #0]
 8004810:	f000 f8a6 	bl	8004960 <_close>
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	d102      	bne.n	800481e <_close_r+0x1a>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	b103      	cbz	r3, 800481e <_close_r+0x1a>
 800481c:	602b      	str	r3, [r5, #0]
 800481e:	bd38      	pop	{r3, r4, r5, pc}
 8004820:	200001a8 	.word	0x200001a8

08004824 <_fstat_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4c07      	ldr	r4, [pc, #28]	; (8004844 <_fstat_r+0x20>)
 8004828:	2300      	movs	r3, #0
 800482a:	4605      	mov	r5, r0
 800482c:	4608      	mov	r0, r1
 800482e:	4611      	mov	r1, r2
 8004830:	6023      	str	r3, [r4, #0]
 8004832:	f000 f89d 	bl	8004970 <_fstat>
 8004836:	1c43      	adds	r3, r0, #1
 8004838:	d102      	bne.n	8004840 <_fstat_r+0x1c>
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	b103      	cbz	r3, 8004840 <_fstat_r+0x1c>
 800483e:	602b      	str	r3, [r5, #0]
 8004840:	bd38      	pop	{r3, r4, r5, pc}
 8004842:	bf00      	nop
 8004844:	200001a8 	.word	0x200001a8

08004848 <_isatty_r>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	4c06      	ldr	r4, [pc, #24]	; (8004864 <_isatty_r+0x1c>)
 800484c:	2300      	movs	r3, #0
 800484e:	4605      	mov	r5, r0
 8004850:	4608      	mov	r0, r1
 8004852:	6023      	str	r3, [r4, #0]
 8004854:	f000 f894 	bl	8004980 <_isatty>
 8004858:	1c43      	adds	r3, r0, #1
 800485a:	d102      	bne.n	8004862 <_isatty_r+0x1a>
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	b103      	cbz	r3, 8004862 <_isatty_r+0x1a>
 8004860:	602b      	str	r3, [r5, #0]
 8004862:	bd38      	pop	{r3, r4, r5, pc}
 8004864:	200001a8 	.word	0x200001a8

08004868 <_lseek_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	4c07      	ldr	r4, [pc, #28]	; (8004888 <_lseek_r+0x20>)
 800486c:	4605      	mov	r5, r0
 800486e:	4608      	mov	r0, r1
 8004870:	4611      	mov	r1, r2
 8004872:	2200      	movs	r2, #0
 8004874:	6022      	str	r2, [r4, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	f000 f88a 	bl	8004990 <_lseek>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	d102      	bne.n	8004886 <_lseek_r+0x1e>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	b103      	cbz	r3, 8004886 <_lseek_r+0x1e>
 8004884:	602b      	str	r3, [r5, #0]
 8004886:	bd38      	pop	{r3, r4, r5, pc}
 8004888:	200001a8 	.word	0x200001a8

0800488c <memcpy>:
 800488c:	b510      	push	{r4, lr}
 800488e:	1e43      	subs	r3, r0, #1
 8004890:	440a      	add	r2, r1
 8004892:	4291      	cmp	r1, r2
 8004894:	d004      	beq.n	80048a0 <memcpy+0x14>
 8004896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800489a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800489e:	e7f8      	b.n	8004892 <memcpy+0x6>
 80048a0:	bd10      	pop	{r4, pc}

080048a2 <memmove>:
 80048a2:	4288      	cmp	r0, r1
 80048a4:	b510      	push	{r4, lr}
 80048a6:	eb01 0302 	add.w	r3, r1, r2
 80048aa:	d801      	bhi.n	80048b0 <memmove+0xe>
 80048ac:	1e42      	subs	r2, r0, #1
 80048ae:	e00b      	b.n	80048c8 <memmove+0x26>
 80048b0:	4298      	cmp	r0, r3
 80048b2:	d2fb      	bcs.n	80048ac <memmove+0xa>
 80048b4:	1881      	adds	r1, r0, r2
 80048b6:	1ad2      	subs	r2, r2, r3
 80048b8:	42d3      	cmn	r3, r2
 80048ba:	d004      	beq.n	80048c6 <memmove+0x24>
 80048bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80048c4:	e7f8      	b.n	80048b8 <memmove+0x16>
 80048c6:	bd10      	pop	{r4, pc}
 80048c8:	4299      	cmp	r1, r3
 80048ca:	d004      	beq.n	80048d6 <memmove+0x34>
 80048cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048d0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80048d4:	e7f8      	b.n	80048c8 <memmove+0x26>
 80048d6:	bd10      	pop	{r4, pc}

080048d8 <__malloc_lock>:
 80048d8:	4770      	bx	lr

080048da <__malloc_unlock>:
 80048da:	4770      	bx	lr

080048dc <_realloc_r>:
 80048dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048de:	4607      	mov	r7, r0
 80048e0:	4615      	mov	r5, r2
 80048e2:	460e      	mov	r6, r1
 80048e4:	b921      	cbnz	r1, 80048f0 <_realloc_r+0x14>
 80048e6:	4611      	mov	r1, r2
 80048e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048ec:	f7ff bbdc 	b.w	80040a8 <_malloc_r>
 80048f0:	b91a      	cbnz	r2, 80048fa <_realloc_r+0x1e>
 80048f2:	f7ff fb8b 	bl	800400c <_free_r>
 80048f6:	4628      	mov	r0, r5
 80048f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048fa:	f000 f827 	bl	800494c <_malloc_usable_size_r>
 80048fe:	4285      	cmp	r5, r0
 8004900:	d90e      	bls.n	8004920 <_realloc_r+0x44>
 8004902:	4629      	mov	r1, r5
 8004904:	4638      	mov	r0, r7
 8004906:	f7ff fbcf 	bl	80040a8 <_malloc_r>
 800490a:	4604      	mov	r4, r0
 800490c:	b150      	cbz	r0, 8004924 <_realloc_r+0x48>
 800490e:	4631      	mov	r1, r6
 8004910:	462a      	mov	r2, r5
 8004912:	f7ff ffbb 	bl	800488c <memcpy>
 8004916:	4631      	mov	r1, r6
 8004918:	4638      	mov	r0, r7
 800491a:	f7ff fb77 	bl	800400c <_free_r>
 800491e:	e001      	b.n	8004924 <_realloc_r+0x48>
 8004920:	4630      	mov	r0, r6
 8004922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004924:	4620      	mov	r0, r4
 8004926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004928 <_read_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4c07      	ldr	r4, [pc, #28]	; (8004948 <_read_r+0x20>)
 800492c:	4605      	mov	r5, r0
 800492e:	4608      	mov	r0, r1
 8004930:	4611      	mov	r1, r2
 8004932:	2200      	movs	r2, #0
 8004934:	6022      	str	r2, [r4, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	f000 f832 	bl	80049a0 <_read>
 800493c:	1c43      	adds	r3, r0, #1
 800493e:	d102      	bne.n	8004946 <_read_r+0x1e>
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	b103      	cbz	r3, 8004946 <_read_r+0x1e>
 8004944:	602b      	str	r3, [r5, #0]
 8004946:	bd38      	pop	{r3, r4, r5, pc}
 8004948:	200001a8 	.word	0x200001a8

0800494c <_malloc_usable_size_r>:
 800494c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004950:	2800      	cmp	r0, #0
 8004952:	bfbe      	ittt	lt
 8004954:	1809      	addlt	r1, r1, r0
 8004956:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 800495a:	18c0      	addlt	r0, r0, r3
 800495c:	3804      	subs	r0, #4
 800495e:	4770      	bx	lr

08004960 <_close>:
 8004960:	4b02      	ldr	r3, [pc, #8]	; (800496c <_close+0xc>)
 8004962:	2258      	movs	r2, #88	; 0x58
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	f04f 30ff 	mov.w	r0, #4294967295
 800496a:	4770      	bx	lr
 800496c:	200001a8 	.word	0x200001a8

08004970 <_fstat>:
 8004970:	4b02      	ldr	r3, [pc, #8]	; (800497c <_fstat+0xc>)
 8004972:	2258      	movs	r2, #88	; 0x58
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	f04f 30ff 	mov.w	r0, #4294967295
 800497a:	4770      	bx	lr
 800497c:	200001a8 	.word	0x200001a8

08004980 <_isatty>:
 8004980:	4b02      	ldr	r3, [pc, #8]	; (800498c <_isatty+0xc>)
 8004982:	2258      	movs	r2, #88	; 0x58
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	2000      	movs	r0, #0
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	200001a8 	.word	0x200001a8

08004990 <_lseek>:
 8004990:	4b02      	ldr	r3, [pc, #8]	; (800499c <_lseek+0xc>)
 8004992:	2258      	movs	r2, #88	; 0x58
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	f04f 30ff 	mov.w	r0, #4294967295
 800499a:	4770      	bx	lr
 800499c:	200001a8 	.word	0x200001a8

080049a0 <_read>:
 80049a0:	4b02      	ldr	r3, [pc, #8]	; (80049ac <_read+0xc>)
 80049a2:	2258      	movs	r2, #88	; 0x58
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	f04f 30ff 	mov.w	r0, #4294967295
 80049aa:	4770      	bx	lr
 80049ac:	200001a8 	.word	0x200001a8

080049b0 <_sbrk>:
 80049b0:	4b04      	ldr	r3, [pc, #16]	; (80049c4 <_sbrk+0x14>)
 80049b2:	6819      	ldr	r1, [r3, #0]
 80049b4:	4602      	mov	r2, r0
 80049b6:	b909      	cbnz	r1, 80049bc <_sbrk+0xc>
 80049b8:	4903      	ldr	r1, [pc, #12]	; (80049c8 <_sbrk+0x18>)
 80049ba:	6019      	str	r1, [r3, #0]
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	4402      	add	r2, r0
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	4770      	bx	lr
 80049c4:	2000008c 	.word	0x2000008c
 80049c8:	200001ac 	.word	0x200001ac

080049cc <_write>:
 80049cc:	4b02      	ldr	r3, [pc, #8]	; (80049d8 <_write+0xc>)
 80049ce:	2258      	movs	r2, #88	; 0x58
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	f04f 30ff 	mov.w	r0, #4294967295
 80049d6:	4770      	bx	lr
 80049d8:	200001a8 	.word	0x200001a8

080049dc <_init>:
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049de:	bf00      	nop
 80049e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e2:	bc08      	pop	{r3}
 80049e4:	469e      	mov	lr, r3
 80049e6:	4770      	bx	lr

080049e8 <_fini>:
 80049e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ea:	bf00      	nop
 80049ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ee:	bc08      	pop	{r3}
 80049f0:	469e      	mov	lr, r3
 80049f2:	4770      	bx	lr
